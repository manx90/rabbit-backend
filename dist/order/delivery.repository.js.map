{"version":3,"sources":["../../src/order/delivery.repository.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  NotFoundException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { DeliveryModel } from './delivery.model';\r\n\r\nexport interface CreateDeliveryDto {\r\n  cityName: string;\r\n  optusId?: string;\r\n  price: number;\r\n}\r\n\r\nexport interface UpdateDeliveryDto {\r\n  cityName?: string;\r\n  optusId?: string;\r\n  price?: number;\r\n}\r\n\r\n@Injectable()\r\nexport class DeliveryRepository {\r\n  constructor(\r\n    @InjectRepository(DeliveryModel)\r\n    private readonly deliveryRepo: Repository<DeliveryModel>,\r\n  ) {}\r\n\r\n  async createDelivery(dto: CreateDeliveryDto): Promise<DeliveryModel> {\r\n    // Check if city already exists\r\n    const existingDelivery = await this.deliveryRepo.findOne({\r\n      where: { cityName: dto.cityName },\r\n    });\r\n\r\n    if (existingDelivery) {\r\n      throw new BadRequestException(\r\n        `Delivery for city ${dto.cityName} already exists`,\r\n      );\r\n    }\r\n\r\n    const delivery = new DeliveryModel();\r\n    delivery.cityName = dto.cityName;\r\n    delivery.optusId = dto.optusId ?? '';\r\n    delivery.price = dto.price;\r\n\r\n    return this.deliveryRepo.save(delivery);\r\n  }\r\n\r\n  async getAllDeliveries(): Promise<DeliveryModel[]> {\r\n    return this.deliveryRepo.find({\r\n      order: { cityName: 'ASC' },\r\n    });\r\n  }\r\n\r\n  async getDeliveries(): Promise<DeliveryModel[]> {\r\n    return this.deliveryRepo.find({\r\n      order: { cityName: 'ASC' },\r\n    });\r\n  }\r\n\r\n  async getDeliveryById(id: number): Promise<DeliveryModel> {\r\n    const delivery = await this.deliveryRepo.findOne({ where: { id } });\r\n    if (!delivery) {\r\n      throw new NotFoundException(`Delivery with ID ${id} not found`);\r\n    }\r\n    return delivery;\r\n  }\r\n\r\n  async getDeliveryByCity(cityName: string): Promise<DeliveryModel> {\r\n    const delivery = await this.deliveryRepo.findOne({\r\n      where: { cityName },\r\n    });\r\n    if (!delivery) {\r\n      throw new NotFoundException(`Delivery for city ${cityName} not found`);\r\n    }\r\n    return delivery;\r\n  }\r\n\r\n  async getDeliveryByOptusId(optusId: string): Promise<DeliveryModel> {\r\n    const delivery = await this.deliveryRepo.findOne({\r\n      where: { optusId },\r\n    });\r\n    if (!delivery) {\r\n      throw new NotFoundException(\r\n        `Delivery with Optus ID ${optusId} not found`,\r\n      );\r\n    }\r\n    return delivery;\r\n  }\r\n\r\n  async updateDelivery(\r\n    id: number,\r\n    dto: UpdateDeliveryDto,\r\n  ): Promise<DeliveryModel> {\r\n    const delivery = await this.getDeliveryById(id);\r\n\r\n    // Check if city name is being changed and if it already exists\r\n    if (dto.cityName && dto.cityName !== delivery.cityName) {\r\n      const existingDelivery = await this.deliveryRepo.findOne({\r\n        where: { cityName: dto.cityName },\r\n      });\r\n      if (existingDelivery) {\r\n        throw new BadRequestException(\r\n          `Delivery for city ${dto.cityName} already exists`,\r\n        );\r\n      }\r\n    }\r\n\r\n    if (dto.cityName) delivery.cityName = dto.cityName;\r\n    if (dto.optusId !== undefined) delivery.optusId = dto.optusId;\r\n    if (dto.price !== undefined) delivery.price = dto.price;\r\n\r\n    return this.deliveryRepo.save(delivery);\r\n  }\r\n\r\n  async deleteDelivery(id: number): Promise<void> {\r\n    const delivery = await this.getDeliveryById(id);\r\n    await this.deliveryRepo.remove(delivery);\r\n  }\r\n\r\n  async searchDeliveries(searchTerm: string): Promise<DeliveryModel[]> {\r\n    return this.deliveryRepo\r\n      .createQueryBuilder('delivery')\r\n      .where('delivery.cityName ILIKE :searchTerm', {\r\n        searchTerm: `%${searchTerm}%`,\r\n      })\r\n      .orWhere('delivery.optusId ILIKE :searchTerm', {\r\n        searchTerm: `%${searchTerm}%`,\r\n      })\r\n      .orderBy('delivery.cityName', 'ASC')\r\n      .getMany();\r\n  }\r\n\r\n  async getDeliveryPriceByCity(cityName: string): Promise<number> {\r\n    const delivery = await this.getDeliveryByCity(cityName);\r\n    return delivery.price;\r\n  }\r\n\r\n  async getDeliveryPriceByOptusId(optusId: string): Promise<number> {\r\n    const delivery = await this.getDeliveryByOptusId(optusId);\r\n    return delivery.price;\r\n  }\r\n\r\n  async countDeliveries(): Promise<number> {\r\n    return this.deliveryRepo.count();\r\n  }\r\n\r\n  async bulkCreateDeliveries(\r\n    deliveries: CreateDeliveryDto[],\r\n  ): Promise<DeliveryModel[]> {\r\n    const createdDeliveries: DeliveryModel[] = [];\r\n\r\n    for (const dto of deliveries) {\r\n      try {\r\n        const delivery = await this.createDelivery(dto);\r\n        createdDeliveries.push(delivery);\r\n      } catch (error) {\r\n        // Log error but continue with other deliveries\r\n        console.error(\r\n          `Failed to create delivery for city ${dto.cityName}:`,\r\n          (error as Error).message,\r\n        );\r\n      }\r\n    }\r\n\r\n    return createdDeliveries;\r\n  }\r\n}\r\n"],"names":["DeliveryRepository","createDelivery","dto","existingDelivery","deliveryRepo","findOne","where","cityName","BadRequestException","delivery","DeliveryModel","optusId","price","save","getAllDeliveries","find","order","getDeliveries","getDeliveryById","id","NotFoundException","getDeliveryByCity","getDeliveryByOptusId","updateDelivery","undefined","deleteDelivery","remove","searchDeliveries","searchTerm","createQueryBuilder","orWhere","orderBy","getMany","getDeliveryPriceByCity","getDeliveryPriceByOptusId","countDeliveries","count","bulkCreateDeliveries","deliveries","createdDeliveries","push","error","console","message","constructor"],"mappings":"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"}