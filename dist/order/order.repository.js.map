{"version":3,"sources":["../../src/order/order.repository.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport {\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { order, orderitem } from './order.entity';\nimport { CreateOrderDto, UpdateOrderDto } from './order.dto';\nimport { product } from 'src/product/entities/product.entity';\nimport { OrderStatus } from './order.types';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { OptosShipmentService } from 'src/optos/optos.shipment.service';\nimport { CreateShipmentDto } from 'src/optos/optos.dto';\n// import { OrderStatus } from './order.types';\n\n@Injectable()\nexport class OrderRepository {\n  constructor(\n    @InjectRepository(order)\n    private readonly orderRepo: Repository<order>,\n    @InjectRepository(product)\n    private readonly productRepo: Repository<product>,\n    @InjectRepository(auth)\n    private readonly authRepo: Repository<auth>,\n    private readonly optosService: OptosShipmentService,\n  ) {}\n\n  /** Create and persist a new order */\n  /**\n   * Create and persist a new order\n   * @param dto CreateOrderDto\n   * @returns Promise<order>\n   */\n  async createOrder(dto: CreateOrderDto): Promise<order> {\n    const Order = new order();\n    // order.business = 1; // Set explicit business value\n    Order.items = [];\n    for (const item of dto.items) {\n      const product = await this.productRepo.findOne({\n        where: { id: item.productId },\n        relations: ['category', 'subCategory'],\n      });\n      if (!product)\n        throw new BadRequestException(`Product ${item.productId} not found`);\n\n      const size = product.sizeDetails.find(\n        (size) => size.sizeName === item.sizeName,\n      );\n      if (!size) {\n        throw new BadRequestException(\n          `Size ${item.sizeName} not found in product ${product.id}`,\n        );\n      }\n\n      const color = size.quantities.find((q) => q.colorName === item.colorName);\n      if (!color) {\n        throw new BadRequestException(\n          `Color ${item.colorName} not found in product ${product.id} with size ${item.sizeName}`,\n        );\n      }\n\n      // Check if there's enough quantity for this specific size and color\n      if (color.quantity < item.quantity) {\n        throw new BadRequestException(\n          `Insufficient quantity. Available: ${color.quantity}, Requested: ${item.quantity} for product ${product.id} with size ${item.sizeName} and color ${item.colorName}`,\n        );\n      }\n\n      if (item.quantity <= 0) {\n        throw new BadRequestException(\n          `Quantity of ${item.quantity} is not valid for product ${product.id}`,\n        );\n      }\n\n      const orderItem = new orderitem();\n      orderItem.product = product;\n      orderItem.productId = product.id;\n      orderItem.sizeName = size.sizeName;\n      orderItem.colorName = color.colorName;\n      orderItem.quantity = item.quantity;\n      orderItem.order = Order;\n      Order.items.push(orderItem);\n\n      // Update the specific color quantity for this size\n      color.quantity -= item.quantity;\n      await this.productRepo.save(product);\n    }\n    // First save the order\n    const savedOrder = await this.orderRepo.save(Order);\n\n    // Calculate total amount after items are saved\n    savedOrder.amount = Order.items.reduce(\n      (total, item) => total + item.price * item.quantity,\n      0,\n    );\n    Order.consignee_name = dto.consignee_name;\n    Order.consignee_phone = dto.consignee_phone;\n    Order.consignee_city = dto.consignee_city;\n    Order.consignee_area = dto.consignee_area;\n    Order.consignee_address = dto.consignee_address;\n    Order.shipment_types = dto.shipment_types;\n    Order.quantity = dto.quantity;\n    Order.items_description = dto.items_description;\n    Order.is_cod = dto.is_cod;\n    Order.cod_amount = Order.amount.toString();\n    Order.has_return = dto.has_return;\n    Order.return_notes = dto.return_notes;\n    Order.notes = dto.notes;\n\n    //optos create shipment\n    const shipmentDto: CreateShipmentDto = {\n      consignee_name: dto.consignee_name,\n      consignee_phone: dto.consignee_phone,\n      consignee_city: dto.consignee_city,\n      consignee_area: dto.consignee_area,\n      consignee_address: dto.consignee_address,\n      shipment_types: dto.shipment_types,\n      quantity: dto.quantity,\n      items_description: dto.items_description,\n      is_cod: dto.is_cod === '1' ? '1' : '0',\n      cod_amount: Order.amount.toString(),\n      has_return: dto.has_return === '1' ? '1' : '0',\n      return_notes: dto.return_notes,\n      notes: dto.notes,\n    };\n    await this.optosService.createShipment(shipmentDto);\n    // Update the order with the calculated amount\n    return this.orderRepo.save(savedOrder);\n  }\n  // update order\n  async updateOrder(id: string, orderDto: UpdateOrderDto): Promise<order> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n\n    // Safely update string fields\n    if (orderDto.consignee_name) order.consignee_name = orderDto.consignee_name;\n    if (orderDto.consignee_phone)\n      order.consignee_phone = orderDto.consignee_phone;\n    if (orderDto.consignee_city) order.consignee_city = orderDto.consignee_city;\n    if (orderDto.consignee_area) order.consignee_area = orderDto.consignee_area;\n    if (orderDto.consignee_address)\n      order.consignee_address = orderDto.consignee_address;\n    if (orderDto.shipment_types) order.shipment_types = orderDto.shipment_types;\n    if (orderDto.items_description)\n      order.items_description = orderDto.items_description;\n    if (orderDto.return_notes) order.return_notes = orderDto.return_notes;\n    if (orderDto.notes) order.notes = orderDto.notes;\n\n    // Safely update numeric fields\n    if (orderDto.quantity && !isNaN(Number(orderDto.quantity))) {\n      order.quantity = orderDto.quantity;\n    }\n\n    if (orderDto.cod_amount && !isNaN(Number(orderDto.cod_amount))) {\n      order.cod_amount = orderDto.cod_amount;\n    }\n\n    // Handle boolean fields represented as strings\n    if (orderDto.is_cod) {\n      order.is_cod = orderDto.is_cod;\n    }\n\n    if (orderDto.has_return) {\n      order.has_return = orderDto.has_return;\n    }\n\n    if (orderDto.items) {\n      const orderItems = await Promise.all(\n        orderDto.items.map(async (item) => {\n          const orderItem = new orderitem();\n          const product = await this.productRepo.findOne({\n            where: { id: item.productId },\n            relations: ['category', 'subCategory'],\n          });\n          if (!product) {\n            throw new BadRequestException(\n              `Product ${item.productId} not found`,\n            );\n          }\n          const size = product.sizeDetails.find(\n            (size) => size.sizeName === item.sizeName,\n          );\n          if (!size) {\n            throw new BadRequestException(\n              `Size ${item.sizeName} not found in product ${product.id}`,\n            );\n          }\n          const color = size.quantities.find(\n            (q) => q.colorName === item.colorName,\n          );\n          if (!color) {\n            throw new BadRequestException(\n              `Color ${item.colorName} not found in product ${product.id} with size ${item.sizeName}`,\n            );\n          }\n          orderItem.product = product; // Set the product object\n          orderItem.productId = product.id;\n          orderItem.sizeName = size.sizeName;\n          orderItem.colorName = color.colorName;\n          orderItem.quantity = item.quantity;\n          orderItem.order = order;\n          return orderItem;\n        }),\n      );\n      order.items = orderItems;\n      // Update the order with the new items\n      return this.orderRepo.save(order);\n    }\n    return order;\n  }\n  /**\n   * Update order status to processing\n   * @param id string\n   * @returns Promise<void>\n   */\n  async updateOrderStatusToProcessing(id: string): Promise<order> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n    order.status = OrderStatus.PROCESSING;\n    const updatedOrder = await this.orderRepo.save(order);\n    return updatedOrder;\n  }\n\n  /**\n   * Update order status to delivered\n   * @param id string\n   * @returns Promise<void>\n   */\n  async updateOrderStatusToDelivered(id: string): Promise<void> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n    order.status = OrderStatus.DELIVERED;\n    await this.orderRepo.save(order);\n    return;\n  }\n\n  /**\n   * Update order status to shipped\n   * @param id string\n   * @returns Promise<void>\n   */\n  async updateOrderStatusToShipped(id: string): Promise<void> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n    order.status = OrderStatus.SHIPPED;\n    await this.orderRepo.save(order);\n  }\n\n  /**\n   * Update order status to cancelled\n   * @param id string\n   * @returns Promise<void>\n   */\n  async updateOrderStatusToCancelled(id: string): Promise<void> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n    order.status = OrderStatus.CANCELLED;\n    await this.orderRepo.save(order);\n  }\n\n  /**\n   * Get all orders\n   * @returns Promise<order[]>\n   */\n  async getAllOrders(): Promise<order[]> {\n    return this.orderRepo.find();\n  }\n\n  /**\n   * Get order by id\n   * @param id string\n   * @returns Promise<order>\n   */\n  async getOrderById(id: string): Promise<order> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n    return order;\n  }\n\n  /**\n   * Get orders by status\n   * @param status OrderStatus\n   * @returns Promise<order[]>\n   */\n  async getOrdersByStatus(status: OrderStatus): Promise<order[]> {\n    return this.orderRepo.find({ where: { status } });\n  }\n\n  /**\n   * Delete order\n   * @param id string\n   * @returns Promise<void>\n   */\n  async deleteOrder(id: string): Promise<void> {\n    const order = await this.orderRepo.findOne({ where: { id } });\n    if (!order) {\n      throw new NotFoundException(`Order ${id} not found`);\n    }\n    await this.orderRepo.remove(order);\n  }\n\n  /**\n   * Add ready by user to order\n   * @param id string\n   * @param readyById string\n   * @returns Promise<order>\n   */\n  async addReadyBy(id: string, readyById: string): Promise<order> {\n    const order = await this.getOrderById(id);\n    const readyBy = await this.authRepo.findOne({ where: { id: readyById } });\n    if (!readyBy) {\n      throw new NotFoundException(`Ready by user ${readyById} not found`);\n    }\n    const readyByUser = new auth();\n    readyByUser.username = readyBy.username;\n    order.readyBy = readyByUser;\n    const optos: CreateShipmentDto = {\n      consignee_name: order.consignee_name,\n      consignee_phone: order.consignee_phone,\n      consignee_city: String(order.consignee_city),\n      consignee_area: String(order.consignee_area),\n      consignee_address: order.consignee_address,\n      shipment_types: String(order.shipment_types),\n      quantity: String(order.quantity),\n      items_description: order.items_description,\n      is_cod: order.is_cod ? '1' : '0',\n      cod_amount: String(order.cod_amount),\n      has_return: order.has_return ? '1' : '0',\n      return_notes: order.return_notes,\n      notes: order.notes,\n    };\n    await this.optosService.createShipment(optos);\n    return this.orderRepo.save(order);\n  }\n}\n"],"names":["OrderRepository","createOrder","dto","Order","order","items","item","product","productRepo","findOne","where","id","productId","relations","BadRequestException","size","sizeDetails","find","sizeName","color","quantities","q","colorName","quantity","orderItem","orderitem","push","save","savedOrder","orderRepo","amount","reduce","total","price","consignee_name","consignee_phone","consignee_city","consignee_area","consignee_address","shipment_types","items_description","is_cod","cod_amount","toString","has_return","return_notes","notes","shipmentDto","optosService","createShipment","updateOrder","orderDto","NotFoundException","isNaN","Number","orderItems","Promise","all","map","updateOrderStatusToProcessing","status","OrderStatus","PROCESSING","updatedOrder","updateOrderStatusToDelivered","DELIVERED","updateOrderStatusToShipped","SHIPPED","updateOrderStatusToCancelled","CANCELLED","getAllOrders","getOrderById","getOrdersByStatus","deleteOrder","remove","addReadyBy","readyById","readyBy","authRepo","readyByUser","auth","username","optos","String","constructor"],"mappings":"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"}