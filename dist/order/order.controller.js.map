{"version":3,"sources":["../../src/order/order.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Post,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Param,\n  Put,\n  Get,\n  Delete,\n  UseGuards,\n  Req,\n  UnauthorizedException,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n} from '@nestjs/swagger';\nimport { OrderService } from './order.service';\nimport { CreateOrderDto, UpdateOrderDto } from './order.dto';\nimport { order } from './order.entity';\nimport { OrderStatus } from './order.types';\nimport { Roles } from 'src/common/decorators/roles.decorator';\nimport { Role } from 'src/common/constants/roles.constant';\nimport { RolesGuard } from 'src/common/guards/roles.guard';\nimport { JwtAuthGuard } from 'src/common/guards/jwt-auth.guard';\nimport { Request } from 'express';\nimport { auth } from 'src/auth/entities/auth.entity';\n\n@ApiTags('Orders')\n@Controller('order')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post('create')\n  @ApiOperation({ summary: 'Create a new order' })\n  @ApiBody({ type: CreateOrderDto })\n  @ApiCreatedResponse({\n    description: 'Order created successfully',\n    type: order,\n  })\n  @ApiBadRequestResponse({ description: 'Bad request - validation failed' })\n  createOrder(@Body() createOrderDto: CreateOrderDto): Promise<order> {\n    return this.orderService.createOrder(createOrderDto);\n  }\n\n  @Get('numberOfOrders')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get total number of orders (Admin/SuperAdmin only)',\n  })\n  @ApiOkResponse({ description: 'Total orders count retrieved successfully' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  numberOfOrders(): Promise<number> {\n    return this.orderService.numberOfOrders();\n  }\n\n  @Get('count/pending')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  countPendingOrders(): Promise<number> {\n    return this.orderService.countPendingOrders();\n  }\n\n  @Get('count/cancelled')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  countCancelledOrders(): Promise<number> {\n    return this.orderService.countCancelledOrders();\n  }\n\n  @Get('count/shipped')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  countShippedOrders(): Promise<number> {\n    return this.orderService.countShippedOrders();\n  }\n\n  @Get('count/readied')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  countReadiedOrders(): Promise<number> {\n    return this.orderService.countReadiedOrders();\n  }\n\n  @Put('update/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update order by ID (Admin/SuperAdmin only)' })\n  @ApiParam({ name: 'id', description: 'Order ID' })\n  @ApiBody({ type: UpdateOrderDto })\n  @ApiOkResponse({ description: 'Order updated successfully', type: order })\n  @ApiNotFoundResponse({ description: 'Order not found' })\n  @ApiBadRequestResponse({ description: 'Bad request - validation failed' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  updateOrder(\n    @Param('id') id: string,\n    @Body() updateOrderDto: UpdateOrderDto,\n  ): Promise<order> {\n    return this.orderService.updateOrder(id, updateOrderDto);\n  }\n\n  @Get()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get all orders (Admin/SuperAdmin only)' })\n  @ApiOkResponse({\n    description: 'Orders retrieved successfully',\n    type: [order],\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  getAllOrders(): Promise<order[]> {\n    return this.orderService.getAllOrders();\n  }\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get order by ID (Admin/SuperAdmin only)' })\n  @ApiParam({ name: 'id', description: 'Order ID' })\n  @ApiOkResponse({ description: 'Order retrieved successfully', type: order })\n  @ApiNotFoundResponse({ description: 'Order not found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  getOrderById(@Param('id') id: string): Promise<order> {\n    return this.orderService.getOrderById(id);\n  }\n\n  @Get('status/:status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  getOrdersByStatus(@Param('status') status: OrderStatus): Promise<order[]> {\n    return this.orderService.getOrdersByStatus(status);\n  }\n\n  @Put('readyBy/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  addReadyBy(@Param('id') id: string, @Req() req: Request): Promise<order> {\n    if (!req.user) {\n      throw new UnauthorizedException('User not found');\n    }\n    const userId = (req.user as auth).id;\n    return this.orderService.addReadyBy(id, userId);\n  }\n\n  @Delete()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  deleteAllOrders(): Promise<void> {\n    return this.orderService.deleteAllOrders();\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  deleteOrder(@Param('id') id: string): Promise<void> {\n    return this.orderService.deleteOrder(id);\n  }\n\n  @Put('readied/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToReadied(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToReadied(id);\n  }\n\n  @Put('shipped/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToShipped(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToShipped(id);\n  }\n\n  @Put('cancelled/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToCancelled(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToCancelled(id);\n  }\n\n  @Get('stats/revenue')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  getRevenue(\n    @Query('startDate') startDate?: string,\n    @Query('endDate') endDate?: string,\n  ): Promise<{ totalRevenue: number; totalOrders: number }> {\n    const options: { startDate?: Date; endDate?: Date } = {};\n    if (startDate && endDate) {\n      options.startDate = new Date(startDate);\n      options.endDate = new Date(endDate);\n    }\n    return this.orderService.getRevenue(options);\n  }\n\n  @Get('stats/growth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  getGrowth(@Query('days') days?: string): Promise<{\n    orders: { current: number; previous: number; percentChange: number };\n    revenue: { current: number; previous: number; percentChange: number };\n  }> {\n    const d = days ? parseInt(days) : 30;\n    return this.orderService.getGrowth(d);\n  }\n}\n"],"names":["OrderController","createOrder","createOrderDto","orderService","numberOfOrders","countPendingOrders","countCancelledOrders","countShippedOrders","countReadiedOrders","updateOrder","id","updateOrderDto","getAllOrders","getOrderById","getOrdersByStatus","status","addReadyBy","req","user","UnauthorizedException","userId","deleteAllOrders","deleteOrder","updateOrderStatusToReadied","updateOrderStatusToShipped","updateOrderStatusToCancelled","getRevenue","startDate","endDate","options","Date","getGrowth","days","d","parseInt","constructor","summary","type","CreateOrderDto","description","order","Admin","SuperAdmin","name","UpdateOrderDto"],"mappings":"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"}