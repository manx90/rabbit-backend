{"version":3,"sources":["../../src/order/order.controller.ts"],"sourcesContent":["import {\r\n  Body,\r\n  Controller,\r\n  Post,\r\n  UseInterceptors,\r\n  ClassSerializerInterceptor,\r\n  Param,\r\n  Put,\r\n  Get,\r\n  Delete,\r\n  UseGuards,\r\n  Req,\r\n  UnauthorizedException,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { OrderService } from './order.service';\r\nimport { CreateOrderDto, UpdateOrderDto } from './order.dto';\r\nimport { order } from './order.entity';\r\nimport { OrderStatus } from './order.types';\r\nimport { Roles } from 'src/common/decorators/roles.decorator';\r\nimport { Role } from 'src/common/constants/roles.constant';\r\nimport { RolesGuard } from 'src/common/guards/roles.guard';\r\nimport { JwtAuthGuard } from 'src/common/guards/jwt-auth.guard';\r\nimport { Request } from 'express';\r\nimport { auth } from 'src/auth/entities/auth.entity';\r\n\r\n@Controller('order')\r\n@UseInterceptors(ClassSerializerInterceptor)\r\nexport class OrderController {\r\n  constructor(private readonly orderService: OrderService) {}\r\n\r\n  @Post('create')\r\n  createOrder(@Body() createOrderDto: CreateOrderDto): Promise<order> {\r\n    return this.orderService.createOrder(createOrderDto);\r\n  }\r\n\r\n  @Get('numberOfOrders')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  numberOfOrders(): Promise<number> {\r\n    return this.orderService.numberOfOrders();\r\n  }\r\n\r\n  @Get('count/pending')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  countPendingOrders(): Promise<number> {\r\n    return this.orderService.countPendingOrders();\r\n  }\r\n\r\n  @Get('count/cancelled')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  countCancelledOrders(): Promise<number> {\r\n    return this.orderService.countCancelledOrders();\r\n  }\r\n\r\n  @Get('count/shipped')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  countShippedOrders(): Promise<number> {\r\n    return this.orderService.countShippedOrders();\r\n  }\r\n\r\n  @Get('count/readied')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  countReadiedOrders(): Promise<number> {\r\n    return this.orderService.countReadiedOrders();\r\n  }\r\n\r\n  @Put('update/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrder(\r\n    @Param('id') id: string,\r\n    @Body() updateOrderDto: UpdateOrderDto,\r\n  ): Promise<order> {\r\n    return this.orderService.updateOrder(id, updateOrderDto);\r\n  }\r\n\r\n  @Get()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getAllOrders(): Promise<order[]> {\r\n    return this.orderService.getAllOrders();\r\n  }\r\n\r\n  @Get(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getOrderById(@Param('id') id: string): Promise<order> {\r\n    return this.orderService.getOrderById(id);\r\n  }\r\n\r\n  @Get('status/:status')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getOrdersByStatus(@Param('status') status: OrderStatus): Promise<order[]> {\r\n    return this.orderService.getOrdersByStatus(status);\r\n  }\r\n\r\n  @Put('readyBy/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  addReadyBy(@Param('id') id: string, @Req() req: Request): Promise<order> {\r\n    if (!req.user) {\r\n      throw new UnauthorizedException('User not found');\r\n    }\r\n    const userId = (req.user as auth).id;\r\n    return this.orderService.addReadyBy(id, userId);\r\n  }\r\n\r\n  @Delete()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  deleteAllOrders(): Promise<void> {\r\n    return this.orderService.deleteAllOrders();\r\n  }\r\n\r\n  @Delete(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  deleteOrder(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.deleteOrder(id);\r\n  }\r\n\r\n  @Put('readied/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrderStatusToReadied(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.updateOrderStatusToReadied(id);\r\n  }\r\n\r\n  @Put('shipped/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrderStatusToShipped(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.updateOrderStatusToShipped(id);\r\n  }\r\n\r\n  @Put('cancelled/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrderStatusToCancelled(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.updateOrderStatusToCancelled(id);\r\n  }\r\n\r\n  @Get('stats/revenue')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getRevenue(\r\n    @Query('startDate') startDate?: string,\r\n    @Query('endDate') endDate?: string,\r\n  ): Promise<{ totalRevenue: number; totalOrders: number }> {\r\n    const options: { startDate?: Date; endDate?: Date } = {};\r\n    if (startDate && endDate) {\r\n      options.startDate = new Date(startDate);\r\n      options.endDate = new Date(endDate);\r\n    }\r\n    return this.orderService.getRevenue(options);\r\n  }\r\n\r\n  @Get('stats/growth')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getGrowth(@Query('days') days?: string): Promise<{\r\n    orders: { current: number; previous: number; percentChange: number };\r\n    revenue: { current: number; previous: number; percentChange: number };\r\n  }> {\r\n    const d = days ? parseInt(days) : 30;\r\n    return this.orderService.getGrowth(d);\r\n  }\r\n}\r\n"],"names":["OrderController","createOrder","createOrderDto","orderService","numberOfOrders","countPendingOrders","countCancelledOrders","countShippedOrders","countReadiedOrders","updateOrder","id","updateOrderDto","getAllOrders","getOrderById","getOrdersByStatus","status","addReadyBy","req","user","UnauthorizedException","userId","deleteAllOrders","deleteOrder","updateOrderStatusToReadied","updateOrderStatusToShipped","updateOrderStatusToCancelled","getRevenue","startDate","endDate","options","Date","getGrowth","days","d","parseInt","constructor","Admin","SuperAdmin"],"mappings":"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"}