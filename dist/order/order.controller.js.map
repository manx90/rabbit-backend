{"version":3,"sources":["../../src/order/order.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Post,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  Param,\n  Put,\n  Get,\n  Delete,\n  UseGuards,\n  Req,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { OrderService } from './order.service';\nimport { CreateOrderDto, UpdateOrderDto } from './order.dto';\nimport { order } from './order.entity';\nimport { OrderStatus } from './order.types';\nimport { Roles } from 'src/common/decorators/roles.decorator';\nimport { Role } from 'src/common/constants/roles.constant';\nimport { RolesGuard } from 'src/common/guards/roles.guard';\nimport { JwtAuthGuard } from 'src/common/guards/jwt-auth.guard';\nimport { Request } from 'express';\nimport { auth } from 'src/auth/entities/auth.entity';\n\n@Controller('order')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post('create')\n  createOrder(@Body() createOrderDto: CreateOrderDto): Promise<order> {\n    return this.orderService.createOrder(createOrderDto);\n  }\n\n  @Get('numberOfOrders')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  numberOfOrders(): Promise<number> {\n    return this.orderService.numberOfOrders();\n  }\n\n  @Put('update/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrder(\n    @Param('id') id: string,\n    @Body() updateOrderDto: UpdateOrderDto,\n  ): Promise<order> {\n    return this.orderService.updateOrder(id, updateOrderDto);\n  }\n\n  @Get()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  getAllOrders(): Promise<order[]> {\n    return this.orderService.getAllOrders();\n  }\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  getOrderById(@Param('id') id: string): Promise<order> {\n    return this.orderService.getOrderById(id);\n  }\n\n  @Get('status/:status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  getOrdersByStatus(@Param('status') status: OrderStatus): Promise<order[]> {\n    return this.orderService.getOrdersByStatus(status);\n  }\n\n  @Put('readyBy/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  addReadyBy(@Param('id') id: string, @Req() req: Request): Promise<order> {\n    if (!req.user) {\n      throw new UnauthorizedException('User not found');\n    }\n    const userId = (req.user as auth).id;\n    return this.orderService.addReadyBy(id, userId);\n  }\n\n  @Delete()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  deleteAllOrders(): Promise<void> {\n    return this.orderService.deleteAllOrders();\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  deleteOrder(@Param('id') id: string): Promise<void> {\n    return this.orderService.deleteOrder(id);\n  }\n\n  @Put('processing/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToProcessing(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToProcessing(id);\n  }\n\n  @Put('delivered/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToDelivered(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToDelivered(id);\n  }\n\n  @Put('shipped/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToShipped(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToShipped(id);\n  }\n\n  @Put('cancelled/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  updateOrderStatusToCancelled(@Param('id') id: string): Promise<void> {\n    return this.orderService.updateOrderStatusToCancelled(id);\n  }\n\n  \n}\n"],"names":["OrderController","createOrder","createOrderDto","orderService","numberOfOrders","updateOrder","id","updateOrderDto","getAllOrders","getOrderById","getOrdersByStatus","status","addReadyBy","req","user","UnauthorizedException","userId","deleteAllOrders","deleteOrder","updateOrderStatusToProcessing","updateOrderStatusToDelivered","updateOrderStatusToShipped","updateOrderStatusToCancelled","constructor","Admin","SuperAdmin"],"mappings":";;;;+BA2BaA;;;eAAAA;;;wBAdN;8BACsB;0BACkB;4BAEnB;gCACN;+BACD;4BACM;8BACE;yBACL;;;;;;;;;;;;;;;AAKjB,IAAA,AAAMA,kBAAN,MAAMA;IAIXC,YAAY,AAAQC,cAA8B,EAAkB;QAClE,OAAO,IAAI,CAACC,YAAY,CAACF,WAAW,CAACC;IACvC;IAKAE,iBAAkC;QAChC,OAAO,IAAI,CAACD,YAAY,CAACC,cAAc;IACzC;IAKAC,YACE,AAAaC,EAAU,EACvB,AAAQC,cAA8B,EACtB;QAChB,OAAO,IAAI,CAACJ,YAAY,CAACE,WAAW,CAACC,IAAIC;IAC3C;IAKAC,eAAiC;QAC/B,OAAO,IAAI,CAACL,YAAY,CAACK,YAAY;IACvC;IAKAC,aAAa,AAAaH,EAAU,EAAkB;QACpD,OAAO,IAAI,CAACH,YAAY,CAACM,YAAY,CAACH;IACxC;IAKAI,kBAAkB,AAAiBC,MAAmB,EAAoB;QACxE,OAAO,IAAI,CAACR,YAAY,CAACO,iBAAiB,CAACC;IAC7C;IAKAC,WAAW,AAAaN,EAAU,EAAE,AAAOO,GAAY,EAAkB;QACvE,IAAI,CAACA,IAAIC,IAAI,EAAE;YACb,MAAM,IAAIC,6BAAqB,CAAC;QAClC;QACA,MAAMC,SAAS,AAACH,IAAIC,IAAI,CAAUR,EAAE;QACpC,OAAO,IAAI,CAACH,YAAY,CAACS,UAAU,CAACN,IAAIU;IAC1C;IAKAC,kBAAiC;QAC/B,OAAO,IAAI,CAACd,YAAY,CAACc,eAAe;IAC1C;IAKAC,YAAY,AAAaZ,EAAU,EAAiB;QAClD,OAAO,IAAI,CAACH,YAAY,CAACe,WAAW,CAACZ;IACvC;IAKAa,8BAA8B,AAAab,EAAU,EAAiB;QACpE,OAAO,IAAI,CAACH,YAAY,CAACgB,6BAA6B,CAACb;IACzD;IAKAc,6BAA6B,AAAad,EAAU,EAAiB;QACnE,OAAO,IAAI,CAACH,YAAY,CAACiB,4BAA4B,CAACd;IACxD;IAKAe,2BAA2B,AAAaf,EAAU,EAAiB;QACjE,OAAO,IAAI,CAACH,YAAY,CAACkB,0BAA0B,CAACf;IACtD;IAKAgB,6BAA6B,AAAahB,EAAU,EAAiB;QACnE,OAAO,IAAI,CAACH,YAAY,CAACmB,4BAA4B,CAAChB;IACxD;IAhGAiB,YAAY,AAAiBpB,YAA0B,CAAE;aAA5BA,eAAAA;IAA6B;AAmG5D;;;;;;;;;;;;;mDA1FcqB,2BAAYC;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;;;mDAUZD,2BAAYC;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;;;mDAWZD,2BAAYC;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC"}