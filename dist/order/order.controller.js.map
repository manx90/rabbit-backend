{"version":3,"sources":["../../src/order/order.controller.ts"],"sourcesContent":["import {\r\n  Body,\r\n  Controller,\r\n  Post,\r\n  UseInterceptors,\r\n  ClassSerializerInterceptor,\r\n  Param,\r\n  Put,\r\n  Get,\r\n  Delete,\r\n  UseGuards,\r\n  Req,\r\n  UnauthorizedException,\r\n} from '@nestjs/common';\r\nimport { OrderService } from './order.service';\r\nimport { CreateOrderDto, UpdateOrderDto } from './order.dto';\r\nimport { order } from './order.entity';\r\nimport { OrderStatus } from './order.types';\r\nimport { Roles } from 'src/common/decorators/roles.decorator';\r\nimport { Role } from 'src/common/constants/roles.constant';\r\nimport { RolesGuard } from 'src/common/guards/roles.guard';\r\nimport { JwtAuthGuard } from 'src/common/guards/jwt-auth.guard';\r\nimport { Request } from 'express';\r\nimport { auth } from 'src/auth/entities/auth.entity';\r\n\r\n@Controller('order')\r\n@UseInterceptors(ClassSerializerInterceptor)\r\nexport class OrderController {\r\n  constructor(private readonly orderService: OrderService) {}\r\n\r\n  @Post('create')\r\n  createOrder(@Body() createOrderDto: CreateOrderDto): Promise<order> {\r\n    return this.orderService.createOrder(createOrderDto);\r\n  }\r\n\r\n  @Get('numberOfOrders')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  numberOfOrders(): Promise<number> {\r\n    return this.orderService.numberOfOrders();\r\n  }\r\n\r\n  @Put('update/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrder(\r\n    @Param('id') id: string,\r\n    @Body() updateOrderDto: UpdateOrderDto,\r\n  ): Promise<order> {\r\n    return this.orderService.updateOrder(id, updateOrderDto);\r\n  }\r\n\r\n  @Get()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getAllOrders(): Promise<order[]> {\r\n    return this.orderService.getAllOrders();\r\n  }\r\n\r\n  @Get(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getOrderById(@Param('id') id: string): Promise<order> {\r\n    return this.orderService.getOrderById(id);\r\n  }\r\n\r\n  @Get('status/:status')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  getOrdersByStatus(@Param('status') status: OrderStatus): Promise<order[]> {\r\n    return this.orderService.getOrdersByStatus(status);\r\n  }\r\n\r\n  @Put('readyBy/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  addReadyBy(@Param('id') id: string, @Req() req: Request): Promise<order> {\r\n    if (!req.user) {\r\n      throw new UnauthorizedException('User not found');\r\n    }\r\n    const userId = (req.user as auth).id;\r\n    return this.orderService.addReadyBy(id, userId);\r\n  }\r\n\r\n  @Delete()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  deleteAllOrders(): Promise<void> {\r\n    return this.orderService.deleteAllOrders();\r\n  }\r\n\r\n  @Delete(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  deleteOrder(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.deleteOrder(id);\r\n  }\r\n\r\n  @Put('readied/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrderStatusToReadied(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.updateOrderStatusToReadied(id);\r\n  }\r\n\r\n  @Put('shipped/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrderStatusToShipped(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.updateOrderStatusToShipped(id);\r\n  }\r\n\r\n  @Put('cancelled/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  updateOrderStatusToCancelled(@Param('id') id: string): Promise<void> {\r\n    return this.orderService.updateOrderStatusToCancelled(id);\r\n  }\r\n}\r\n"],"names":["OrderController","createOrder","createOrderDto","orderService","numberOfOrders","updateOrder","id","updateOrderDto","getAllOrders","getOrderById","getOrdersByStatus","status","addReadyBy","req","user","UnauthorizedException","userId","deleteAllOrders","deleteOrder","updateOrderStatusToReadied","updateOrderStatusToShipped","updateOrderStatusToCancelled","constructor","Admin","SuperAdmin"],"mappings":";;;;+BA2BaA;;;eAAAA;;;wBAdN;8BACsB;0BACkB;4BAEnB;gCACN;+BACD;4BACM;8BACE;yBACL;;;;;;;;;;;;;;;AAKjB,IAAA,AAAMA,kBAAN,MAAMA;IAIXC,YAAY,AAAQC,cAA8B,EAAkB;QAClE,OAAO,IAAI,CAACC,YAAY,CAACF,WAAW,CAACC;IACvC;IAKAE,iBAAkC;QAChC,OAAO,IAAI,CAACD,YAAY,CAACC,cAAc;IACzC;IAKAC,YACE,AAAaC,EAAU,EACvB,AAAQC,cAA8B,EACtB;QAChB,OAAO,IAAI,CAACJ,YAAY,CAACE,WAAW,CAACC,IAAIC;IAC3C;IAKAC,eAAiC;QAC/B,OAAO,IAAI,CAACL,YAAY,CAACK,YAAY;IACvC;IAKAC,aAAa,AAAaH,EAAU,EAAkB;QACpD,OAAO,IAAI,CAACH,YAAY,CAACM,YAAY,CAACH;IACxC;IAKAI,kBAAkB,AAAiBC,MAAmB,EAAoB;QACxE,OAAO,IAAI,CAACR,YAAY,CAACO,iBAAiB,CAACC;IAC7C;IAKAC,WAAW,AAAaN,EAAU,EAAE,AAAOO,GAAY,EAAkB;QACvE,IAAI,CAACA,IAAIC,IAAI,EAAE;YACb,MAAM,IAAIC,6BAAqB,CAAC;QAClC;QACA,MAAMC,SAAS,AAACH,IAAIC,IAAI,CAAUR,EAAE;QACpC,OAAO,IAAI,CAACH,YAAY,CAACS,UAAU,CAACN,IAAIU;IAC1C;IAKAC,kBAAiC;QAC/B,OAAO,IAAI,CAACd,YAAY,CAACc,eAAe;IAC1C;IAKAC,YAAY,AAAaZ,EAAU,EAAiB;QAClD,OAAO,IAAI,CAACH,YAAY,CAACe,WAAW,CAACZ;IACvC;IAKAa,2BAA2B,AAAab,EAAU,EAAiB;QACjE,OAAO,IAAI,CAACH,YAAY,CAACgB,0BAA0B,CAACb;IACtD;IAKAc,2BAA2B,AAAad,EAAU,EAAiB;QACjE,OAAO,IAAI,CAACH,YAAY,CAACiB,0BAA0B,CAACd;IACtD;IAKAe,6BAA6B,AAAaf,EAAU,EAAiB;QACnE,OAAO,IAAI,CAACH,YAAY,CAACkB,4BAA4B,CAACf;IACxD;IAzFAgB,YAAY,AAAiBnB,YAA0B,CAAE;aAA5BA,eAAAA;IAA6B;AA0F5D;;;;;;;;;;;;;mDAjFcoB,2BAAYC;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;;;mDAUZD,2BAAYC;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;;;mDAWZD,2BAAYC;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC"}