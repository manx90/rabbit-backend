{"version":3,"sources":["../../src/order/delivery.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Delete,\r\n  Body,\r\n  Param,\r\n  ParseIntPipe,\r\n  HttpStatus,\r\n  HttpCode,\r\n} from '@nestjs/common';\r\nimport { DeliveryRepository } from './delivery.repository';\r\nimport { CreateDeliveryDto, UpdateDeliveryDto } from './delivery.dto';\r\n\r\n@Controller('delivery')\r\nexport class DeliveryController {\r\n  constructor(private readonly deliveryRepository: DeliveryRepository) {}\r\n\r\n  @Post()\r\n  @HttpCode(HttpStatus.CREATED)\r\n  async createDelivery(@Body() createDeliveryDto: CreateDeliveryDto) {\r\n    try {\r\n      const delivery =\r\n        await this.deliveryRepository.createDelivery(createDeliveryDto);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery created successfully',\r\n        data: delivery,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get()\r\n  async getAllDeliveries() {\r\n    try {\r\n      const deliveries = await this.deliveryRepository.getAllDeliveries();\r\n      return {\r\n        success: true,\r\n        message: 'Deliveries retrieved successfully',\r\n        data: deliveries,\r\n        count: deliveries.length,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get(':id')\r\n  async getDeliveryById(@Param('id', ParseIntPipe) id: number) {\r\n    try {\r\n      const delivery = await this.deliveryRepository.getDeliveryById(id);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery retrieved successfully',\r\n        data: delivery,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get('city/:cityName')\r\n  async getDeliveryByCity(@Param('cityName') cityName: string) {\r\n    try {\r\n      const delivery =\r\n        await this.deliveryRepository.getDeliveryByCity(cityName);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery retrieved successfully',\r\n        data: delivery,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get('optus/:optusId')\r\n  async getDeliveryByOptusId(@Param('optusId') optusId: string) {\r\n    try {\r\n      const delivery =\r\n        await this.deliveryRepository.getDeliveryByOptusId(optusId);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery retrieved successfully',\r\n        data: delivery,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get('price/city/:cityName')\r\n  async getDeliveryPriceByCity(@Param('cityName') cityName: string) {\r\n    try {\r\n      const price =\r\n        await this.deliveryRepository.getDeliveryPriceByCity(cityName);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery price retrieved successfully',\r\n        data: { cityName, price },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get('price/optus/:optusId')\r\n  async getDeliveryPriceByOptusId(@Param('optusId') optusId: string) {\r\n    try {\r\n      const price =\r\n        await this.deliveryRepository.getDeliveryPriceByOptusId(optusId);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery price retrieved successfully',\r\n        data: { optusId, price },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Put(':id')\r\n  async updateDelivery(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body() updateDeliveryDto: UpdateDeliveryDto,\r\n  ) {\r\n    try {\r\n      const delivery = await this.deliveryRepository.updateDelivery(\r\n        id,\r\n        updateDeliveryDto,\r\n      );\r\n      return {\r\n        success: true,\r\n        message: 'Delivery updated successfully',\r\n        data: delivery,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  async deleteDelivery(@Param('id', ParseIntPipe) id: number) {\r\n    try {\r\n      await this.deliveryRepository.deleteDelivery(id);\r\n      return {\r\n        success: true,\r\n        message: 'Delivery deleted successfully',\r\n        data: null,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get('search/:term')\r\n  async searchDeliveries(@Param('term') searchTerm: string) {\r\n    try {\r\n      const deliveries =\r\n        await this.deliveryRepository.searchDeliveries(searchTerm);\r\n      return {\r\n        success: true,\r\n        message: 'Search completed successfully',\r\n        data: deliveries,\r\n        count: deliveries.length,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Get('stats/count')\r\n  async getDeliveryCount() {\r\n    try {\r\n      const count = await this.deliveryRepository.countDeliveries();\r\n      return {\r\n        success: true,\r\n        message: 'Delivery count retrieved successfully',\r\n        data: { count },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  @Post('bulk')\r\n  @HttpCode(HttpStatus.CREATED)\r\n  async bulkCreateDeliveries(@Body() deliveries: CreateDeliveryDto[]) {\r\n    try {\r\n      const createdDeliveries =\r\n        await this.deliveryRepository.bulkCreateDeliveries(deliveries);\r\n      return {\r\n        success: true,\r\n        message: `Bulk created ${createdDeliveries.length} deliveries successfully`,\r\n        data: createdDeliveries,\r\n        count: createdDeliveries.length,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: (error as Error).message,\r\n        data: null,\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"names":["DeliveryController","createDelivery","createDeliveryDto","delivery","deliveryRepository","success","message","data","error","getAllDeliveries","deliveries","count","length","getDeliveryById","id","getDeliveryByCity","cityName","getDeliveryByOptusId","optusId","getDeliveryPriceByCity","price","getDeliveryPriceByOptusId","updateDelivery","updateDeliveryDto","deleteDelivery","searchDeliveries","searchTerm","getDeliveryCount","countDeliveries","bulkCreateDeliveries","createdDeliveries","constructor","CREATED","NO_CONTENT"],"mappings":"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"}