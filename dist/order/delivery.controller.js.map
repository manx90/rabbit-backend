{"version":3,"sources":["../../src/order/delivery.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  ParseIntPipe,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiBody,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiNoContentResponse,\n} from '@nestjs/swagger';\nimport { DeliveryRepository } from './delivery.repository';\nimport { CreateDeliveryDto, UpdateDeliveryDto } from './delivery.dto';\n\n@ApiTags('Delivery')\n@Controller('delivery')\nexport class DeliveryController {\n  constructor(private readonly deliveryRepository: DeliveryRepository) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new delivery' })\n  @ApiBody({ type: CreateDeliveryDto })\n  @ApiCreatedResponse({ description: 'Delivery created successfully' })\n  @ApiBadRequestResponse({ description: 'Bad request - validation failed' })\n  async createDelivery(@Body() createDeliveryDto: CreateDeliveryDto) {\n    try {\n      const delivery =\n        await this.deliveryRepository.createDelivery(createDeliveryDto);\n      return {\n        success: true,\n        message: 'Delivery created successfully',\n        data: delivery,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all deliveries' })\n  @ApiOkResponse({ description: 'Deliveries retrieved successfully' })\n  async getAllDeliveries() {\n    try {\n      const deliveries = await this.deliveryRepository.getAllDeliveries();\n      return {\n        success: true,\n        message: 'Deliveries retrieved successfully',\n        data: deliveries,\n        count: deliveries.length,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get delivery by ID' })\n  @ApiParam({ name: 'id', description: 'Delivery ID', type: 'number' })\n  @ApiOkResponse({ description: 'Delivery retrieved successfully' })\n  @ApiNotFoundResponse({ description: 'Delivery not found' })\n  async getDeliveryById(@Param('id', ParseIntPipe) id: number) {\n    try {\n      const delivery = await this.deliveryRepository.getDeliveryById(id);\n      return {\n        success: true,\n        message: 'Delivery retrieved successfully',\n        data: delivery,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get('city/:cityName')\n  async getDeliveryByCity(@Param('cityName') cityName: string) {\n    try {\n      const delivery =\n        await this.deliveryRepository.getDeliveryByCity(cityName);\n      return {\n        success: true,\n        message: 'Delivery retrieved successfully',\n        data: delivery,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get('optus/:optusId')\n  async getDeliveryByOptusId(@Param('optusId') optusId: string) {\n    try {\n      const delivery =\n        await this.deliveryRepository.getDeliveryByOptusId(optusId);\n      return {\n        success: true,\n        message: 'Delivery retrieved successfully',\n        data: delivery,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get('price/city/:cityName')\n  async getDeliveryPriceByCity(@Param('cityName') cityName: string) {\n    try {\n      const price =\n        await this.deliveryRepository.getDeliveryPriceByCity(cityName);\n      return {\n        success: true,\n        message: 'Delivery price retrieved successfully',\n        data: { cityName, price },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get('price/optus/:optusId')\n  async getDeliveryPriceByOptusId(@Param('optusId') optusId: string) {\n    try {\n      const price =\n        await this.deliveryRepository.getDeliveryPriceByOptusId(optusId);\n      return {\n        success: true,\n        message: 'Delivery price retrieved successfully',\n        data: { optusId, price },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update delivery by ID' })\n  @ApiParam({ name: 'id', description: 'Delivery ID', type: 'number' })\n  @ApiBody({ type: UpdateDeliveryDto })\n  @ApiOkResponse({ description: 'Delivery updated successfully' })\n  @ApiNotFoundResponse({ description: 'Delivery not found' })\n  @ApiBadRequestResponse({ description: 'Bad request - validation failed' })\n  async updateDelivery(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateDeliveryDto: UpdateDeliveryDto,\n  ) {\n    try {\n      const delivery = await this.deliveryRepository.updateDelivery(\n        id,\n        updateDeliveryDto,\n      );\n      return {\n        success: true,\n        message: 'Delivery updated successfully',\n        data: delivery,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete delivery by ID' })\n  @ApiParam({ name: 'id', description: 'Delivery ID', type: 'number' })\n  @ApiNoContentResponse({ description: 'Delivery deleted successfully' })\n  @ApiNotFoundResponse({ description: 'Delivery not found' })\n  async deleteDelivery(@Param('id', ParseIntPipe) id: number) {\n    try {\n      await this.deliveryRepository.deleteDelivery(id);\n      return {\n        success: true,\n        message: 'Delivery deleted successfully',\n        data: null,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get('search/:term')\n  async searchDeliveries(@Param('term') searchTerm: string) {\n    try {\n      const deliveries =\n        await this.deliveryRepository.searchDeliveries(searchTerm);\n      return {\n        success: true,\n        message: 'Search completed successfully',\n        data: deliveries,\n        count: deliveries.length,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Get('stats/count')\n  async getDeliveryCount() {\n    try {\n      const count = await this.deliveryRepository.countDeliveries();\n      return {\n        success: true,\n        message: 'Delivery count retrieved successfully',\n        data: { count },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n\n  @Post('bulk')\n  @HttpCode(HttpStatus.CREATED)\n  async bulkCreateDeliveries(@Body() deliveries: CreateDeliveryDto[]) {\n    try {\n      const createdDeliveries =\n        await this.deliveryRepository.bulkCreateDeliveries(deliveries);\n      return {\n        success: true,\n        message: `Bulk created ${createdDeliveries.length} deliveries successfully`,\n        data: createdDeliveries,\n        count: createdDeliveries.length,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: (error as Error).message,\n        data: null,\n      };\n    }\n  }\n}\n"],"names":["DeliveryController","createDelivery","createDeliveryDto","delivery","deliveryRepository","success","message","data","error","getAllDeliveries","deliveries","count","length","getDeliveryById","id","getDeliveryByCity","cityName","getDeliveryByOptusId","optusId","getDeliveryPriceByCity","price","getDeliveryPriceByOptusId","updateDelivery","updateDeliveryDto","deleteDelivery","searchDeliveries","searchTerm","getDeliveryCount","countDeliveries","bulkCreateDeliveries","createdDeliveries","constructor","CREATED","summary","type","CreateDeliveryDto","description","name","UpdateDeliveryDto","NO_CONTENT"],"mappings":"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"}