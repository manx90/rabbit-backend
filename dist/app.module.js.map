{"version":3,"sources":["../src/app.module.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\r\nimport { join } from 'path';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { AppConfigModule } from './config/config.module';\r\nimport { AppConfigService } from './config/config.service';\r\nimport { FileStorageModule } from './file-storage/file-storage.module';\r\nimport { OptosModule } from './optos/optos.module';\r\nimport { OrderModule } from './order/order.module';\r\nimport { ProductModule } from './product/product.module';\r\nimport { DatabaseBootstrapService } from './common/utils/database-bootstrap.service';\r\n\r\n@Module({\r\n  imports: [\r\n    AppConfigModule,\r\n    JwtModule.registerAsync({\r\n      imports: [AppConfigModule],\r\n      inject: [AppConfigService],\r\n      useFactory: (config: AppConfigService) => ({\r\n        global: true,\r\n        secret: config.jwtAccessToken,\r\n        signOptions: { expiresIn: config.jwtExpiration },\r\n      }),\r\n    }),\r\n    TypeOrmModule.forRootAsync({\r\n      imports: [AppConfigModule],\r\n      inject: [AppConfigService],\r\n      useFactory: (config: AppConfigService) => ({\r\n        type: 'mysql',\r\n        host: config.host,\r\n        port: config.port,\r\n        username: config.user,\r\n        password: config.pass,\r\n        database: config.db,\r\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\r\n        migrations: [join(__dirname, 'migrations', '*{.ts,.js}')],\r\n        synchronize: false, // Prevent auto sync on cPanel\r\n        migrationsRun: false, // We handle schema fix in DatabaseBootstrapService\r\n        // Memory optimization for cPanel\r\n        extra: {\r\n          connectionLimit: process.env.NODE_ENV === 'production' ? 3 : 10,\r\n          // Reduce memory usage\r\n          maxIdle: 10000,\r\n          idleTimeout: 60000,\r\n        },\r\n        // Disable logging in production to save memory\r\n        logging: false, // Set to false to disable all query logging\r\n      }),\r\n    }),\r\n    AuthModule,\r\n    OrderModule,\r\n    ProductModule,\r\n    OptosModule,\r\n    FileStorageModule,\r\n  ],\r\n  providers: [DatabaseBootstrapService],\r\n})\r\nexport class AppModule {}\r\n"],"names":["AppModule","imports","AppConfigModule","JwtModule","registerAsync","inject","AppConfigService","useFactory","config","global","secret","jwtAccessToken","signOptions","expiresIn","jwtExpiration","TypeOrmModule","forRootAsync","type","host","port","username","user","password","pass","database","db","entities","__dirname","migrations","join","synchronize","migrationsRun","extra","connectionLimit","process","env","NODE_ENV","maxIdle","idleTimeout","logging","AuthModule","OrderModule","ProductModule","OptosModule","FileStorageModule","providers","DatabaseBootstrapService"],"mappings":";;;;+BA0DaA;;;eAAAA;;;wBA1DU;sBACF;qBACK;yBACI;4BACH;8BACK;+BACC;mCACC;6BACN;6BACA;+BACE;0CACW;;;;;;;AA+ClC,IAAA,AAAMA,YAAN,MAAMA;AAAW;;;QA5CtBC,SAAS;YACPC,6BAAe;YACfC,cAAS,CAACC,aAAa,CAAC;gBACtBH,SAAS;oBAACC,6BAAe;iBAAC;gBAC1BG,QAAQ;oBAACC,+BAAgB;iBAAC;gBAC1BC,YAAY,CAACC,SAA8B,CAAA;wBACzCC,QAAQ;wBACRC,QAAQF,OAAOG,cAAc;wBAC7BC,aAAa;4BAAEC,WAAWL,OAAOM,aAAa;wBAAC;oBACjD,CAAA;YACF;YACAC,sBAAa,CAACC,YAAY,CAAC;gBACzBf,SAAS;oBAACC,6BAAe;iBAAC;gBAC1BG,QAAQ;oBAACC,+BAAgB;iBAAC;gBAC1BC,YAAY,CAACC,SAA8B,CAAA;wBACzCS,MAAM;wBACNC,MAAMV,OAAOU,IAAI;wBACjBC,MAAMX,OAAOW,IAAI;wBACjBC,UAAUZ,OAAOa,IAAI;wBACrBC,UAAUd,OAAOe,IAAI;wBACrBC,UAAUhB,OAAOiB,EAAE;wBACnBC,UAAU;4BAACC,YAAY;yBAAwB;wBAC/CC,YAAY;4BAACC,IAAAA,UAAI,EAACF,WAAW,cAAc;yBAAc;wBACzDG,aAAa;wBACbC,eAAe;wBACf,iCAAiC;wBACjCC,OAAO;4BACLC,iBAAiBC,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe,IAAI;4BAC7D,sBAAsB;4BACtBC,SAAS;4BACTC,aAAa;wBACf;wBACA,+CAA+C;wBAC/CC,SAAS;oBACX,CAAA;YACF;YACAC,sBAAU;YACVC,wBAAW;YACXC,4BAAa;YACbC,wBAAW;YACXC,oCAAiB;SAClB;QACDC,WAAW;YAACC,kDAAwB;SAAC"}