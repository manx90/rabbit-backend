{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport * as bodyParser from 'body-parser';\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\r\nimport { NestExpressApplication } from '@nestjs/platform-express';\r\nimport { join } from 'path';\r\n// import dataSource from './data-source';\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\r\n\r\n  // Configure static file serving for uploads\r\n  app.useStaticAssets(join(__dirname, '..', 'uploads'), {\r\n    prefix: '/uploads',\r\n  });\r\n  // await dataSource.initialize();\r\n  // await dataSource.runMigrations();\r\n  const config = new DocumentBuilder()\r\n    .setTitle('rabbit')\r\n    .setDescription('The rabbit API description')\r\n    .setVersion('1.0')\r\n    .addBearerAuth() // Add Bearer Auth to Swagger\r\n    .build();\r\n  const documentFactory = () => SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('api', app, documentFactory);\r\n\r\n  app.use(bodyParser.json({ limit: '50mb' }));\r\n  app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\r\n  app.use(LoggerMiddleware);\r\n  app.enableCors({\r\n    origin: '*',\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true,\r\n  });\r\n  app.useGlobalPipes(\r\n    new ValidationPipe({\r\n      transform: true,\r\n      transformOptions: {\r\n        enableImplicitConversion: true, // <- This line here\r\n      },\r\n    }),\r\n  );\r\n\r\n  await app.listen(process.env.PORT ?? 3000);\r\n}\r\n\r\nbootstrap();\r\n"],"names":["bootstrap","app","NestFactory","create","AppModule","useStaticAssets","join","__dirname","prefix","config","DocumentBuilder","setTitle","setDescription","setVersion","addBearerAuth","build","documentFactory","SwaggerModule","createDocument","setup","use","bodyParser","json","limit","urlencoded","extended","LoggerMiddleware","enableCors","origin","methods","credentials","useGlobalPipes","ValidationPipe","transform","transformOptions","enableImplicitConversion","process","listen","env","PORT"],"mappings":";;;;sBAA4B;2BACF;oEACE;yBACmB;wBAChB;kCACE;sBAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACrB,0CAA0C;AAC1C,eAAeA;IACb,MAAMC,MAAM,MAAMC,iBAAW,CAACC,MAAM,CAAyBC,oBAAS;IAEtE,4CAA4C;IAC5CH,IAAII,eAAe,CAACC,IAAAA,UAAI,EAACC,WAAW,MAAM,YAAY;QACpDC,QAAQ;IACV;IACA,iCAAiC;IACjC,oCAAoC;IACpC,MAAMC,SAAS,IAAIC,wBAAe,GAC/BC,QAAQ,CAAC,UACTC,cAAc,CAAC,8BACfC,UAAU,CAAC,OACXC,aAAa,GAAG,6BAA6B;KAC7CC,KAAK;IACR,MAAMC,kBAAkB,IAAMC,sBAAa,CAACC,cAAc,CAACjB,KAAKQ;IAChEQ,sBAAa,CAACE,KAAK,CAAC,OAAOlB,KAAKe;IAEhCf,IAAImB,GAAG,CAACC,YAAWC,IAAI,CAAC;QAAEC,OAAO;IAAO;IACxCtB,IAAImB,GAAG,CAACC,YAAWG,UAAU,CAAC;QAAEC,UAAU;QAAMF,OAAO;IAAO;IAC9DtB,IAAImB,GAAG,CAACM,kCAAgB;IACxBzB,IAAI0B,UAAU,CAAC;QACbC,QAAQ;QACRC,SAAS;QACTC,aAAa;IACf;IACA7B,IAAI8B,cAAc,CAChB,IAAIC,sBAAc,CAAC;QACjBC,WAAW;QACXC,kBAAkB;YAChBC,0BAA0B;QAC5B;IACF;QAGeC;IAAjB,MAAMnC,IAAIoC,MAAM,CAACD,CAAAA,oBAAAA,QAAQE,GAAG,CAACC,IAAI,cAAhBH,+BAAAA,oBAAoB;AACvC;AAEApC"}