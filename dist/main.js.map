{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport * as bodyParser from 'body-parser';\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\nimport { ValidationPipe } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { join } from 'path';\n\n// import dataSource from './data-source';\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n\n  // Configure static file serving for uploads\n  app.useStaticAssets(join(__dirname, '..', 'uploads'), {\n    prefix: '/uploads',\n  });\n  // await dataSource.initialize();\n  // await dataSource.runMigrations();\n  const config = new DocumentBuilder()\n    .setTitle('rabbit')\n    .setDescription('The rabbit API description')\n    .setVersion('1.0')\n    .addBearerAuth() // Add Bearer Auth to Swagger\n    .build();\n  const documentFactory = () => SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, documentFactory);\n  app.use(bodyParser.json({ limit: '50mb' }));\n  app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\n  app.use(LoggerMiddleware);\n  app.enableCors({\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    credentials: false,\n  });\n  app.useGlobalPipes(\n    new ValidationPipe({\n      transform: true,\n      transformOptions: {\n        enableImplicitConversion: true, // <- This line here\n      },\n    }),\n  );\n\n  await app.listen(process.env.PORT ?? 3000);\n}\n\nbootstrap();\n"],"names":["bootstrap","app","NestFactory","create","AppModule","useStaticAssets","join","__dirname","prefix","config","DocumentBuilder","setTitle","setDescription","setVersion","addBearerAuth","build","documentFactory","SwaggerModule","createDocument","setup","use","bodyParser","json","limit","urlencoded","extended","LoggerMiddleware","enableCors","origin","methods","credentials","useGlobalPipes","ValidationPipe","transform","transformOptions","enableImplicitConversion","process","listen","env","PORT"],"mappings":";;;;sBAA4B;2BACF;oEACE;yBACmB;wBAChB;kCACE;sBAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAErB,0CAA0C;AAC1C,eAAeA;IACb,MAAMC,MAAM,MAAMC,iBAAW,CAACC,MAAM,CAAyBC,oBAAS;IAEtE,4CAA4C;IAC5CH,IAAII,eAAe,CAACC,IAAAA,UAAI,EAACC,WAAW,MAAM,YAAY;QACpDC,QAAQ;IACV;IACA,iCAAiC;IACjC,oCAAoC;IACpC,MAAMC,SAAS,IAAIC,wBAAe,GAC/BC,QAAQ,CAAC,UACTC,cAAc,CAAC,8BACfC,UAAU,CAAC,OACXC,aAAa,GAAG,6BAA6B;KAC7CC,KAAK;IACR,MAAMC,kBAAkB,IAAMC,sBAAa,CAACC,cAAc,CAACjB,KAAKQ;IAChEQ,sBAAa,CAACE,KAAK,CAAC,OAAOlB,KAAKe;IAChCf,IAAImB,GAAG,CAACC,YAAWC,IAAI,CAAC;QAAEC,OAAO;IAAO;IACxCtB,IAAImB,GAAG,CAACC,YAAWG,UAAU,CAAC;QAAEC,UAAU;QAAMF,OAAO;IAAO;IAC9DtB,IAAImB,GAAG,CAACM,kCAAgB;IACxBzB,IAAI0B,UAAU,CAAC;QACbC,QAAQ;QACRC,SAAS;QACTC,aAAa;IACf;IACA7B,IAAI8B,cAAc,CAChB,IAAIC,sBAAc,CAAC;QACjBC,WAAW;QACXC,kBAAkB;YAChBC,0BAA0B;QAC5B;IACF;QAGeC;IAAjB,MAAMnC,IAAIoC,MAAM,CAACD,CAAAA,oBAAAA,QAAQE,GAAG,CAACC,IAAI,cAAhBH,+BAAAA,oBAAoB;AACvC;AAEApC"}