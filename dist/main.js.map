{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport * as bodyParser from 'body-parser';\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\r\nimport { NestExpressApplication } from '@nestjs/platform-express';\r\nimport { join } from 'path';\r\nimport { ValidationExceptionFilter } from './common/filters/validation-exception.filter';\r\nimport { NotFoundExceptionFilter } from './common/filters/not-found-exception.filter';\r\nimport { AllExceptionsFilter } from './common/filters/all-exceptions.filter';\r\nimport { LoggerService } from './common/utils/logger.service';\r\n\r\n// import dataSource from './data-source';\r\nconst logger = new LoggerService();\r\n\r\n// Global error handlers for uncaught exceptions and unhandled promise rejections\r\nprocess.on('uncaughtException', (error: Error) => {\r\n  logger.logError(error, 'UNCAUGHT_EXCEPTION', {\r\n    type: 'uncaughtException',\r\n    timestamp: new Date().toISOString(),\r\n    pid: process.pid,\r\n  });\r\n  console.error('Uncaught Exception:', error);\r\n  process.exit(1);\r\n});\r\n\r\nprocess.on('unhandledRejection', (reason: any, promise: Promise<any>) => {\r\n  const error = reason instanceof Error ? reason : new Error(String(reason));\r\n  logger.logError(error, 'UNHANDLED_REJECTION', {\r\n    type: 'unhandledRejection',\r\n    timestamp: new Date().toISOString(),\r\n    pid: process.pid,\r\n    promise: promise.toString(),\r\n  });\r\n  console.error('Unhandled Rejection:', reason);\r\n  process.exit(1);\r\n});\r\n\r\nprocess.on('SIGTERM', () => {\r\n  logger.info('SIGTERM received, shutting down gracefully', 'PROCESS');\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n  logger.info('SIGINT received, shutting down gracefully', 'PROCESS');\r\n  process.exit(0);\r\n});\r\n\r\n(async () => {\r\n  try {\r\n    logger.info('Starting application bootstrap...', 'Bootstrap');\r\n\r\n    // Optimize for production environment\r\n    const isProduction = process.env.NODE_ENV === 'production';\r\n\r\n    const app = await NestFactory.create<NestExpressApplication>(AppModule, {\r\n      // Reduce memory usage\r\n      logger: isProduction\r\n        ? ['error', 'warn']\r\n        : ['log', 'error', 'warn', 'debug'],\r\n    });\r\n\r\n    logger.info('Application created successfully', 'Bootstrap');\r\n\r\n    // Configure static file serving for uploads\r\n    app.useStaticAssets(join(__dirname, '..', 'uploads'), {\r\n      prefix: '/uploads',\r\n    });\r\n\r\n    // await dataSource.initialize();\r\n    // await dataSource.runMigrations();\r\n\r\n    // Only enable Swagger in development\r\n    if (!isProduction) {\r\n      const config = new DocumentBuilder()\r\n        .setTitle('rabbit')\r\n        .setDescription('The rabbit API description')\r\n        .setVersion('1.0')\r\n        .addBearerAuth() // Add Bearer Auth to Swagger\r\n        .build();\r\n      const documentFactory = () => SwaggerModule.createDocument(app, config);\r\n      SwaggerModule.setup('api', app, documentFactory);\r\n    }\r\n\r\n    // Reduce body parser limits to save memory\r\n    const bodyLimit = isProduction ? '10mb' : '50mb';\r\n    app.use(bodyParser.json({ limit: bodyLimit }));\r\n    app.use(bodyParser.urlencoded({ extended: true, limit: bodyLimit }));\r\n\r\n    app.use(LoggerMiddleware);\r\n    app.enableCors({\r\n      origin: '*',\r\n      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n      credentials: false,\r\n    });\r\n    app.useGlobalPipes(\r\n      new ValidationPipe({\r\n        transform: true,\r\n        transformOptions: {\r\n          enableImplicitConversion: true, // <- This line here\r\n        },\r\n        whitelist: true,\r\n        forbidNonWhitelisted: true,\r\n      }),\r\n    );\r\n\r\n    // Apply global exception filters\r\n    app.useGlobalFilters(\r\n      new AllExceptionsFilter(new LoggerService()),\r\n      new ValidationExceptionFilter(),\r\n      new NotFoundExceptionFilter(),\r\n    );\r\n\r\n    logger.info('Starting server...', 'Bootstrap');\r\n    await app.listen(process.env.PORT ?? 3000, '0.0.0.0');\r\n    logger.info(\r\n      `Application is running on: http://0.0.0.0:${process.env.PORT ?? 3000}`,\r\n      'Bootstrap',\r\n    );\r\n  } catch (error) {\r\n    logger.logError(error, 'Bootstrap');\r\n    process.exit(1);\r\n  }\r\n})();\r\n"],"names":["logger","LoggerService","process","on","error","logError","type","timestamp","Date","toISOString","pid","console","exit","reason","promise","Error","String","toString","info","isProduction","env","NODE_ENV","app","NestFactory","create","AppModule","useStaticAssets","join","__dirname","prefix","config","DocumentBuilder","setTitle","setDescription","setVersion","addBearerAuth","build","documentFactory","SwaggerModule","createDocument","setup","bodyLimit","use","bodyParser","json","limit","urlencoded","extended","LoggerMiddleware","enableCors","origin","methods","credentials","useGlobalPipes","ValidationPipe","transform","transformOptions","enableImplicitConversion","whitelist","forbidNonWhitelisted","useGlobalFilters","AllExceptionsFilter","ValidationExceptionFilter","NotFoundExceptionFilter","listen","PORT"],"mappings":";;;;sBAA4B;2BACF;oEACE;yBACmB;wBAChB;kCACE;sBAEZ;2CACqB;yCACF;qCACJ;+BACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE9B,0CAA0C;AAC1C,MAAMA,SAAS,IAAIC,4BAAa;AAEhC,iFAAiF;AACjFC,QAAQC,EAAE,CAAC,qBAAqB,CAACC;IAC/BJ,OAAOK,QAAQ,CAACD,OAAO,sBAAsB;QAC3CE,MAAM;QACNC,WAAW,IAAIC,OAAOC,WAAW;QACjCC,KAAKR,QAAQQ,GAAG;IAClB;IACAC,QAAQP,KAAK,CAAC,uBAAuBA;IACrCF,QAAQU,IAAI,CAAC;AACf;AAEAV,QAAQC,EAAE,CAAC,sBAAsB,CAACU,QAAaC;IAC7C,MAAMV,QAAQS,kBAAkBE,QAAQF,SAAS,IAAIE,MAAMC,OAAOH;IAClEb,OAAOK,QAAQ,CAACD,OAAO,uBAAuB;QAC5CE,MAAM;QACNC,WAAW,IAAIC,OAAOC,WAAW;QACjCC,KAAKR,QAAQQ,GAAG;QAChBI,SAASA,QAAQG,QAAQ;IAC3B;IACAN,QAAQP,KAAK,CAAC,wBAAwBS;IACtCX,QAAQU,IAAI,CAAC;AACf;AAEAV,QAAQC,EAAE,CAAC,WAAW;IACpBH,OAAOkB,IAAI,CAAC,8CAA8C;IAC1DhB,QAAQU,IAAI,CAAC;AACf;AAEAV,QAAQC,EAAE,CAAC,UAAU;IACnBH,OAAOkB,IAAI,CAAC,6CAA6C;IACzDhB,QAAQU,IAAI,CAAC;AACf;AAEC,CAAA;IACC,IAAI;QACFZ,OAAOkB,IAAI,CAAC,qCAAqC;QAEjD,sCAAsC;QACtC,MAAMC,eAAejB,QAAQkB,GAAG,CAACC,QAAQ,KAAK;QAE9C,MAAMC,MAAM,MAAMC,iBAAW,CAACC,MAAM,CAAyBC,oBAAS,EAAE;YACtE,sBAAsB;YACtBzB,QAAQmB,eACJ;gBAAC;gBAAS;aAAO,GACjB;gBAAC;gBAAO;gBAAS;gBAAQ;aAAQ;QACvC;QAEAnB,OAAOkB,IAAI,CAAC,oCAAoC;QAEhD,4CAA4C;QAC5CI,IAAII,eAAe,CAACC,IAAAA,UAAI,EAACC,WAAW,MAAM,YAAY;YACpDC,QAAQ;QACV;QAEA,iCAAiC;QACjC,oCAAoC;QAEpC,qCAAqC;QACrC,IAAI,CAACV,cAAc;YACjB,MAAMW,SAAS,IAAIC,wBAAe,GAC/BC,QAAQ,CAAC,UACTC,cAAc,CAAC,8BACfC,UAAU,CAAC,OACXC,aAAa,GAAG,6BAA6B;aAC7CC,KAAK;YACR,MAAMC,kBAAkB,IAAMC,sBAAa,CAACC,cAAc,CAACjB,KAAKQ;YAChEQ,sBAAa,CAACE,KAAK,CAAC,OAAOlB,KAAKe;QAClC;QAEA,2CAA2C;QAC3C,MAAMI,YAAYtB,eAAe,SAAS;QAC1CG,IAAIoB,GAAG,CAACC,YAAWC,IAAI,CAAC;YAAEC,OAAOJ;QAAU;QAC3CnB,IAAIoB,GAAG,CAACC,YAAWG,UAAU,CAAC;YAAEC,UAAU;YAAMF,OAAOJ;QAAU;QAEjEnB,IAAIoB,GAAG,CAACM,kCAAgB;QACxB1B,IAAI2B,UAAU,CAAC;YACbC,QAAQ;YACRC,SAAS;YACTC,aAAa;QACf;QACA9B,IAAI+B,cAAc,CAChB,IAAIC,sBAAc,CAAC;YACjBC,WAAW;YACXC,kBAAkB;gBAChBC,0BAA0B;YAC5B;YACAC,WAAW;YACXC,sBAAsB;QACxB;QAGF,iCAAiC;QACjCrC,IAAIsC,gBAAgB,CAClB,IAAIC,wCAAmB,CAAC,IAAI5D,4BAAa,KACzC,IAAI6D,oDAAyB,IAC7B,IAAIC,gDAAuB;QAG7B/D,OAAOkB,IAAI,CAAC,sBAAsB;YACjBhB;QAAjB,MAAMoB,IAAI0C,MAAM,CAAC9D,CAAAA,oBAAAA,QAAQkB,GAAG,CAAC6C,IAAI,cAAhB/D,+BAAAA,oBAAoB,MAAM;YAEIA;QAD/CF,OAAOkB,IAAI,CACT,CAAC,0CAA0C,EAAEhB,CAAAA,qBAAAA,QAAQkB,GAAG,CAAC6C,IAAI,cAAhB/D,gCAAAA,qBAAoB,MAAM,EACvE;IAEJ,EAAE,OAAOE,OAAO;QACdJ,OAAOK,QAAQ,CAACD,OAAO;QACvBF,QAAQU,IAAI,CAAC;IACf;AACF,CAAA"}