{"version":3,"sources":["../../../src/common/utils/category-api-features.ts"],"sourcesContent":["import { ObjectLiteral, SelectQueryBuilder, EntityMetadata } from 'typeorm';\r\nimport { ParsedQs } from 'qs';\r\n\r\nexport class CategoryApiFeatures<T extends ObjectLiteral> {\r\n  /**\r\n   * Returns the current pagination information\r\n   * @returns Object containing page and limit\r\n   */\r\n  getPaginationInfo(): { page: number; limit: number } {\r\n    return {\r\n      page: this.page,\r\n      limit: this.limit,\r\n    };\r\n  }\r\n\r\n  private page: number;\r\n  private limit: number;\r\n  private skip: number;\r\n  private entityMetadata: EntityMetadata;\r\n\r\n  constructor(\r\n    private queryBuilder: SelectQueryBuilder<T>,\r\n    private queryString: ParsedQs,\r\n    entityMetadata: EntityMetadata,\r\n  ) {\r\n    this.page = 1;\r\n    this.limit = 10;\r\n    this.skip = 0;\r\n    this.entityMetadata = entityMetadata;\r\n  }\r\n\r\n  filter(): this {\r\n    // Search query for category name and description\r\n    if (this.queryString.q) {\r\n      const q = (this.queryString.q as string).toLowerCase();\r\n      const words = q.split(/\\s+/).filter((word) => word.length >= 1);\r\n      if (words.length > 0) {\r\n        const orConditions: string[] = [];\r\n        const params: Record<string, string | number> = {};\r\n        words.forEach((word, idx) => {\r\n          const param = `qword${idx}`;\r\n          orConditions.push(`LOWER(category.name) LIKE :${param}`);\r\n          orConditions.push(`LOWER(subCategory.name) LIKE :${param}`);\r\n\r\n          // Only add ID comparison if the word is a valid number\r\n          const numericValue = Number(word);\r\n          if (!isNaN(numericValue) && Number.isInteger(numericValue)) {\r\n            const idParam = `id${idx}`;\r\n            orConditions.push(`category.id = :${idParam}`);\r\n            params[idParam] = numericValue.toString();\r\n          }\r\n\r\n          params[param] = `%${word}%`;\r\n        });\r\n        if (orConditions.length > 0) {\r\n          this.queryBuilder.andWhere(`(${orConditions.join(' OR ')})`, params);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Filter by category name\r\n    if (this.queryString.name) {\r\n      const categoryName = (this.queryString.name as string).toLowerCase();\r\n      this.queryBuilder.andWhere('LOWER(category.name) LIKE :categoryName', {\r\n        categoryName: `%${categoryName}%`,\r\n      });\r\n    }\r\n\r\n    // Filter by category ID\r\n    if (this.queryString.id) {\r\n      const categoryId = Number(this.queryString.id);\r\n      if (!isNaN(categoryId)) {\r\n        this.queryBuilder.andWhere('category.id = :categoryId', { categoryId });\r\n      }\r\n    }\r\n\r\n    // Filter by active status\r\n    if (this.queryString.isActive !== undefined) {\r\n      const isActive = this.queryString.isActive === 'true';\r\n      this.queryBuilder.andWhere('category.isActive = :isActive', { isActive });\r\n    }\r\n\r\n    // Filter by having subcategories\r\n    if (this.queryString.hasSubCategories !== undefined) {\r\n      const hasSubCategories = this.queryString.hasSubCategories === 'true';\r\n      if (hasSubCategories) {\r\n        this.queryBuilder.andWhere('subCategory.id IS NOT NULL');\r\n      } else {\r\n        this.queryBuilder.andWhere('subCategory.id IS NULL');\r\n      }\r\n    }\r\n\r\n    // Handle other filters\r\n    const queryObj = { ...this.queryString };\r\n    const excludedFields = [\r\n      'page',\r\n      'sort',\r\n      'limit',\r\n      'fields',\r\n      'q',\r\n      'name',\r\n      'id',\r\n      'isActive',\r\n      'hasSubCategories',\r\n    ];\r\n    excludedFields.forEach((el) => delete queryObj[el]);\r\n\r\n    let queryStr = JSON.stringify(queryObj);\r\n    queryStr = queryStr.replace(\r\n      /\\b(gte|gt|lte|lt|ne)\\b/g,\r\n      (match) => `$${match}`,\r\n    );\r\n    const parsedQuery = JSON.parse(queryStr) as Record<string, any>;\r\n\r\n    Object.keys(parsedQuery).forEach((key) => {\r\n      const column = this.entityMetadata.columns.find(\r\n        (col) => col.propertyName === key,\r\n      );\r\n      if (!column) return;\r\n      const value = parsedQuery[key] as Record<string, any>;\r\n      if (typeof value === 'object' && value !== null) {\r\n        Object.keys(value).forEach((operator) => {\r\n          const operatorValue = value[operator] as Record<string, any>;\r\n          switch (operator) {\r\n            case '$gte':\r\n              this.queryBuilder.andWhere(\r\n                `category.${column.propertyName} >= :${key}Gte`,\r\n                {\r\n                  [`${key}Gte`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$gt':\r\n              this.queryBuilder.andWhere(\r\n                `category.${column.propertyName} > :${key}Gt`,\r\n                {\r\n                  [`${key}Gt`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$lte':\r\n              this.queryBuilder.andWhere(\r\n                `category.${column.propertyName} <= :${key}Lte`,\r\n                {\r\n                  [`${key}Lte`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$lt':\r\n              this.queryBuilder.andWhere(\r\n                `category.${column.propertyName} < :${key}Lt`,\r\n                {\r\n                  [`${key}Lt`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$ne':\r\n              this.queryBuilder.andWhere(\r\n                `category.${column.propertyName} != :${key}Ne`,\r\n                {\r\n                  [`${key}Ne`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n          }\r\n        });\r\n      } else {\r\n        this.queryBuilder.andWhere(\r\n          `category.${column.propertyName} = :${key}`,\r\n          {\r\n            [key]: value,\r\n          },\r\n        );\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  sort(): this {\r\n    if (this.queryString.sort) {\r\n      const sortBy = (this.queryString.sort as string)\r\n        .split(',')\r\n        .map((field) => {\r\n          const direction = field.startsWith('-') ? 'DESC' : 'ASC';\r\n          const actualField = field.startsWith('-')\r\n            ? field.substring(1)\r\n            : field;\r\n          const column = this.entityMetadata.columns.find(\r\n            (col) => col.propertyName === actualField,\r\n          );\r\n          if (column) {\r\n            return `category.${column.propertyName} ${direction}`;\r\n          }\r\n          return null;\r\n        })\r\n        .filter(Boolean)\r\n        .join(', ');\r\n\r\n      if (sortBy) {\r\n        this.queryBuilder.orderBy(sortBy);\r\n      }\r\n    } else {\r\n      // Default sort by createdAt\r\n      const createdAtCol = this.entityMetadata.columns.find(\r\n        (col) => col.propertyName === 'createdAt',\r\n      );\r\n      if (createdAtCol) {\r\n        this.queryBuilder.orderBy('category.createdAt', 'DESC');\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  limitFields(): this {\r\n    if (this.queryString.fields) {\r\n      const fields = (this.queryString.fields as string)\r\n        .split(',')\r\n        .map((field) => {\r\n          const column = this.entityMetadata.columns.find(\r\n            (col) => col.propertyName === field,\r\n          );\r\n          return column ? `category.${column.propertyName}` : null;\r\n        })\r\n        .filter(Boolean);\r\n\r\n      // Always include id and basic relations\r\n      if (!fields.includes('category.id')) {\r\n        fields.unshift('category.id');\r\n      }\r\n\r\n      // Add subcategory fields if we have them\r\n      fields.push(\r\n        'subCategory.id',\r\n        'subCategory.name',\r\n        'subCategory.icon',\r\n        'subCategory.isActive',\r\n      );\r\n\r\n      this.queryBuilder.select(fields as string[]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  paginate(): this {\r\n    this.page = Number(this.queryString.page) || 1;\r\n    this.limit = Number(this.queryString.limit) || 10;\r\n    this.skip = (this.page - 1) * this.limit;\r\n\r\n    this.queryBuilder.skip(this.skip).take(this.limit);\r\n\r\n    return this;\r\n  }\r\n\r\n  async getManyAndCount(): Promise<[T[], number]> {\r\n    return await this.queryBuilder.getManyAndCount();\r\n  }\r\n\r\n  async getMany(): Promise<T[]> {\r\n    return await this.queryBuilder.getMany();\r\n  }\r\n}\r\n"],"names":["CategoryApiFeatures","getPaginationInfo","page","limit","filter","queryString","q","toLowerCase","words","split","word","length","orConditions","params","forEach","idx","param","push","numericValue","Number","isNaN","isInteger","idParam","toString","queryBuilder","andWhere","join","name","categoryName","id","categoryId","isActive","undefined","hasSubCategories","queryObj","excludedFields","el","queryStr","JSON","stringify","replace","match","parsedQuery","parse","Object","keys","key","column","entityMetadata","columns","find","col","propertyName","value","operator","operatorValue","sort","sortBy","map","field","direction","startsWith","actualField","substring","Boolean","orderBy","createdAtCol","limitFields","fields","includes","unshift","select","paginate","skip","take","getManyAndCount","getMany","constructor"],"mappings":"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"}