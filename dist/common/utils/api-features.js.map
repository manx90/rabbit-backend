{"version":3,"sources":["../../../src/common/utils/api-features.ts"],"sourcesContent":["import { ObjectLiteral, SelectQueryBuilder, EntityMetadata } from 'typeorm';\r\nimport { ParsedQs } from 'qs';\r\n\r\nexport class ApiFeatures<T extends ObjectLiteral> {\r\n  /**\r\n   * Returns the current pagination information\r\n   * @returns Object containing page and limit\r\n   */\r\n  getPaginationInfo(): { page: number; limit: number } {\r\n    return {\r\n      page: this.page,\r\n      limit: this.limit,\r\n    };\r\n  }\r\n  private page: number;\r\n  private limit: number;\r\n  private skip: number;\r\n  private entityMetadata: EntityMetadata;\r\n\r\n  constructor(\r\n    private queryBuilder: SelectQueryBuilder<T>,\r\n    private queryString: ParsedQs,\r\n    entityMetadata: EntityMetadata,\r\n  ) {\r\n    this.page = 1;\r\n    this.limit = 10;\r\n    this.skip = 0;\r\n    this.entityMetadata = entityMetadata;\r\n  }\r\n\r\n  filter(): this {\r\n    if (this.queryString.q) {\r\n      const q = (this.queryString.q as string).toLowerCase();\r\n      const words = q.split(/\\s+/).filter((word) => word.length >= 3);\r\n      if (words.length > 0) {\r\n        const orConditions: string[] = [];\r\n        const params: Record<string, string> = {};\r\n        words.forEach((word, idx) => {\r\n          const param = `qword${idx}`;\r\n          orConditions.push(`LOWER(product.name) LIKE :${param}`);\r\n          orConditions.push(`LOWER(category.name) LIKE :${param}`);\r\n          orConditions.push(`LOWER(subCategory.name) LIKE :${param}`);\r\n          orConditions.push(`LOWER(product.description) LIKE :${param}`);\r\n          params[param] = `%${word}%`;\r\n        });\r\n        if (orConditions.length > 0) {\r\n          this.queryBuilder.andWhere(`(${orConditions.join(' OR ')})`, params);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Special query for category name or id\r\n    if (this.queryString.category) {\r\n      const categoryValue = this.queryString.category as string;\r\n      if (!isNaN(Number(categoryValue))) {\r\n        // If category is a number, filter by categoryId\r\n        this.queryBuilder.andWhere('product.categoryId = :categoryId', {\r\n          categoryId: Number(categoryValue),\r\n        });\r\n      } else {\r\n        // Otherwise, filter by name\r\n        const category = categoryValue.toLowerCase();\r\n        this.queryBuilder.andWhere('LOWER(category.name) = :category', {\r\n          category,\r\n        });\r\n      }\r\n    }\r\n    if (this.queryString.subCategory) {\r\n      const subCategoryValue = this.queryString.subCategory as string;\r\n      if (!isNaN(Number(subCategoryValue))) {\r\n        this.queryBuilder.andWhere('product.subCategoryId = :subCategoryId', {\r\n          subCategoryId: Number(subCategoryValue),\r\n        });\r\n      } else {\r\n        const subCategory = subCategoryValue.toLowerCase();\r\n        this.queryBuilder.andWhere('LOWER(subCategory.name) = :subCategory', {\r\n          subCategory,\r\n        });\r\n      }\r\n    }\r\n    // Fetch products that belong to a specific category and a specific subcategory under that category\r\n    if (\r\n      this.queryString.category &&\r\n      this.queryString.subcategory &&\r\n      !isNaN(Number(this.queryString.category)) &&\r\n      !isNaN(Number(this.queryString.subcategory))\r\n    ) {\r\n      this.queryBuilder.andWhere(\r\n        'product.categoryId = :categoryId AND product.subcategoryId = :subcategoryId AND subcategory.categoryId = :categoryId',\r\n        {\r\n          categoryId: Number(this.queryString.category),\r\n          subcategoryId: Number(this.queryString.subcategory),\r\n        },\r\n      );\r\n    }\r\n    if (this.queryString.id) {\r\n      const productId = Number(this.queryString.id);\r\n      if (!isNaN(productId)) {\r\n        this.queryBuilder.andWhere('product.id = :productId', { productId });\r\n      }\r\n    }\r\n    if (this.queryString.productName) {\r\n      const productName = (\r\n        this.queryString.productName as string\r\n      ).toLowerCase();\r\n      this.queryBuilder.andWhere('LOWER(product.name) LIKE :productName', {\r\n        productName: `%${productName}%`,\r\n      });\r\n    }\r\n\r\n    const queryObj = { ...this.queryString };\r\n    const excludedFields = [\r\n      'page',\r\n      'sort',\r\n      'limit',\r\n      'fields',\r\n      'q',\r\n      'category',\r\n      'subCategory',\r\n      'categoryId',\r\n      'subCategoryId',\r\n      'id',\r\n    ];\r\n    excludedFields.forEach((el) => delete queryObj[el]);\r\n\r\n    let queryStr = JSON.stringify(queryObj);\r\n    queryStr = queryStr.replace(\r\n      /\\b(gte|gt|lte|lt|ne)\\b/g,\r\n      (match) => `$${match}`,\r\n    );\r\n    const parsedQuery = JSON.parse(queryStr) as Record<string, any>;\r\n\r\n    Object.keys(parsedQuery).forEach((key) => {\r\n      const column = this.entityMetadata.columns.find(\r\n        (col) => col.propertyName === key,\r\n      );\r\n      if (!column) return;\r\n      const value = parsedQuery[key] as Record<string, any>;\r\n      if (typeof value === 'object' && value !== null) {\r\n        Object.keys(value).forEach((operator) => {\r\n          const operatorValue = value[operator] as Record<string, any>;\r\n          switch (operator) {\r\n            case '$gte':\r\n              this.queryBuilder.andWhere(\r\n                `product.${column.propertyName} >= :${key}Gte`,\r\n                {\r\n                  [`${key}Gte`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$gt':\r\n              this.queryBuilder.andWhere(\r\n                `product.${column.propertyName} > :${key}Gt`,\r\n                {\r\n                  [`${key}Gt`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$lte':\r\n              this.queryBuilder.andWhere(\r\n                `product.${column.propertyName} <= :${key}Lte`,\r\n                {\r\n                  [`${key}Lte`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$lt':\r\n              this.queryBuilder.andWhere(\r\n                `product.${column.propertyName} < :${key}Lt`,\r\n                {\r\n                  [`${key}Lt`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n            case '$ne':\r\n              this.queryBuilder.andWhere(\r\n                `product.${column.propertyName} != :${key}Ne`,\r\n                {\r\n                  [`${key}Ne`]: operatorValue,\r\n                },\r\n              );\r\n              break;\r\n          }\r\n        });\r\n      } else {\r\n        this.queryBuilder.andWhere(`product.${column.propertyName} = :${key}`, {\r\n          [key]: value,\r\n        });\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  sort(): this {\r\n    if (this.queryString.sort) {\r\n      const sortBy = (this.queryString.sort as string)\r\n        .split(',')\r\n        .map((field) => {\r\n          const direction = field.startsWith('-') ? 'DESC' : 'ASC';\r\n          const actualField = field.startsWith('-')\r\n            ? field.substring(1)\r\n            : field;\r\n          const column = this.entityMetadata.columns.find(\r\n            (col) => col.propertyName === actualField,\r\n          );\r\n          if (column) {\r\n            return `${column.propertyPath} ${direction}`;\r\n          }\r\n          return null;\r\n        })\r\n        .filter(Boolean)\r\n        .join(', ');\r\n\r\n      if (sortBy) {\r\n        this.queryBuilder.orderBy(sortBy);\r\n      }\r\n    } else {\r\n      const createdAtCol = this.entityMetadata.columns.find(\r\n        (col) => col.propertyName === 'createdAt',\r\n      );\r\n      if (createdAtCol) {\r\n        this.queryBuilder.orderBy('product.createdAt', 'DESC');\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  limitFields(): this {\r\n    if (this.queryString.fields) {\r\n      const fields = (this.queryString.fields as string)\r\n        .split(',')\r\n        .map((field) => {\r\n          const column = this.entityMetadata.columns.find(\r\n            (col) => col.propertyName === field,\r\n          );\r\n          return column ? column.propertyPath : null;\r\n        })\r\n        .filter(Boolean);\r\n      if (!fields.includes(`${this.entityMetadata.name}.id`)) {\r\n        fields.unshift(`${this.entityMetadata.name}.id`);\r\n      }\r\n\r\n      this.queryBuilder.select(fields as string[]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  paginate(): this {\r\n    this.page = Number(this.queryString.page) || 1;\r\n    this.limit = Number(this.queryString.limit) || 10;\r\n    this.skip = (this.page - 1) * this.limit;\r\n\r\n    this.queryBuilder.skip(this.skip).take(this.limit);\r\n\r\n    return this;\r\n  }\r\n\r\n  async getManyAndCount(): Promise<[T[], number]> {\r\n    return await this.queryBuilder.getManyAndCount();\r\n  }\r\n\r\n  async getMany(): Promise<T[]> {\r\n    return await this.queryBuilder.getMany();\r\n  }\r\n}\r\n"],"names":["ApiFeatures","getPaginationInfo","page","limit","filter","queryString","q","toLowerCase","words","split","word","length","orConditions","params","forEach","idx","param","push","queryBuilder","andWhere","join","category","categoryValue","isNaN","Number","categoryId","subCategory","subCategoryValue","subCategoryId","subcategory","subcategoryId","id","productId","productName","queryObj","excludedFields","el","queryStr","JSON","stringify","replace","match","parsedQuery","parse","Object","keys","key","column","entityMetadata","columns","find","col","propertyName","value","operator","operatorValue","sort","sortBy","map","field","direction","startsWith","actualField","substring","propertyPath","Boolean","orderBy","createdAtCol","limitFields","fields","includes","name","unshift","select","paginate","skip","take","getManyAndCount","getMany","constructor"],"mappings":"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"}