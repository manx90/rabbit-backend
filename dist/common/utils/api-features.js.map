{"version":3,"sources":["../../../src/common/utils/api-features.ts"],"sourcesContent":["import { ObjectLiteral, SelectQueryBuilder, EntityMetadata } from 'typeorm';\r\nimport { ParsedQs } from 'qs';\r\n\r\nexport class ApiFeatures<T extends ObjectLiteral> {\r\n  /**\r\n   * Returns the current pagination information\r\n   * @returns Object containing page and limit\r\n   */\r\n  getPaginationInfo(): { page: number; limit: number } {\r\n    return {\r\n      page: this.page,\r\n      limit: this.limit,\r\n    };\r\n  }\r\n  private page: number;\r\n  private limit: number;\r\n  private skip: number;\r\n  private entityMetadata: EntityMetadata;\r\n\r\n  constructor(\r\n    private queryBuilder: SelectQueryBuilder<T>,\r\n    private queryString: ParsedQs,\r\n    entityMetadata: EntityMetadata,\r\n  ) {\r\n    this.page = 1;\r\n    this.limit = 10;\r\n    this.skip = 0;\r\n    this.entityMetadata = entityMetadata;\r\n  }\r\n\r\n  filter(): this {\r\n    // Dynamic search across all string fields\r\n    if (this.queryString.q) {\r\n      const q = (this.queryString.q as string).toLowerCase();\r\n      const words = q.split(/\\s+/).filter(word => word.length >= 3);\r\n      if (words.length > 0) {\r\n        const orConditions: string[] = [];\r\n        const params: Record<string, string> = {};\r\n        // Get all string columns from entity metadata\r\n        const stringColumns = this.entityMetadata.columns.filter(col =>\r\n          ['varchar', 'text', 'nvarchar', 'char', 'longtext', 'mediumtext', 'tinytext'].includes(col.type as string)\r\n        );\r\n        words.forEach((word, idx) => {\r\n          const param = `qword${idx}`;\r\n          stringColumns.forEach(col => {\r\n            orConditions.push(`LOWER(${col.propertyPath}) LIKE :${param}`);\r\n          });\r\n          params[param] = `%${word}%`;\r\n        });\r\n        if (orConditions.length > 0) {\r\n          this.queryBuilder.andWhere(`(${orConditions.join(' OR ')})`, params);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Special query for category name or id\r\n    if (this.queryString.category) {\r\n      const categoryValue = this.queryString.category as string;\r\n      if (!isNaN(Number(categoryValue))) {\r\n        // If category is a number, filter by categoryId\r\n        this.queryBuilder.andWhere('product.categoryId = :categoryId', { categoryId: Number(categoryValue) });\r\n      } else {\r\n        // Otherwise, filter by name\r\n        const category = categoryValue.toLowerCase();\r\n        this.queryBuilder.andWhere('LOWER(category.name) = :category', { category });\r\n      }\r\n    }\r\n    // Special query for subCategory name or id\r\n    if (this.queryString.subCategory) {\r\n      const subCategoryValue = this.queryString.subCategory as string;\r\n      if (!isNaN(Number(subCategoryValue))) {\r\n        // If subCategory is a number, filter by subCategoryId\r\n        this.queryBuilder.andWhere('product.subCategoryId = :subCategoryId', { subCategoryId: Number(subCategoryValue) });\r\n      } else {\r\n        // Otherwise, filter by name\r\n        const subCategory = subCategoryValue.toLowerCase();\r\n        this.queryBuilder.andWhere('LOWER(subCategory.name) = :subCategory', { subCategory });\r\n      }\r\n    }\r\n    // Special query for category id\r\n    if (this.queryString.categoryId) {\r\n      const categoryId = Number(this.queryString.categoryId);\r\n      if (!isNaN(categoryId)) {\r\n        this.queryBuilder.andWhere('product.categoryId = :categoryId', { categoryId });\r\n      }\r\n    }\r\n    // Special query for subCategory id\r\n    if (this.queryString.subCategoryId) {\r\n      const subCategoryId = Number(this.queryString.subCategoryId);\r\n      if (!isNaN(subCategoryId)) {\r\n        this.queryBuilder.andWhere('product.subCategoryId = :subCategoryId', { subCategoryId });\r\n      }\r\n    }\r\n\r\n    const queryObj = { ...this.queryString };\r\n    const excludedFields = ['page', 'sort', 'limit', 'fields', 'q', 'category', 'subCategory'];\r\n    excludedFields.forEach((el) => delete queryObj[el]);\r\n\r\n    // Advanced filtering\r\n    let queryStr = JSON.stringify(queryObj);\r\n    queryStr = queryStr.replace(\r\n      /\\b(gte|gt|lte|lt|ne)\\b/g,\r\n      (match) => `$${match}`,\r\n    );\r\n    const parsedQuery = JSON.parse(queryStr) as Record<string, any>;\r\n\r\n    Object.keys(parsedQuery).forEach((key) => {\r\n      // Only allow filtering on valid entity columns\r\n      const column = this.entityMetadata.columns.find(col => col.propertyName === key);\r\n      if (!column) return;\r\n      const value = parsedQuery[key] as Record<string, any>;\r\n      if (typeof value === 'object' && value !== null) {\r\n        Object.keys(value).forEach((operator) => {\r\n          const operatorValue = value[operator] as Record<string, any>;\r\n          switch (operator) {\r\n            case '$gte':\r\n              this.queryBuilder.andWhere(`${column.propertyPath} >= :${key}Gte`, {\r\n                [`${key}Gte`]: operatorValue,\r\n              });\r\n              break;\r\n            case '$gt':\r\n              this.queryBuilder.andWhere(`${column.propertyPath} > :${key}Gt`, {\r\n                [`${key}Gt`]: operatorValue,\r\n              });\r\n              break;\r\n            case '$lte':\r\n              this.queryBuilder.andWhere(`${column.propertyPath} <= :${key}Lte`, {\r\n                [`${key}Lte`]: operatorValue,\r\n              });\r\n              break;\r\n            case '$lt':\r\n              this.queryBuilder.andWhere(`${column.propertyPath} < :${key}Lt`, {\r\n                [`${key}Lt`]: operatorValue,\r\n              });\r\n              break;\r\n            case '$ne':\r\n              this.queryBuilder.andWhere(`${column.propertyPath} != :${key}Ne`, {\r\n                [`${key}Ne`]: operatorValue,\r\n              });\r\n              break;\r\n          }\r\n        });\r\n      } else {\r\n        this.queryBuilder.andWhere(`${column.propertyPath} = :${key}`, { [key]: value });\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  sort(): this {\r\n    if (this.queryString.sort) {\r\n      const sortBy = (this.queryString.sort as string)\r\n        .split(',')\r\n        .map((field) => {\r\n          const direction = field.startsWith('-') ? 'DESC' : 'ASC';\r\n          const actualField = field.startsWith('-')\r\n            ? field.substring(1)\r\n            : field;\r\n          // Only allow sorting by valid entity columns\r\n          const column = this.entityMetadata.columns.find(col => col.propertyName === actualField);\r\n          if (column) {\r\n            return `${column.propertyPath} ${direction}`;\r\n          }\r\n          return null;\r\n        })\r\n        .filter(Boolean)\r\n        .join(', ');\r\n\r\n      if (sortBy) {\r\n        this.queryBuilder.orderBy(sortBy);\r\n      }\r\n    } else {\r\n      // Default sort by creation date if exists\r\n      const createdAtCol = this.entityMetadata.columns.find(col => col.propertyName === 'createdAt');\r\n      if (createdAtCol) {\r\n        this.queryBuilder.orderBy('product.createdAt', 'DESC');\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  limitFields(): this {\r\n    if (this.queryString.fields) {\r\n      const fields = (this.queryString.fields as string)\r\n        .split(',')\r\n        .map((field) => {\r\n          // Only allow selecting valid entity columns\r\n          const column = this.entityMetadata.columns.find(col => col.propertyName === field);\r\n          return column ? column.propertyPath : null;\r\n        })\r\n        .filter(Boolean);\r\n\r\n      // Always include id\r\n      if (!fields.includes(`${this.entityMetadata.name}.id`)) {\r\n        fields.unshift(`${this.entityMetadata.name}.id`);\r\n      }\r\n\r\n      this.queryBuilder.select(fields as string[]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  paginate(): this {\r\n    this.page = Number(this.queryString.page) || 1;\r\n    this.limit = Number(this.queryString.limit) || 10;\r\n    this.skip = (this.page - 1) * this.limit;\r\n\r\n    this.queryBuilder.skip(this.skip).take(this.limit);\r\n\r\n    return this;\r\n  }\r\n\r\n  async getManyAndCount(): Promise<[T[], number]> {\r\n    return await this.queryBuilder.getManyAndCount();\r\n  }\r\n\r\n  async getMany(): Promise<T[]> {\r\n    return await this.queryBuilder.getMany();\r\n  }\r\n}\r\n"],"names":["ApiFeatures","getPaginationInfo","page","limit","filter","queryString","q","toLowerCase","words","split","word","length","orConditions","params","stringColumns","entityMetadata","columns","col","includes","type","forEach","idx","param","push","propertyPath","queryBuilder","andWhere","join","category","categoryValue","isNaN","Number","categoryId","subCategory","subCategoryValue","subCategoryId","queryObj","excludedFields","el","queryStr","JSON","stringify","replace","match","parsedQuery","parse","Object","keys","key","column","find","propertyName","value","operator","operatorValue","sort","sortBy","map","field","direction","startsWith","actualField","substring","Boolean","orderBy","createdAtCol","limitFields","fields","name","unshift","select","paginate","skip","take","getManyAndCount","getMany","constructor"],"mappings":"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"}