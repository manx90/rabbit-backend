{"version":3,"sources":["../../../src/common/utils/logger.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n  private readonly logDir = path.join(process.cwd(), 'logs');\r\n  private readonly errorLogFile = path.join(this.logDir, 'error.log');\r\n  private readonly appLogFile = path.join(this.logDir, 'app.log');\r\n  private readonly debugLogFile = path.join(this.logDir, 'debug.log');\r\n\r\n  constructor() {\r\n    this.ensureLogDirectory();\r\n  }\r\n\r\n  private ensureLogDirectory(): void {\r\n    if (!fs.existsSync(this.logDir)) {\r\n      fs.mkdirSync(this.logDir, { recursive: true });\r\n    }\r\n  }\r\n\r\n  private formatLogMessage(\r\n    level: string,\r\n    message: string,\r\n    context?: string,\r\n    stack?: string,\r\n  ): string {\r\n    const timestamp = new Date().toISOString();\r\n    const contextStr = context ? ` [${context}]` : '';\r\n    const stackStr = stack ? `\\nStack: ${stack}` : '';\r\n    return `${timestamp} [${level}]${contextStr} ${message}${stackStr}\\n`;\r\n  }\r\n\r\n  private writeToFile(filePath: string, message: string): void {\r\n    try {\r\n      fs.appendFileSync(filePath, message);\r\n    } catch (error) {\r\n      console.error('Failed to write to log file:', error);\r\n    }\r\n  }\r\n\r\n  log(message: string, context?: string): void {\r\n    const formattedMessage = this.formatLogMessage('LOG', message, context);\r\n    console.log(message);\r\n    this.writeToFile(this.appLogFile, formattedMessage);\r\n  }\r\n\r\n  error(message: string, context?: string, stack?: string): void {\r\n    const formattedMessage = this.formatLogMessage(\r\n      'ERROR',\r\n      message,\r\n      context,\r\n      stack,\r\n    );\r\n    console.error(message);\r\n    this.writeToFile(this.errorLogFile, formattedMessage);\r\n  }\r\n\r\n  warn(message: string, context?: string): void {\r\n    const formattedMessage = this.formatLogMessage('WARN', message, context);\r\n    console.warn(message);\r\n    this.writeToFile(this.appLogFile, formattedMessage);\r\n  }\r\n\r\n  debug(message: string, context?: string): void {\r\n    const formattedMessage = this.formatLogMessage('DEBUG', message, context);\r\n    console.debug(message);\r\n    this.writeToFile(this.debugLogFile, formattedMessage);\r\n  }\r\n\r\n  info(message: string, context?: string): void {\r\n    const formattedMessage = this.formatLogMessage('INFO', message, context);\r\n    console.info(message);\r\n    this.writeToFile(this.appLogFile, formattedMessage);\r\n  }\r\n\r\n  // Method to log API requests and responses\r\n  logApiRequest(\r\n    method: string,\r\n    url: string,\r\n    query?: any,\r\n    body?: any,\r\n    context?: string,\r\n  ): void {\r\n    const message = `API Request: ${method} ${url}${query ? ` | Query: ${JSON.stringify(query)}` : ''}${body ? ` | Body: ${JSON.stringify(body)}` : ''}`;\r\n    this.info(message, context || 'API');\r\n  }\r\n\r\n  logApiResponse(\r\n    method: string,\r\n    url: string,\r\n    statusCode: number,\r\n    responseTime?: number,\r\n    context?: string,\r\n  ): void {\r\n    const message = `API Response: ${method} ${url} | Status: ${statusCode}${responseTime ? ` | Time: ${responseTime}ms` : ''}`;\r\n    this.info(message, context || 'API');\r\n  }\r\n\r\n  // Method to log database operations\r\n  logDatabaseOperation(\r\n    operation: string,\r\n    table: string,\r\n    details?: any,\r\n    context?: string,\r\n  ): void {\r\n    const message = `DB Operation: ${operation} on ${table}${details ? ` | Details: ${JSON.stringify(details)}` : ''}`;\r\n    this.debug(message, context || 'DATABASE');\r\n  }\r\n\r\n  // Method to log errors with full context\r\n  logError(error: Error, context?: string, additionalInfo?: any): void {\r\n    const message = `Error: ${error.message}${additionalInfo ? ` | Info: ${JSON.stringify(additionalInfo)}` : ''}`;\r\n    this.error(message, context, error.stack);\r\n  }\r\n\r\n  // Method to clean old log files (optional)\r\n  cleanOldLogs(daysToKeep: number = 7): void {\r\n    try {\r\n      const files = fs.readdirSync(this.logDir);\r\n      const cutoffDate = new Date();\r\n      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\r\n\r\n      files.forEach((file) => {\r\n        const filePath = path.join(this.logDir, file);\r\n        const stats = fs.statSync(filePath);\r\n\r\n        if (stats.mtime < cutoffDate) {\r\n          fs.unlinkSync(filePath);\r\n          this.info(`Deleted old log file: ${file}`, 'LOGGER');\r\n        }\r\n      });\r\n    } catch (error) {\r\n      this.error('Failed to clean old logs', 'LOGGER', error.stack);\r\n    }\r\n  }\r\n}\r\n"],"names":["LoggerService","ensureLogDirectory","fs","existsSync","logDir","mkdirSync","recursive","formatLogMessage","level","message","context","stack","timestamp","Date","toISOString","contextStr","stackStr","writeToFile","filePath","appendFileSync","error","console","log","formattedMessage","appLogFile","errorLogFile","warn","debug","debugLogFile","info","logApiRequest","method","url","query","body","JSON","stringify","logApiResponse","statusCode","responseTime","logDatabaseOperation","operation","table","details","logError","additionalInfo","cleanOldLogs","daysToKeep","files","readdirSync","cutoffDate","setDate","getDate","forEach","file","path","join","stats","statSync","mtime","unlinkSync","constructor","process","cwd"],"mappings":"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"}