{"version":3,"sources":["../../../src/common/filters/all-exceptions.filter.ts"],"sourcesContent":["import {\r\n  ArgumentsHost,\r\n  Catch,\r\n  ExceptionFilter,\r\n  HttpException,\r\n  HttpStatus,\r\n} from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\nimport { LoggerService } from '../utils/logger.service';\r\n\r\n@Catch()\r\nexport class AllExceptionsFilter implements ExceptionFilter {\r\n  constructor(private readonly logger: LoggerService = new LoggerService()) {}\r\n\r\n  catch(exception: unknown, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse<Response>();\r\n    const request = ctx.getRequest<Request>();\r\n\r\n    const isHttpException = exception instanceof HttpException;\r\n    const status = isHttpException\r\n      ? (exception as HttpException).getStatus()\r\n      : HttpStatus.INTERNAL_SERVER_ERROR;\r\n\r\n    const message = isHttpException\r\n      ? (exception as HttpException).message\r\n      : 'Internal server error';\r\n\r\n    const stack = exception instanceof Error ? exception.stack : undefined;\r\n\r\n    this.logger.logError(\r\n      new Error(message, {\r\n        cause: exception instanceof Error ? exception : undefined,\r\n      } as any),\r\n      'ALL_EXCEPTIONS',\r\n      {\r\n        method: request.method,\r\n        url: request.originalUrl,\r\n        status,\r\n      },\r\n    );\r\n\r\n    const errorBody = isHttpException\r\n      ? (exception as HttpException).getResponse()\r\n      : {\r\n          statusCode: status,\r\n          message,\r\n          timestamp: new Date().toISOString(),\r\n          path: request.url,\r\n        };\r\n\r\n    response.status(status).json(errorBody);\r\n  }\r\n}\r\n"],"names":["AllExceptionsFilter","catch","exception","host","ctx","switchToHttp","response","getResponse","request","getRequest","isHttpException","HttpException","status","getStatus","HttpStatus","INTERNAL_SERVER_ERROR","message","stack","Error","undefined","logger","logError","cause","method","url","originalUrl","errorBody","statusCode","timestamp","Date","toISOString","path","json","constructor","LoggerService"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBALN;+BAEuB;;;;;;;;;;AAGvB,IAAA,AAAMA,sBAAN,MAAMA;IAGXC,MAAMC,SAAkB,EAAEC,IAAmB,EAAE;QAC7C,MAAMC,MAAMD,KAAKE,YAAY;QAC7B,MAAMC,WAAWF,IAAIG,WAAW;QAChC,MAAMC,UAAUJ,IAAIK,UAAU;QAE9B,MAAMC,kBAAkBR,qBAAqBS,qBAAa;QAC1D,MAAMC,SAASF,kBACX,AAACR,UAA4BW,SAAS,KACtCC,kBAAU,CAACC,qBAAqB;QAEpC,MAAMC,UAAUN,kBACZ,AAACR,UAA4Bc,OAAO,GACpC;QAEJ,MAAMC,QAAQf,qBAAqBgB,QAAQhB,UAAUe,KAAK,GAAGE;QAE7D,IAAI,CAACC,MAAM,CAACC,QAAQ,CAClB,IAAIH,MAAMF,SAAS;YACjBM,OAAOpB,qBAAqBgB,QAAQhB,YAAYiB;QAClD,IACA,kBACA;YACEI,QAAQf,QAAQe,MAAM;YACtBC,KAAKhB,QAAQiB,WAAW;YACxBb;QACF;QAGF,MAAMc,YAAYhB,kBACd,AAACR,UAA4BK,WAAW,KACxC;YACEoB,YAAYf;YACZI;YACAY,WAAW,IAAIC,OAAOC,WAAW;YACjCC,MAAMvB,QAAQgB,GAAG;QACnB;QAEJlB,SAASM,MAAM,CAACA,QAAQoB,IAAI,CAACN;IAC/B;IAxCAO,YAAY,AAAiBb,SAAwB,IAAIc,4BAAa,EAAE,CAAE;aAA7Cd,SAAAA;IAA8C;AAyC7E"}