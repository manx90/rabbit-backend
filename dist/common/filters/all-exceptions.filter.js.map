{"version":3,"sources":["../../../src/common/filters/all-exceptions.filter.ts"],"sourcesContent":["import {\r\n  ArgumentsHost,\r\n  Catch,\r\n  ExceptionFilter,\r\n  HttpException,\r\n  HttpStatus,\r\n} from '@nestjs/common';\r\nimport { Request, Response } from 'express';\r\nimport { LoggerService } from '../utils/logger.service';\r\n\r\n@Catch()\r\nexport class AllExceptionsFilter implements ExceptionFilter {\r\n  constructor(private readonly logger: LoggerService = new LoggerService()) {}\r\n\r\n  catch(exception: unknown, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse<Response>();\r\n    const request = ctx.getRequest<Request>();\r\n\r\n    const isHttpException = exception instanceof HttpException;\r\n    const status = isHttpException\r\n      ? (exception as HttpException).getStatus()\r\n      : HttpStatus.INTERNAL_SERVER_ERROR;\r\n\r\n    // Build a rich error payload for logs\r\n    let errorResponse: any;\r\n    if (isHttpException) {\r\n      errorResponse = (exception as HttpException).getResponse();\r\n    } else if (exception instanceof Error) {\r\n      errorResponse = {\r\n        name: exception.name,\r\n        message: exception.message,\r\n        stack: exception.stack,\r\n      };\r\n    } else {\r\n      errorResponse = { message: 'Unknown error', value: String(exception) };\r\n    }\r\n\r\n    // Log with request context and original stack if available\r\n    const logPayload = {\r\n      status,\r\n      error: errorResponse,\r\n      params: request.params,\r\n      query: request.query,\r\n      body: request.body,\r\n      method: request.method,\r\n      url: request.originalUrl,\r\n    };\r\n    const stack = exception instanceof Error ? exception.stack : undefined;\r\n    this.logger.error(\r\n      `Unhandled exception: ${JSON.stringify(logPayload)}`,\r\n      'ALL_EXCEPTIONS',\r\n      stack,\r\n    );\r\n\r\n    // Prepare client-safe body\r\n    const message = isHttpException\r\n      ? (exception as HttpException).message\r\n      : 'Internal server error';\r\n    const errorBody = isHttpException\r\n      ? (exception as HttpException).getResponse()\r\n      : {\r\n          statusCode: status,\r\n          message,\r\n          timestamp: new Date().toISOString(),\r\n          path: request.url,\r\n        };\r\n\r\n    response.status(status).json(errorBody);\r\n  }\r\n}\r\n"],"names":["AllExceptionsFilter","catch","exception","host","ctx","switchToHttp","response","getResponse","request","getRequest","isHttpException","HttpException","status","getStatus","HttpStatus","INTERNAL_SERVER_ERROR","errorResponse","Error","name","message","stack","value","String","logPayload","error","params","query","body","method","url","originalUrl","undefined","logger","JSON","stringify","errorBody","statusCode","timestamp","Date","toISOString","path","json","constructor","LoggerService"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBALN;+BAEuB;;;;;;;;;;AAGvB,IAAA,AAAMA,sBAAN,MAAMA;IAGXC,MAAMC,SAAkB,EAAEC,IAAmB,EAAE;QAC7C,MAAMC,MAAMD,KAAKE,YAAY;QAC7B,MAAMC,WAAWF,IAAIG,WAAW;QAChC,MAAMC,UAAUJ,IAAIK,UAAU;QAE9B,MAAMC,kBAAkBR,qBAAqBS,qBAAa;QAC1D,MAAMC,SAASF,kBACX,AAACR,UAA4BW,SAAS,KACtCC,kBAAU,CAACC,qBAAqB;QAEpC,sCAAsC;QACtC,IAAIC;QACJ,IAAIN,iBAAiB;YACnBM,gBAAgB,AAACd,UAA4BK,WAAW;QAC1D,OAAO,IAAIL,qBAAqBe,OAAO;YACrCD,gBAAgB;gBACdE,MAAMhB,UAAUgB,IAAI;gBACpBC,SAASjB,UAAUiB,OAAO;gBAC1BC,OAAOlB,UAAUkB,KAAK;YACxB;QACF,OAAO;YACLJ,gBAAgB;gBAAEG,SAAS;gBAAiBE,OAAOC,OAAOpB;YAAW;QACvE;QAEA,2DAA2D;QAC3D,MAAMqB,aAAa;YACjBX;YACAY,OAAOR;YACPS,QAAQjB,QAAQiB,MAAM;YACtBC,OAAOlB,QAAQkB,KAAK;YACpBC,MAAMnB,QAAQmB,IAAI;YAClBC,QAAQpB,QAAQoB,MAAM;YACtBC,KAAKrB,QAAQsB,WAAW;QAC1B;QACA,MAAMV,QAAQlB,qBAAqBe,QAAQf,UAAUkB,KAAK,GAAGW;QAC7D,IAAI,CAACC,MAAM,CAACR,KAAK,CACf,CAAC,qBAAqB,EAAES,KAAKC,SAAS,CAACX,aAAa,EACpD,kBACAH;QAGF,2BAA2B;QAC3B,MAAMD,UAAUT,kBACZ,AAACR,UAA4BiB,OAAO,GACpC;QACJ,MAAMgB,YAAYzB,kBACd,AAACR,UAA4BK,WAAW,KACxC;YACE6B,YAAYxB;YACZO;YACAkB,WAAW,IAAIC,OAAOC,WAAW;YACjCC,MAAMhC,QAAQqB,GAAG;QACnB;QAEJvB,SAASM,MAAM,CAACA,QAAQ6B,IAAI,CAACN;IAC/B;IAzDAO,YAAY,AAAiBV,SAAwB,IAAIW,4BAAa,EAAE,CAAE;aAA7CX,SAAAA;IAA8C;AA0D7E"}