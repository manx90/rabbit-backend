{"version":3,"sources":["../../../src/common/pipes/parse-form-json.pipe.ts"],"sourcesContent":["import { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class ParseFormJsonPipe implements PipeTransform {\n  transform(\n    value: Record<string, any>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _metadata: ArgumentMetadata,\n  ): Record<string, any> {\n    if (!value) return value;\n\n    // Handle complex objects that might be sent as JSON strings in form data\n    const complexFields = ['sizes', 'colors', 'images'];\n    const arrayFields = ['images', 'sizes', 'colors']; // Fields that should be arrays but might not be sent as JSON\n\n    // Process JSON fields\n    complexFields.forEach((field) => {\n      if (value[field]) {\n        // Handle case where the field is an array containing a JSON string\n        if (\n          Array.isArray(value[field]) &&\n          value[field].length > 0 &&\n          typeof value[field][0] === 'string'\n        ) {\n          try {\n            // Parse the first element if it's a JSON string\n            value[field] = JSON.parse(value[field][0]);\n            console.log(\n              `Successfully parsed ${field} from array:`,\n              value[field],\n            );\n          } catch (e) {\n            console.error(`Failed to parse ${field} from array as JSON:`, e);\n            console.error(`Raw array value for ${field}:`, value[field]);\n            if (arrayFields.includes(field)) {\n              value[field] = [];\n            }\n          }\n        }\n        // Handle case where the field is a direct string\n        else if (typeof value[field] === 'string') {\n          try {\n            value[field] = JSON.parse(value[field]);\n            console.log(\n              `Successfully parsed ${field} from string:`,\n              value[field],\n            );\n          } catch (e) {\n            console.error(`Failed to parse ${field} as JSON:`, e);\n            console.error(`Raw string value for ${field}:`, value[field]);\n            if (arrayFields.includes(field)) {\n              value[field] = [];\n            }\n          }\n        } else {\n          console.log(\n            `Field ${field} is already an object or array:`,\n            value[field],\n          );\n        }\n      } else {\n        console.log(`Field ${field} is missing`);\n      }\n    });\n\n    // Handle file uploads - convert to expected format\n    if (value.imgCover === '') {\n      value.imgCover = 'default-cover.jpg'; // Provide a default value\n    }\n\n    // Ensure arrays are properly initialized\n    if (!value.images || !Array.isArray(value.images)) {\n      value.images = value.images ? [value.images] : [];\n    }\n\n    if (!value.sizes || !Array.isArray(value.sizes)) {\n      value.sizes = value.sizes ? [value.sizes] : [];\n    }\n\n    if (!value.colors || !Array.isArray(value.colors)) {\n      value.colors = value.colors ? [value.colors] : [];\n    }\n\n    console.log('Processed form data:', JSON.stringify(value, null, 2));\n    return value;\n  }\n}\n"],"names":["ParseFormJsonPipe","transform","value","_metadata","complexFields","arrayFields","forEach","field","Array","isArray","length","JSON","parse","console","log","e","error","includes","imgCover","images","sizes","colors","stringify"],"mappings":"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"}