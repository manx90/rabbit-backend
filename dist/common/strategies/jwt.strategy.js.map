{"version":3,"sources":["../../../src/common/strategies/jwt.strategy.ts"],"sourcesContent":["import { Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy as StrategyBase } from 'passport-jwt';\r\nimport { AuthService } from '../../auth/auth.service';\r\nimport { AppConfigService } from '../../config/config.service';\r\n\r\nexport interface JwtPayload {\r\n  sub: string;\r\n  username: string;\r\n  role: string;\r\n}\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(StrategyBase) {\r\n  constructor(\r\n    private readonly authService: AuthService,\r\n    private readonly configService: AppConfigService,\r\n  ) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      secretOrKey: configService.jwtAccessToken!,\r\n    });\r\n  }\r\n\r\n  async validate(payload: JwtPayload) {\r\n    const user = await this.authService.findById(payload.sub);\r\n    if (!user) throw new UnauthorizedException();\r\n    // user must include .role\r\n    return user;\r\n  }\r\n}\r\n"],"names":["JwtStrategy","PassportStrategy","StrategyBase","validate","payload","user","authService","findById","sub","UnauthorizedException","constructor","configService","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","jwtAccessToken"],"mappings":";;;;+BAaaA;;;eAAAA;;;wBAbqC;0BACjB;6BACoB;6BACzB;+BACK;;;;;;;;;;AAS1B,IAAA,AAAMA,cAAN,MAAMA,oBAAoBC,IAAAA,0BAAgB,EAACC,qBAAY;IAW5D,MAAMC,SAASC,OAAmB,EAAE;QAClC,MAAMC,OAAO,MAAM,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACH,QAAQI,GAAG;QACxD,IAAI,CAACH,MAAM,MAAM,IAAII,6BAAqB;QAC1C,0BAA0B;QAC1B,OAAOJ;IACT;IAfAK,YACE,AAAiBJ,WAAwB,EACzC,AAAiBK,aAA+B,CAChD;QACA,KAAK,CAAC;YACJC,gBAAgBC,uBAAU,CAACC,2BAA2B;YACtDC,aAAaJ,cAAcK,cAAc;QAC3C,SANiBV,cAAAA,kBACAK,gBAAAA;IAMnB;AAQF"}