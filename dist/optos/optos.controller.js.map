{"version":3,"sources":["../../src/optos/optos.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  HttpException,\n  HttpStatus,\n  Param,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n  ApiOkResponse,\n  ApiBadRequestResponse,\n  ApiInternalServerErrorResponse,\n} from '@nestjs/swagger';\nimport { OptosService } from './optos.token.service';\nimport { OptosShipmentService } from './optos.shipment.service';\nimport { OptosApiService } from './optos.api.services';\n// import { CreateShipmentDto } from './optos.dto';\n\n@ApiTags('Optos Integration')\n@Controller('optos')\nexport class OptosController {\n  constructor(\n    private readonly optosService: OptosService,\n    private readonly optosApiService: OptosApiService,\n    private readonly optosShipmentService: OptosShipmentService,\n  ) {}\n\n  @Get('token')\n  @ApiOperation({ summary: 'Get Optos authentication token' })\n  @ApiOkResponse({ description: 'Token retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getToken(): Promise<any> {\n    try {\n      return await this.optosService.Login();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Post('token')\n  @ApiOperation({ summary: 'Get user info using access token' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        'access-token': { type: 'string', description: 'Access token' },\n      },\n      required: ['access-token'],\n    },\n  })\n  @ApiOkResponse({ description: 'User info retrieved successfully' })\n  @ApiBadRequestResponse({ description: 'Access token is required' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getInfo(@Body('access-token') token: string): Promise<any> {\n    try {\n      if (!token) {\n        throw new HttpException(\n          'Access token is required',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      return await this.optosService.userInfo(token);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  @Post('Shipment')\n  @ApiOperation({ summary: 'Create a new shipment' })\n  @ApiBody({\n    description: 'Shipment data',\n    schema: {\n      type: 'object',\n      properties: {\n        // Add specific shipment properties here\n      },\n    },\n  })\n  @ApiOkResponse({ description: 'Shipment created successfully' })\n  @ApiBadRequestResponse({ description: 'Bad request - invalid shipment data' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async createShipment(@Body() createshipment: any): Promise<any> {\n    try {\n      return await this.optosShipmentService.createShipment(createshipment);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('city')\n  @ApiOperation({ summary: 'Get all cities' })\n  @ApiOkResponse({ description: 'Cities retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getCities(): Promise<any> {\n    try {\n      return await this.optosApiService.Cities();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('businesses')\n  @ApiOperation({ summary: 'Get all businesses' })\n  @ApiOkResponse({ description: 'Businesses retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getBusinesses(): Promise<any> {\n    try {\n      return await this.optosApiService.Businesses();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('BusinessesAddress')\n  @ApiOperation({ summary: 'Get businesses addresses' })\n  @ApiOkResponse({ description: 'Businesses addresses retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getBusinessesAddress(): Promise<any> {\n    try {\n      return await this.optosApiService.BusinessesAddress();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('city/:area')\n  @ApiOperation({ summary: 'Get area by city ID' })\n  @ApiParam({ name: 'area', description: 'Area ID', type: 'number' })\n  @ApiOkResponse({ description: 'Area retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getArea(@Param('area') area: number): Promise<any> {\n    try {\n      return this.optosApiService.Area(area);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('shipment')\n  @ApiOperation({ summary: 'Get shipments with query parameters' })\n  @ApiQuery({ name: 'query', description: 'Query parameters', required: false })\n  @ApiOkResponse({ description: 'Shipments retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getShipment(@Query() query: Record<string, any>): Promise<any> {\n    try {\n      return this.optosShipmentService.getShipment(query);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('shipmentType')\n  @ApiOperation({ summary: 'Get shipment types' })\n  @ApiOkResponse({ description: 'Shipment types retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getShipmentType(): Promise<any> {\n    try {\n      return this.optosShipmentService.getShipmentType();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  @Get('pendingTypes')\n  @ApiOperation({ summary: 'Get pending types' })\n  @ApiOkResponse({ description: 'Pending types retrieved successfully' })\n  @ApiInternalServerErrorResponse({ description: 'Internal server error' })\n  async getPendingTypes(): Promise<any> {\n    try {\n      return this.optosShipmentService.getPendingTypes();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  private handleError(error: any): never {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const message = error.message || 'Failed to get pending types';\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const status = error.status || HttpStatus.INTERNAL_SERVER_ERROR;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument\n    throw new HttpException({ message, status }, status);\n  }\n}\n"],"names":["OptosController","getToken","optosService","Login","error","handleError","getInfo","token","HttpException","HttpStatus","BAD_REQUEST","userInfo","createShipment","createshipment","optosShipmentService","getCities","optosApiService","Cities","getBusinesses","Businesses","getBusinessesAddress","BusinessesAddress","getArea","area","Area","getShipment","query","getShipmentType","getPendingTypes","message","status","INTERNAL_SERVER_ERROR","constructor","summary","description","schema","type","properties","required","name"],"mappings":"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"}