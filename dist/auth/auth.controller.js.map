{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport {\n  Controller,\n  Post,\n  Body,\n  HttpException,\n  HttpStatus,\n  HttpCode,\n  Get,\n  Delete,\n  UseGuards,\n  Req,\n  Param,\n  Request,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { LoginDto, RegisterDto, ChangePasswordDto } from './dto/auth.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { Role } from '../common/constants/roles.constant';\n\ninterface RequestWithUser extends Request {\n  user: { id: string; username: string; role: Role };\n}\n\n@Controller('auth')\nexport class AuthController {\n  @Post('create-user')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.SuperAdmin)\n  async createUser(\n    @Body() createUserDto: CreateUserDto,\n    @Req() req: RequestWithUser,\n  ) {\n    return this.authService.createUser(createUserDto, req.user.id);\n  }\n\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  @ApiOperation({ summary: 'User register' })\n  @ApiResponse({ status: 201, description: 'register successful' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async register(@Body() dto: RegisterDto) {\n    try {\n      const result = await this.authService.signUp(dto);\n      return {\n        statusCode: HttpStatus.CREATED,\n        message: 'User registered successfully',\n        data: result,\n      };\n    } catch (err) {\n      throw new HttpException(\n        err.message,\n        err.status || HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  @Post('login')\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({ status: 200, description: 'Login successful' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() dto: LoginDto) {\n    try {\n      const result = await this.authService.logIn(dto);\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'User logged in successfully',\n        data: result,\n      };\n    } catch (err) {\n      throw new HttpException(\n        err.message,\n        err.status || HttpStatus.UNAUTHORIZED,\n      );\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('user')\n  getProfile(@Req() req: RequestWithUser) {\n    return { statusCode: HttpStatus.OK, data: req.user };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('change-password')\n  async changePassword(\n    @Req() req: RequestWithUser,\n    @Body() dto: ChangePasswordDto,\n  ) {\n    return this.authService.changePassword(req.user.id, dto);\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.SuperAdmin)\n  @Get('all')\n  getAllUsers() {\n    return this.authService.getAllUsers();\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.SuperAdmin, Role.Admin)\n  @Delete('user/:username')\n  deleteUser(@Param('username') username: string) {\n    return this.authService.deleteUser(username);\n  }\n\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.SuperAdmin)\n  @Post('update-user/:userId')\n  async updateUser(\n    @Req() req: RequestWithUser,\n    @Param('userId') userId: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    try {\n      const updatedUser = await this.authService.updateUserBySuperAdmin(\n        req.user,\n        userId,\n        updateUserDto,\n      );\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'User updated successfully',\n        data: updatedUser,\n      };\n    } catch (err) {\n      throw new HttpException(\n        err.message,\n        err.status || HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('isLoggedIn')\n  isLoggedIn(@Req() req: Request) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const authHeader = req.headers['authorization'];\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n    const token = authHeader && authHeader.split(' ')[1];\n    return this.authService.isLoggedIn(token);\n  }\n}\n"],"names":["AuthController","createUser","createUserDto","req","authService","user","id","register","dto","result","signUp","statusCode","HttpStatus","CREATED","message","data","err","HttpException","status","BAD_REQUEST","login","logIn","OK","UNAUTHORIZED","getProfile","changePassword","getAllUsers","deleteUser","username","updateUser","userId","updateUserDto","updatedUser","updateUserBySuperAdmin","isLoggedIn","authHeader","headers","token","split","constructor","SuperAdmin","summary","description","Admin"],"mappings":"AAAA,6DAA6D;;;;+BA8BhDA;;;eAAAA;;;wBAhBN;yBACmC;6BACd;+BACE;yBAC2B;+BAC3B;8BACD;4BACF;gCACL;+BACD;;;;;;;;;;;;;;;AAOd,IAAA,AAAMA,iBAAN,MAAMA;IACX,MAGMC,WACJ,AAAQC,aAA4B,EACpC,AAAOC,GAAoB,EAC3B;QACA,OAAO,IAAI,CAACC,WAAW,CAACH,UAAU,CAACC,eAAeC,IAAIE,IAAI,CAACC,EAAE;IAC/D;IAIA,MAIMC,SAAS,AAAQC,GAAgB,EAAE;QACvC,IAAI;YACF,MAAMC,SAAS,MAAM,IAAI,CAACL,WAAW,CAACM,MAAM,CAACF;YAC7C,OAAO;gBACLG,YAAYC,kBAAU,CAACC,OAAO;gBAC9BC,SAAS;gBACTC,MAAMN;YACR;QACF,EAAE,OAAOO,KAAK;YACZ,MAAM,IAAIC,qBAAa,CACrBD,IAAIF,OAAO,EACXE,IAAIE,MAAM,IAAIN,kBAAU,CAACO,WAAW;QAExC;IACF;IAEA,MAKMC,MAAM,AAAQZ,GAAa,EAAE;QACjC,IAAI;YACF,MAAMC,SAAS,MAAM,IAAI,CAACL,WAAW,CAACiB,KAAK,CAACb;YAC5C,OAAO;gBACLG,YAAYC,kBAAU,CAACU,EAAE;gBACzBR,SAAS;gBACTC,MAAMN;YACR;QACF,EAAE,OAAOO,KAAK;YACZ,MAAM,IAAIC,qBAAa,CACrBD,IAAIF,OAAO,EACXE,IAAIE,MAAM,IAAIN,kBAAU,CAACW,YAAY;QAEzC;IACF;IAIAC,WAAW,AAAOrB,GAAoB,EAAE;QACtC,OAAO;YAAEQ,YAAYC,kBAAU,CAACU,EAAE;YAAEP,MAAMZ,IAAIE,IAAI;QAAC;IACrD;IAEA,MAEMoB,eACJ,AAAOtB,GAAoB,EAC3B,AAAQK,GAAsB,EAC9B;QACA,OAAO,IAAI,CAACJ,WAAW,CAACqB,cAAc,CAACtB,IAAIE,IAAI,CAACC,EAAE,EAAEE;IACtD;IAKAkB,cAAc;QACZ,OAAO,IAAI,CAACtB,WAAW,CAACsB,WAAW;IACrC;IAKAC,WAAW,AAAmBC,QAAgB,EAAE;QAC9C,OAAO,IAAI,CAACxB,WAAW,CAACuB,UAAU,CAACC;IACrC;IAEA,MAGMC,WACJ,AAAO1B,GAAoB,EAC3B,AAAiB2B,MAAc,EAC/B,AAAQC,aAA4B,EACpC;QACA,IAAI;YACF,MAAMC,cAAc,MAAM,IAAI,CAAC5B,WAAW,CAAC6B,sBAAsB,CAC/D9B,IAAIE,IAAI,EACRyB,QACAC;YAEF,OAAO;gBACLpB,YAAYC,kBAAU,CAACU,EAAE;gBACzBR,SAAS;gBACTC,MAAMiB;YACR;QACF,EAAE,OAAOhB,KAAK;YACZ,MAAM,IAAIC,qBAAa,CACrBD,IAAIF,OAAO,EACXE,IAAIE,MAAM,IAAIN,kBAAU,CAACO,WAAW;QAExC;IACF;IAIAe,WAAW,AAAO/B,GAAY,EAAE;QAC9B,mEAAmE;QACnE,MAAMgC,aAAahC,IAAIiC,OAAO,CAAC,gBAAgB;QAC/C,sGAAsG;QACtG,MAAMC,QAAQF,cAAcA,WAAWG,KAAK,CAAC,IAAI,CAAC,EAAE;QACpD,OAAO,IAAI,CAAClC,WAAW,CAAC8B,UAAU,CAACG;IACrC;IA3GAE,YAAY,AAAiBnC,WAAwB,CAAE;aAA1BA,cAAAA;IAA2B;AA4G1D;;;;mDApHcoC;;;;;;;;;;;;;QAWIC,SAAS;;;QACVvB,QAAQ;QAAKwB,aAAa;;;QAC1BxB,QAAQ;QAAKwB,aAAa;;;;;;;;;;;;QAkBzBD,SAAS;;;QACVvB,QAAQ;QAAKwB,aAAa;;;QAC1BxB,QAAQ;QAAKwB,aAAa;;6CACpBpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAiCTkB;;;;;;;;mDAOAA,gCAAiBG;;;;;;;;;;;mDAOjBH"}