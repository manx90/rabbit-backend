{"version":3,"sources":["../../../src/auth/dto/auth.dto.ts"],"sourcesContent":["import {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches,\n  IsEnum,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Role } from '../../common/constants/roles.constant';\n\n/** Data transfer object for user login */\nexport class LoginDto {\n  @ApiProperty({\n    example: 'newuser',\n    description: 'Username for authentication',\n  })\n  @IsNotEmpty({ message: 'Username is required' })\n  @IsString({ message: 'Username must be a string' })\n  username: string;\n\n  @ApiProperty({ example: 'StrongP@ss1', description: 'User password' })\n  @IsNotEmpty({ message: 'Password is required' })\n  @IsString({ message: 'Password must be a string' })\n  password: string;\n}\n\n/** Data transfer object for user registration */\nexport class RegisterDto {\n  @ApiProperty({ example: 'newuser', description: 'Desired username' })\n  @IsNotEmpty({ message: 'Username is required' })\n  @IsString({ message: 'Username must be a string' })\n  @MinLength(3, { message: 'Username must be at least 3 characters long' })\n  @MaxLength(20, { message: 'Username cannot exceed 20 characters' })\n  username: string;\n\n  @ApiProperty({ example: 'StrongP@ss1', description: 'Desired password' })\n  @IsNotEmpty({ message: 'Password is required' })\n  @IsString({ message: 'Password must be a string' })\n  @MinLength(6, { message: 'Password must be at least 6 characters long' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'Password must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number or special character',\n  })\n  password: string;\n\n  @ApiProperty({\n    enum: Role,\n    enumName: 'Role',\n    example: Role.Admin,\n    description: 'Optional user role',\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(Role, { message: 'Role must be a valid enum value' })\n  role?: Role;\n}\n\n/** Data transfer object for changing password */\nexport class ChangePasswordDto {\n  @ApiProperty({ example: 'OldP@ss1', description: 'Current password' })\n  @IsNotEmpty({ message: 'Current password is required' })\n  @IsString({ message: 'Current password must be a string' })\n  oldPassword: string;\n\n  @ApiProperty({ example: 'NewP@ss2', description: 'New password' })\n  @IsNotEmpty({ message: 'New password is required' })\n  @IsString({ message: 'New password must be a string' })\n  @MinLength(6, { message: 'New password must be at least 6 characters long' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'New password must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number or special character',\n  })\n  newPassword: string;\n}\n\n/** Internal user data transfer object */\nexport class AuthUser {\n  @ApiProperty({ example: 'admin', description: 'Username' })\n  @IsNotEmpty({ message: 'Username is required' })\n  @IsString({ message: 'Username must be a string' })\n  username: string;\n\n  @ApiProperty({ example: 'StrongP@ss1', description: 'Password' })\n  @IsNotEmpty({ message: 'Password is required' })\n  @IsString({ message: 'Password must be a string' })\n  password: string;\n\n  @ApiProperty({\n    enum: Role,\n    enumName: 'Role',\n    example: Role.Admin,\n    description: 'User role',\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(Role, { message: 'Role must be a valid enum value' })\n  role?: Role;\n\n  @ApiProperty({ example: '1', description: 'User ID', required: false })\n  @IsOptional()\n  @IsString({ message: 'ID must be a string' })\n  id?: string;\n}\n"],"names":["AuthUser","ChangePasswordDto","LoginDto","RegisterDto","example","description","message","enum","Role","enumName","Admin","required"],"mappings":";;;;;;;;;;;IA8EaA,QAAQ;eAARA;;IAlBAC,iBAAiB;eAAjBA;;IA/CAC,QAAQ;eAARA;;IAgBAC,WAAW;eAAXA;;;gCArBN;yBACqB;+BACP;;;;;;;;;;AAGd,IAAA,AAAMD,WAAN,MAAMA;AAab;;;QAXIE,SAAS;QACTC,aAAa;;;QAEDC,SAAS;;;QACXA,SAAS;;;;;;QAGNF,SAAS;QAAeC,aAAa;;;QACtCC,SAAS;;;QACXA,SAAS;;;;AAKhB,IAAA,AAAMH,cAAN,MAAMA;AA4Bb;;;QA3BiBC,SAAS;QAAWC,aAAa;;;QAClCC,SAAS;;;QACXA,SAAS;;;QACLA,SAAS;;;QACRA,SAAS;;;;;;QAGXF,SAAS;QAAeC,aAAa;;;QACtCC,SAAS;;;QACXA,SAAS;;;QACLA,SAAS;;;QAEvBA,SACE;;;;;;QAKFC,MAAMC,mBAAI;QACVC,UAAU;QACVL,SAASI,mBAAI,CAACE,KAAK;QACnBL,aAAa;QACbM,UAAU;;;;QAGIL,SAAS;;;;AAKpB,IAAA,AAAML,oBAAN,MAAMA;AAeb;;;QAdiBG,SAAS;QAAYC,aAAa;;;QACnCC,SAAS;;;QACXA,SAAS;;;;;;QAGNF,SAAS;QAAYC,aAAa;;;QACnCC,SAAS;;;QACXA,SAAS;;;QACLA,SAAS;;;QAEvBA,SACE;;;;AAMC,IAAA,AAAMN,WAAN,MAAMA;AA0Bb;;;QAzBiBI,SAAS;QAASC,aAAa;;;QAChCC,SAAS;;;QACXA,SAAS;;;;;;QAGNF,SAAS;QAAeC,aAAa;;;QACtCC,SAAS;;;QACXA,SAAS;;;;;;QAInBC,MAAMC,mBAAI;QACVC,UAAU;QACVL,SAASI,mBAAI,CAACE,KAAK;QACnBL,aAAa;QACbM,UAAU;;;;QAGIL,SAAS;;;;;;QAGVF,SAAS;QAAKC,aAAa;QAAWM,UAAU;;;;QAEnDL,SAAS"}