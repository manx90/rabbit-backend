{"version":3,"sources":["../../src/product/product.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { product } from './entities/product.entity';\nimport { category, subCategory } from './entities/Category.entity';\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { PublishState } from 'src/common/interfaces/entity.interface';\nimport { ApiFeatures } from 'src/common/utils/api-features';\nimport { Request } from 'express';\nimport { ParsedQs } from 'qs';\nimport { FileStorageService } from '../file-storage/file-storage.service';\nimport { ConfigService } from '@nestjs/config';\n\ninterface UploadFiles {\n  images?: Express.Multer.File[];\n  imgCover?: Express.Multer.File[];\n  imgSizeChart?: Express.Multer.File[];\n  imgMeasure?: Express.Multer.File[];\n  imgColors?: Express.Multer.File[];\n}\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(product)\n    private readonly productRepo: Repository<product>,\n    @InjectRepository(category)\n    private readonly categoryRepo: Repository<category>,\n    @InjectRepository(subCategory)\n    private readonly subCategoryRepo: Repository<subCategory>,\n    private readonly fileStorageService: FileStorageService,\n    private readonly configService: ConfigService,\n  ) {}\n  /**\n   * Save files to storage and return their paths\n   * This replaces the old mapFiles method that converted to base64\n   */\n  private async saveFiles(\n    files: Express.Multer.File[] = [],\n    productName: string,\n    subDirectory: string,\n  ): Promise<string[]> {\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    return await this.fileStorageService.saveFiles(files, productPath, {\n      quality: 50,\n      format: 'jpeg',\n      progressive: true,\n    });\n  }\n  /**\n   * Save a single file to storage and return its path\n   */\n  private async saveFile(\n    file: Express.Multer.File,\n    productName: string,\n    subDirectory: string,\n  ): Promise<string> {\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    // Skip compression for sizechart and measure files\n    if (subDirectory === 'sizechart' || subDirectory === 'measure') {\n      // Don't compress these files - keep original quality\n      return await this.fileStorageService.saveFile(file, productPath, {\n        quality: 100, // Keep original quality\n        format: 'jpeg',\n        progressive: true,\n      });\n    } else {\n      return await this.fileStorageService.saveFile(file, productPath, {\n        quality: 50,\n        format: 'jpeg',\n        progressive: true,\n      });\n    }\n  }\n\n  private async uploadFiles(\n    files: UploadFiles,\n    productName: string,\n  ): Promise<{\n    images?: string[];\n    imgCover?: string;\n    imgSizeChart?: string;\n    imgMeasure?: string;\n    imgColors?: string[];\n  }> {\n    const result: any = {};\n\n    if (files.images && files.images.length > 0) {\n      result.images = await this.saveFiles(files.images, productName, 'images');\n    }\n    if (files.imgCover && files.imgCover.length > 0) {\n      result.imgCover = await this.saveFile(\n        files.imgCover[0],\n        productName,\n        'cover',\n      );\n    }\n    if (files.imgSizeChart && files.imgSizeChart.length > 0) {\n      result.imgSizeChart = await this.saveFile(\n        files.imgSizeChart[0],\n        productName,\n        'size-chart',\n      );\n    }\n    if (files.imgMeasure && files.imgMeasure.length > 0) {\n      result.imgMeasure = await this.saveFile(\n        files.imgMeasure[0],\n        productName,\n        'measure',\n      );\n    }\n    if (files.imgColors && files.imgColors.length > 0) {\n      result.imgColors = await this.saveFiles(\n        files.imgColors,\n        productName,\n        'colors',\n      );\n    }\n    return result;\n  }\n  /**\n   * Transform product file paths to full URLs\n   * @param products Array of product entities\n   * @param req Express Request object\n   * @returns Products with transformed URLs\n   */\n  private transformProductUrls(products: product[], req: Request): any[] {\n    const protocol = req.protocol || 'http';\n    const host = req.get('host') || 'localhost:3000';\n    const baseUrl = `${protocol}://${host}`;\n\n    return products.map((product) => {\n      // Create a clone of the product to avoid modifying the original\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const transformed = Object.create(\n        Object.getPrototypeOf(product),\n        Object.getOwnPropertyDescriptors(product),\n      );\n      // Transform image cover URL\n      if (transformed.imgCover && !transformed.imgCover.startsWith('http')) {\n        transformed.imgCover = `${baseUrl}/uploads/${transformed.imgCover}`;\n      }\n      // Transform size chart image URL\n      if (\n        transformed.imgSizeChart &&\n        !transformed.imgSizeChart.startsWith('http')\n      ) {\n        transformed.imgSizeChart = `${baseUrl}/uploads/${transformed.imgSizeChart}`;\n      }\n      // Transform measure image URL\n      if (\n        transformed.imgMeasure &&\n        !transformed.imgMeasure.startsWith('http')\n      ) {\n        transformed.imgMeasure = `${baseUrl}/uploads/${transformed.imgMeasure}`;\n      }\n      // Transform product images URLs\n      if (transformed.images && Array.isArray(transformed.images)) {\n        transformed.images = transformed.images.map((img: string) =>\n          img && !img.startsWith('http') ? `${baseUrl}/uploads/${img}` : img,\n        );\n      }\n      // Transform color images URLs\n      if (transformed.colors && Array.isArray(transformed.colors)) {\n        transformed.colors = transformed.colors.map((color) => ({\n          ...color,\n          imgColor:\n            color.imgColor && !color.imgColor.startsWith('http')\n              ? `${baseUrl}/uploads/${color.imgColor}`\n              : color.imgColor,\n        }));\n      }\n\n      return transformed;\n    });\n  }\n\n  /** ----------  Get All Products  ---------- */\n  async getAllProducts(\n    query: ParsedQs,\n    req?: Request,\n  ): Promise<{\n    status: string;\n    results: number;\n    total: number;\n    currentPage: number;\n    limit: number;\n    totalPages: number;\n    lastPage: number;\n    data: product[];\n  }> {\n    const queryBuilder = this.productRepo\n      .createQueryBuilder('product')\n      .leftJoinAndSelect('product.category', 'category')\n      .leftJoinAndSelect('product.subCategory', 'subCategory')\n      .leftJoinAndSelect('product.poster', 'auth')\n      .select([\n        'product',\n        'category.id',\n        'category.name',\n        'subCategory.name',\n        'subCategory.id',\n        'auth.username',\n      ]);\n    const features = new ApiFeatures(\n      queryBuilder,\n      query || {},\n      this.productRepo.metadata,\n    )\n      .filter()\n      .sort()\n      .paginate();\n    const [data, total] = await features.getManyAndCount();\n    const transformedData = req ? this.transformProductUrls(data, req) : data;\n    const pagination = features.getPaginationInfo();\n    return {\n      status: 'success',\n      results: transformedData.length,\n      total,\n      currentPage: pagination.page,\n      limit: pagination.limit,\n      totalPages: Math.ceil(total / pagination.limit),\n      lastPage: Math.ceil(total / pagination.limit),\n      data: transformedData,\n    };\n  }\n\n  async create(\n    dto: CreateProductDto,\n    files: UploadFiles = {},\n    poster: auth,\n    req?: Request,\n  ): Promise<product> {\n    // 1) بناء الكيان الأساسي\n    const Product = new product();\n    const existingProduct = await this.productRepo.findOne({\n      where: { name: dto.name },\n    });\n    if (existingProduct)\n      throw new BadRequestException('Product name already exists');\n    Product.name = dto.name;\n    Product.description = dto.description;\n    Product.poster = { id: poster.id, username: poster.username };\n    Product.category = await this.fetchCategory(dto.categoryId);\n    Product.subCategory = await this.fetchSubCategory(\n      dto.categoryId,\n      dto.subCategoryId,\n    );\n    Product.publishState = dto.publishState as PublishState;\n\n    // 2) Save images to file system and store paths in database\n    try {\n      // Initialize image fields\n      Product.imgCover = '';\n      Product.imgSizeChart = '';\n      Product.imgMeasure = '';\n      Product.images = [];\n\n      // Save cover image if provided\n      if (files.imgCover && files.imgCover[0]) {\n        Product.imgCover = await this.saveFile(\n          files.imgCover[0],\n          dto.name,\n          'cover',\n        );\n      }\n\n      // Save size chart image if provided\n      if (files.imgSizeChart && files.imgSizeChart[0]) {\n        Product.imgSizeChart = await this.saveFile(\n          files.imgSizeChart[0],\n          dto.name,\n          'sizechart',\n        );\n      }\n\n      // Save measure image if provided\n      if (files.imgMeasure && files.imgMeasure[0]) {\n        Product.imgMeasure = await this.saveFile(\n          files.imgMeasure[0],\n          dto.name,\n          'measure',\n        );\n      }\n\n      // Validate that the count of color images matches the count of color names\n      if (files.imgColors && files.imgColors.length !== dto.colors?.length) {\n        throw new BadRequestException(\n          'The count of color images must match the count of color names',\n          'COLORS_AND_IMAGES_COUNT_DO_NOT_MATCH',\n        );\n      }\n\n      // Save gallery images if provided\n      if (files.images && files.images.length > 0) {\n        Product.images = await this.saveFiles(files.images, dto.name, 'images');\n      }\n    } catch (error) {\n      console.error('Error saving images:', error);\n      throw new Error('Failed to save product images');\n    }\n\n    // Save color images to file system and validate\n    if (files.imgColors && files.imgColors.length > 0) {\n      if (!dto.colors || !Array.isArray(dto.colors)) {\n        throw new BadRequestException(\n          'Colors array is required when uploading color images',\n        );\n      }\n\n      // Save all color images first\n      const colorImagePaths = await this.saveFiles(\n        files.imgColors,\n        dto.name,\n        'colors',\n      );\n\n      // Map color images to colors array\n      Product.colors = colorImagePaths.map((imgPath, index) => ({\n        name:\n          dto.colors && dto.colors[index]\n            ? dto.colors[index].name\n            : `Color ${index + 1}`,\n        imgColor: imgPath,\n      }));\n    } else if (dto.colors && Array.isArray(dto.colors)) {\n      // Handle colors without images\n      Product.colors = dto.colors.map((color) => ({\n        name: color.name,\n        imgColor: '',\n      }));\n    }\n\n    // 3) Categories\n    Product.category = await this.fetchCategory(dto.categoryId);\n    Product.subCategory = await this.fetchSubCategory(\n      dto.categoryId,\n      dto.subCategoryId,\n    );\n\n    // Poster is already assigned in the initial setup\n\n    // 6) Size Details\n    // Validate that color names in quantities match the defined colors\n    if (\n      dto.sizes &&\n      Array.isArray(dto.sizes) &&\n      dto.colors &&\n      Array.isArray(dto.colors)\n    ) {\n      const colorNames = dto.colors.map((color) => color.name);\n      const sizeColorNames = new Set<string>();\n\n      // Collect all color names used in sizes\n      for (const size of dto.sizes) {\n        for (const colorQty of size.quantities) {\n          sizeColorNames.add(colorQty.colorName);\n        }\n      }\n\n      // Convert set to array for comparison\n      const uniqueSizeColorNames = Array.from(sizeColorNames);\n\n      // Check if the count and names match exactly\n      if (uniqueSizeColorNames.length !== colorNames.length) {\n        throw new BadRequestException(\n          'Number of colors in sizes does not match the number of colors defined in the colors list',\n        );\n      }\n\n      // Check if all colors in sizes exist in colors array and vice versa\n      for (const colorName of uniqueSizeColorNames) {\n        if (!colorNames.includes(colorName)) {\n          throw new BadRequestException(\n            `Color \"${colorName}\" used in sizes is not defined in the colors list`,\n          );\n        }\n      }\n\n      for (const colorName of colorNames) {\n        if (!uniqueSizeColorNames.includes(colorName)) {\n          throw new BadRequestException(\n            `Color \"${colorName}\" defined in colors list is not used in any size`,\n          );\n        }\n      }\n    }\n    //  Date Published\n    if (dto.datePublished) {\n      Product.datePublished = dto.datePublished;\n      Product.publishState = PublishState.DRAFT;\n    }\n    Product.sizeDetails = dto.sizes.map((size) => ({\n      sizeName: size.sizeName,\n      price: size.price,\n      quantities: size.quantities.map((colorQty) => ({\n        colorName: colorQty.colorName,\n        quantity: colorQty.quantity,\n      })),\n    }));\n\n    if (dto.wordKeys) Product.wordKeys = dto.wordKeys;\n    if (dto.videoLink) Product.videoLink = dto.videoLink;\n    if (dto.season) Product.season = dto.season;\n\n    // Calculate total quantity\n    Product.quantity = Product.getTotalQuantity();\n\n    try {\n      // Save the product to database\n      const savedProduct = await this.productRepo.save(Product);\n\n      // Transform file paths to full URLs if request object is provided\n      if (req) {\n        const [transformedProduct] = this.transformProductUrls(\n          [savedProduct],\n          req,\n        );\n        return transformedProduct;\n      }\n\n      return savedProduct;\n    } catch (error) {\n      console.error('Error saving product:', error);\n      throw new Error('Failed to save product');\n    }\n  }\n\n  /** ----------  Update  ---------- */\n  async update(\n    id: number,\n    dto: UpdateProductDto,\n    files: UploadFiles = {},\n    req: Request,\n  ): Promise<product> {\n    const product = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory', 'poster'],\n    });\n    if (!product) throw new NotFoundException('Product not found');\n    if (dto.name) product.name = dto.name;\n    if (dto.description) product.description = dto.description;\n    if (dto.categoryId)\n      product.category = await this.fetchCategory(dto.categoryId);\n    if (dto.subCategoryId)\n      product.subCategory = await this.fetchSubCategory(\n        dto.categoryId as number,\n        dto.subCategoryId,\n      );\n    if (dto.publishState) product.publishState = dto.publishState;\n\n    // Update files if provided - save to file system and handle old files properly\n    try {\n      // Handle product images (multiple files)\n      if (files.images && files.images.length > 0) {\n        // Delete old images if they exist\n        if (product.images && product.images.length > 0) {\n          this.fileStorageService.deleteFiles(product.images);\n        }\n        // Save new images\n        product.images = await this.saveFiles(\n          files.images,\n          product.name,\n          'images',\n        );\n      }\n\n      // Handle product cover image (single file)\n      if (files.imgCover && files.imgCover[0]) {\n        // Delete old cover image if it exists\n        if (product.imgCover) {\n          this.fileStorageService.deleteFile(product.imgCover);\n        }\n        // Save new cover image\n        product.imgCover = await this.saveFile(\n          files.imgCover[0],\n          product.name,\n          'cover',\n        );\n      }\n\n      // Handle size chart image (single file)\n      if (files.imgSizeChart && files.imgSizeChart[0]) {\n        // Delete old size chart image if it exists\n        if (product.imgSizeChart) {\n          this.fileStorageService.deleteFile(product.imgSizeChart);\n        }\n        // Save new size chart image\n        product.imgSizeChart = await this.saveFile(\n          files.imgSizeChart[0],\n          product.name,\n          'sizechart',\n        );\n      }\n\n      // Handle measure image (single file)\n      if (files.imgMeasure && files.imgMeasure[0]) {\n        // Delete old measure image if it exists\n        if (product.imgMeasure) {\n          this.fileStorageService.deleteFile(product.imgMeasure);\n        }\n        // Save new measure image\n        product.imgMeasure = await this.saveFile(\n          files.imgMeasure[0],\n          product.name,\n          'measure',\n        );\n      }\n    } catch (error) {\n      console.error('Error handling product files:', error);\n      throw new Error(`Failed to process product files: ${error.message}`);\n    }\n\n    // Update category and subcategory if provided\n    if (dto.categoryId)\n      product.category = await this.fetchCategory(dto.categoryId);\n    if (dto.subCategoryId && dto.categoryId)\n      product.subCategory = await this.fetchSubCategory(\n        dto.categoryId,\n        dto.subCategoryId,\n      );\n\n    // Update size details if provided\n    if (dto.sizes && dto.sizes.length > 0) {\n      product.sizeDetails = dto.sizes.map((size, index) => ({\n        sizeName: size?.sizeName,\n        price: size?.price || product.sizeDetails[index].price,\n        quantities: size?.quantities\n          ? size.quantities.map((q, index) => ({\n              colorName: q.colorName,\n              quantity:\n                q?.quantity !== undefined\n                  ? q.quantity\n                  : product.sizeDetails[index].quantities[index].quantity,\n              // imgColors:\n              //   q.imgColors ||\n              //   product.sizeDetails[index].quantities[index].imgColors,\n            }))\n          : product.sizeDetails[index].quantities,\n      }));\n    }\n\n    // Update colors if provided\n    try {\n      if (\n        dto.colors &&\n        dto.colors.length > 0 &&\n        files.imgColors &&\n        files.imgColors.length > 0\n      ) {\n        // Delete old color images if they exist\n        if (product.colors && product.colors.length > 0) {\n          const oldColorImages = product.colors\n            .map((color) => color.imgColor)\n            .filter(\n              (imgPath): imgPath is string => !!imgPath && imgPath.length > 0,\n            );\n\n          if (oldColorImages.length > 0) {\n            this.fileStorageService.deleteFiles(oldColorImages);\n          }\n        }\n\n        // Save new color images to file system\n        const colorImagePaths = await this.saveFiles(\n          files.imgColors,\n          product.name,\n          'colors',\n        );\n\n        product.colors = dto.colors.map((color, index) => ({\n          name:\n            color.name ||\n            (product.colors && product.colors[index]\n              ? product.colors[index].name\n              : ''),\n          imgColor:\n            colorImagePaths[index] ||\n            (product.colors && product.colors[index]\n              ? product.colors[index].imgColor\n              : ''),\n        }));\n      } else if (dto.colors && dto.colors.length > 0) {\n        // Update color names but keep existing image paths\n        product.colors = dto.colors.map((color, index) => ({\n          name:\n            color.name ||\n            (product.colors && product.colors[index]\n              ? product.colors[index].name\n              : ''),\n          imgColor:\n            product.colors && product.colors[index]\n              ? product.colors[index].imgColor\n              : '',\n        }));\n      }\n    } catch (error) {\n      console.error('Error handling product color images:', error);\n      throw new Error(\n        `Failed to process product color images: ${error.message}`,\n      );\n    }\n    product.updatedAt = new Date();\n\n    // Use update method for better efficiency (doesn't load entity, doesn't trigger hooks)\n    await this.productRepo.update(id, product);\n\n    // Fetch the updated product to return it\n    const updatedProduct = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory', 'poster'],\n    });\n\n    if (!updatedProduct) {\n      throw new NotFoundException(\n        `Product with ID ${id} not found after update`,\n      );\n    }\n\n    // Transform file paths to full URLs if request object is provided\n    if (req) {\n      const [transformedProduct] = this.transformProductUrls(\n        [updatedProduct],\n        req,\n      );\n      return transformedProduct;\n    }\n\n    return updatedProduct;\n  }\n\n  /** ----------  Helpers  ---------- */\n  private async fetchCategory(id: number): Promise<any> {\n    const cat = await this.categoryRepo.findOne({\n      where: { id },\n      relations: ['subCategories'],\n    });\n    if (!cat) throw new NotFoundException(`Category ${id} not found`);\n\n    return { id: cat.id, name: cat.name };\n  }\n\n  private async fetchSubCategory(idCat: number, idSub: number): Promise<any> {\n    const sub = await this.subCategoryRepo.findOneBy({\n      id: idSub,\n      category: { id: idCat },\n    });\n    if (!sub)\n      throw new NotFoundException(\n        'SubCategory not found or not exist in this category',\n      );\n    return { id: sub.id, name: sub.name };\n  }\n\n  async remove(\n    id: number,\n  ): Promise<{ success: boolean; product?: any; message?: string }> {\n    const product = await this.productRepo.findOneBy({ id });\n    if (!product) throw new NotFoundException('Product not found');\n\n    const productInfo = {\n      id: product.id,\n      name: product.name,\n    };\n    await this.productRepo.save(product);\n    // Delete the entire product directory\n    const productPath = `products/${product.name.replace(/\\s+/g, '_').toLowerCase()}`;\n    this.fileStorageService.deleteDirectory(productPath);\n    try {\n      await this.productRepo.remove(product);\n      return {\n        success: true,\n        product: productInfo,\n        message: 'Product deleted successfully',\n      };\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      return {\n        success: false,\n        message: `Error deleting product: ${error.message}`,\n      };\n    }\n  }\n\n  async findOne(id: number): Promise<any> {\n    const product = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory'],\n    });\n\n    if (!product) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return product;\n  }\n\n  async deleteAll(): Promise<void> {\n    const productPath = `products`;\n    this.fileStorageService.deleteDirectory(productPath);\n    await this.productRepo\n      .createQueryBuilder()\n      .delete()\n      .from(product)\n      .where('1 = 1')\n      .execute();\n  }\n\n  async ConnectProduct(productIds: number[]): Promise<any> {\n    const productsIds: number[] = [];\n    const products = await Promise.all(\n      productIds.map(async (id) => {\n        const prod = await this.productRepo.findOne({ where: { id } });\n        if (!prod) {\n          throw new NotFoundException(`Product with ID ${id} not found`);\n        }\n        productsIds.push(prod.id);\n        return prod;\n      }),\n    );\n    for (const prod of products) {\n      prod.productIdsCollection = productsIds;\n      await this.productRepo.save(prod);\n    }\n    return {\n      data: products,\n      message: 'Products connected successfully',\n    };\n  }\n}\n"],"names":["ProductService","saveFiles","files","productName","subDirectory","productPath","replace","toLowerCase","fileStorageService","quality","format","progressive","saveFile","file","uploadFiles","result","images","length","imgCover","imgSizeChart","imgMeasure","imgColors","transformProductUrls","products","req","protocol","host","get","baseUrl","map","product","transformed","Object","create","getPrototypeOf","getOwnPropertyDescriptors","startsWith","Array","isArray","img","colors","color","imgColor","getAllProducts","query","queryBuilder","productRepo","createQueryBuilder","leftJoinAndSelect","select","features","ApiFeatures","metadata","filter","sort","paginate","data","total","getManyAndCount","transformedData","pagination","getPaginationInfo","status","results","currentPage","page","limit","totalPages","Math","ceil","lastPage","dto","poster","Product","existingProduct","findOne","where","name","BadRequestException","description","id","username","category","fetchCategory","categoryId","subCategory","fetchSubCategory","subCategoryId","publishState","error","console","Error","colorImagePaths","imgPath","index","sizes","colorNames","sizeColorNames","Set","size","colorQty","quantities","add","colorName","uniqueSizeColorNames","from","includes","datePublished","PublishState","DRAFT","sizeDetails","sizeName","price","quantity","wordKeys","videoLink","season","getTotalQuantity","savedProduct","save","transformedProduct","update","relations","NotFoundException","deleteFiles","deleteFile","message","q","undefined","oldColorImages","updatedAt","Date","updatedProduct","cat","categoryRepo","idCat","idSub","sub","subCategoryRepo","findOneBy","remove","productInfo","deleteDirectory","success","deleteAll","delete","execute","ConnectProduct","productIds","productsIds","Promise","all","prod","push","productIdsCollection","constructor","configService"],"mappings":"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"}