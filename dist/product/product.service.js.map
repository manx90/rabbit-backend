{"version":3,"sources":["../../src/product/product.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\nimport {\r\n  BadRequestException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { product } from './entities/product.entity';\r\nimport { category, subCategory } from './entities/Category.entity';\r\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\r\nimport { auth } from 'src/auth/entities/auth.entity';\r\nimport { PublishState } from 'src/common/interfaces/entity.interface';\r\nimport { ApiFeatures } from 'src/common/utils/api-features';\r\nimport { Request } from 'express';\r\nimport { ParsedQs } from 'qs';\r\nimport { FileStorageService } from '../file-storage/file-storage.service';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\ninterface UploadFiles {\r\n  images?: Express.Multer.File[];\r\n  imgCover?: Express.Multer.File[];\r\n  imgSizeChart?: Express.Multer.File[];\r\n  imgMeasure?: Express.Multer.File[];\r\n  imgColors?: Express.Multer.File[];\r\n}\r\n\r\n@Injectable()\r\nexport class ProductService {\r\n  constructor(\r\n    @InjectRepository(product)\r\n    private readonly productRepo: Repository<product>,\r\n    @InjectRepository(category)\r\n    private readonly categoryRepo: Repository<category>,\r\n    @InjectRepository(subCategory)\r\n    private readonly subCategoryRepo: Repository<subCategory>,\r\n    private readonly fileStorageService: FileStorageService,\r\n    private readonly configService: ConfigService,\r\n  ) {}\r\n\r\n  /**\r\n   * Save files to storage and return their paths\r\n   * This replaces the old mapFiles method that converted to base64\r\n   */\r\n  private async saveFiles(\r\n    files: Express.Multer.File[] = [],\r\n    productName: string,\r\n    subDirectory: string,\r\n  ): Promise<string[]> {\r\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\r\n    return await this.fileStorageService.saveFiles(files, productPath);\r\n  }\r\n\r\n  /**\r\n   * Save a single file to storage and return its path\r\n   */\r\n  private async saveFile(\r\n    file: Express.Multer.File,\r\n    productName: string,\r\n    subDirectory: string,\r\n  ): Promise<string> {\r\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\r\n    return await this.fileStorageService.saveFile(file, productPath);\r\n  }\r\n\r\n  private async uploadFiles(\r\n    files: UploadFiles,\r\n    productName: string,\r\n  ): Promise<{\r\n    images?: string[];\r\n    imgCover?: string;\r\n    imgSizeChart?: string;\r\n    imgMeasure?: string;\r\n    imgColors?: string[];\r\n  }> {\r\n    const result: any = {};\r\n\r\n    if (files.images && files.images.length > 0) {\r\n      result.images = await this.saveFiles(files.images, productName, 'images');\r\n    }\r\n\r\n    if (files.imgCover && files.imgCover.length > 0) {\r\n      result.imgCover = await this.saveFile(\r\n        files.imgCover[0],\r\n        productName,\r\n        'cover',\r\n      );\r\n    }\r\n\r\n    if (files.imgSizeChart && files.imgSizeChart.length > 0) {\r\n      result.imgSizeChart = await this.saveFile(\r\n        files.imgSizeChart[0],\r\n        productName,\r\n        'size-chart',\r\n      );\r\n    }\r\n\r\n    if (files.imgMeasure && files.imgMeasure.length > 0) {\r\n      result.imgMeasure = await this.saveFile(\r\n        files.imgMeasure[0],\r\n        productName,\r\n        'measure',\r\n      );\r\n    }\r\n\r\n    if (files.imgColors && files.imgColors.length > 0) {\r\n      result.imgColors = await this.saveFiles(\r\n        files.imgColors,\r\n        productName,\r\n        'colors',\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Transform product file paths to full URLs\r\n   * @param products Array of product entities\r\n   * @param req Express Request object\r\n   * @returns Products with transformed URLs\r\n   */\r\n  private transformProductUrls(products: product[], req: Request): any[] {\r\n    const protocol = req.protocol || 'http';\r\n    const host = req.get('host') || 'localhost:3000';\r\n    const baseUrl = `${protocol}://${host}`;\r\n\r\n    return products.map((product) => {\r\n      // Create a clone of the product to avoid modifying the original\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      const transformed = Object.create(\r\n        Object.getPrototypeOf(product),\r\n        Object.getOwnPropertyDescriptors(product),\r\n      );\r\n      // Transform image cover URL\r\n      if (transformed.imgCover && !transformed.imgCover.startsWith('http')) {\r\n        transformed.imgCover = `${baseUrl}/uploads/${transformed.imgCover}`;\r\n      }\r\n      // Transform size chart image URL\r\n      if (\r\n        transformed.imgSizeChart &&\r\n        !transformed.imgSizeChart.startsWith('http')\r\n      ) {\r\n        transformed.imgSizeChart = `${baseUrl}/uploads/${transformed.imgSizeChart}`;\r\n      }\r\n      // Transform measure image URL\r\n      if (\r\n        transformed.imgMeasure &&\r\n        !transformed.imgMeasure.startsWith('http')\r\n      ) {\r\n        transformed.imgMeasure = `${baseUrl}/uploads/${transformed.imgMeasure}`;\r\n      }\r\n      // Transform product images URLs\r\n      if (transformed.images && Array.isArray(transformed.images)) {\r\n        transformed.images = transformed.images.map((img: string) =>\r\n          img && !img.startsWith('http') ? `${baseUrl}/uploads/${img}` : img,\r\n        );\r\n      }\r\n      // Transform color images URLs\r\n      if (transformed.colors && Array.isArray(transformed.colors)) {\r\n        transformed.colors = transformed.colors.map((color) => ({\r\n          ...color,\r\n          imgColor:\r\n            color.imgColor && !color.imgColor.startsWith('http')\r\n              ? `${baseUrl}/uploads/${color.imgColor}`\r\n              : color.imgColor,\r\n        }));\r\n      }\r\n\r\n      return transformed;\r\n    });\r\n  }\r\n\r\n  /** ----------  Get All Products  ---------- */\r\n  async getAllProducts(\r\n    query: ParsedQs,\r\n    req?: Request,\r\n  ): Promise<{\r\n    status: string;\r\n    results: number;\r\n    total: number;\r\n    page: number;\r\n    limit: number;\r\n    data: product[];\r\n  }> {\r\n    const queryBuilder = this.productRepo\r\n      .createQueryBuilder('product')\r\n      .leftJoinAndSelect('product.category', 'category')\r\n      .leftJoinAndSelect('product.subCategory', 'subCategory')\r\n      .where('product.isDeleted = :isDeleted', { isDeleted: false });\r\n\r\n    const features = new ApiFeatures(queryBuilder, query || {})\r\n      .filter()\r\n      .sort()\r\n      .paginate();\r\n\r\n    const [data, total] = await features.getManyAndCount();\r\n\r\n    // Transform file paths to full URLs if request object is provided\r\n    const transformedData = req ? this.transformProductUrls(data, req) : data;\r\n\r\n    // Get pagination info from features\r\n    const pagination = features.getPaginationInfo();\r\n\r\n    return {\r\n      status: 'success',\r\n      results: transformedData.length,\r\n      total,\r\n      page: pagination.page,\r\n      limit: pagination.limit,\r\n      data: transformedData,\r\n    };\r\n  }\r\n\r\n  async create(\r\n    dto: CreateProductDto,\r\n    files: UploadFiles = {},\r\n    poster: auth,\r\n    req?: Request,\r\n  ): Promise<product> {\r\n    // 1) بناء الكيان الأساسي\r\n    const Product = new product();\r\n    const existingProduct = await this.productRepo.findOne({\r\n      where: { name: dto.name },\r\n    });\r\n    if (existingProduct)\r\n      throw new BadRequestException('Product name already exists');\r\n    Product.name = dto.name;\r\n    Product.description = dto.description;\r\n    Product.poster = { id: poster.id, username: poster.username };\r\n    Product.category = await this.fetchCategory(dto.categoryId);\r\n    Product.subCategory = await this.fetchSubCategory(\r\n      dto.categoryId,\r\n      dto.subCategoryId,\r\n    );\r\n    Product.publishState = dto.publishState as PublishState;\r\n\r\n    // 2) Save images to file system and store paths in database\r\n    try {\r\n      // Initialize image fields\r\n      Product.imgCover = '';\r\n      Product.imgSizeChart = '';\r\n      Product.imgMeasure = '';\r\n      Product.images = [];\r\n\r\n      // Save cover image if provided\r\n      if (files.imgCover && files.imgCover[0]) {\r\n        Product.imgCover = await this.saveFile(\r\n          files.imgCover[0],\r\n          dto.name,\r\n          'cover',\r\n        );\r\n      }\r\n\r\n      // Save size chart image if provided\r\n      if (files.imgSizeChart && files.imgSizeChart[0]) {\r\n        Product.imgSizeChart = await this.saveFile(\r\n          files.imgSizeChart[0],\r\n          dto.name,\r\n          'sizechart',\r\n        );\r\n      }\r\n\r\n      // Save measure image if provided\r\n      if (files.imgMeasure && files.imgMeasure[0]) {\r\n        Product.imgMeasure = await this.saveFile(\r\n          files.imgMeasure[0],\r\n          dto.name,\r\n          'measure',\r\n        );\r\n      }\r\n\r\n      // Validate that the count of color images matches the count of color names\r\n      if (files.imgColors && files.imgColors.length !== dto.colors?.length) {\r\n        throw new BadRequestException(\r\n          'The count of color images must match the count of color names',\r\n          'COLORS_AND_IMAGES_COUNT_DO_NOT_MATCH',\r\n        );\r\n      }\r\n\r\n      // Save gallery images if provided\r\n      if (files.images && files.images.length > 0) {\r\n        Product.images = await this.saveFiles(files.images, dto.name, 'images');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving images:', error);\r\n      throw new Error('Failed to save product images');\r\n    }\r\n\r\n    // Save color images to file system and validate\r\n    if (files.imgColors && files.imgColors.length > 0) {\r\n      if (!dto.colors || !Array.isArray(dto.colors)) {\r\n        throw new BadRequestException(\r\n          'Colors array is required when uploading color images',\r\n        );\r\n      }\r\n\r\n      // Save all color images first\r\n      const colorImagePaths = await this.saveFiles(\r\n        files.imgColors,\r\n        dto.name,\r\n        'colors',\r\n      );\r\n\r\n      // Map color images to colors array\r\n      Product.colors = colorImagePaths.map((imgPath, index) => ({\r\n        name:\r\n          dto.colors && dto.colors[index]\r\n            ? dto.colors[index].name\r\n            : `Color ${index + 1}`,\r\n        imgColor: imgPath,\r\n      }));\r\n    } else if (dto.colors && Array.isArray(dto.colors)) {\r\n      // Handle colors without images\r\n      Product.colors = dto.colors.map((color) => ({\r\n        name: color.name,\r\n        imgColor: '',\r\n      }));\r\n    }\r\n\r\n    // 3) Categories\r\n    Product.category = await this.fetchCategory(dto.categoryId);\r\n    Product.subCategory = await this.fetchSubCategory(\r\n      dto.categoryId,\r\n      dto.subCategoryId,\r\n    );\r\n\r\n    // Poster is already assigned in the initial setup\r\n\r\n    // 6) Size Details\r\n    // Validate that color names in quantities match the defined colors\r\n    if (\r\n      dto.sizes &&\r\n      Array.isArray(dto.sizes) &&\r\n      dto.colors &&\r\n      Array.isArray(dto.colors)\r\n    ) {\r\n      const colorNames = dto.colors.map((color) => color.name);\r\n      const sizeColorNames = new Set<string>();\r\n\r\n      // Collect all color names used in sizes\r\n      for (const size of dto.sizes) {\r\n        for (const colorQty of size.quantities) {\r\n          sizeColorNames.add(colorQty.colorName);\r\n        }\r\n      }\r\n\r\n      // Convert set to array for comparison\r\n      const uniqueSizeColorNames = Array.from(sizeColorNames);\r\n\r\n      // Check if the count and names match exactly\r\n      if (uniqueSizeColorNames.length !== colorNames.length) {\r\n        throw new BadRequestException(\r\n          'Number of colors in sizes does not match the number of colors defined in the colors list',\r\n        );\r\n      }\r\n\r\n      // Check if all colors in sizes exist in colors array and vice versa\r\n      for (const colorName of uniqueSizeColorNames) {\r\n        if (!colorNames.includes(colorName)) {\r\n          throw new BadRequestException(\r\n            `Color \"${colorName}\" used in sizes is not defined in the colors list`,\r\n          );\r\n        }\r\n      }\r\n\r\n      for (const colorName of colorNames) {\r\n        if (!uniqueSizeColorNames.includes(colorName)) {\r\n          throw new BadRequestException(\r\n            `Color \"${colorName}\" defined in colors list is not used in any size`,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    Product.sizeDetails = dto.sizes.map((size) => ({\r\n      sizeName: size.sizeName,\r\n      price: size.price,\r\n      quantities: size.quantities.map((colorQty) => ({\r\n        colorName: colorQty.colorName,\r\n        quantity: colorQty.quantity,\r\n      })),\r\n    }));\r\n\r\n    // Calculate total quantity\r\n    Product.quantity = Product.getTotalQuantity();\r\n\r\n    try {\r\n      // Save the product to database\r\n      const savedProduct = await this.productRepo.save(Product);\r\n\r\n      // Transform file paths to full URLs if request object is provided\r\n      if (req) {\r\n        const [transformedProduct] = this.transformProductUrls(\r\n          [savedProduct],\r\n          req,\r\n        );\r\n        return transformedProduct;\r\n      }\r\n\r\n      return savedProduct;\r\n    } catch (error) {\r\n      console.error('Error saving product:', error);\r\n      throw new Error('Failed to save product');\r\n    }\r\n  }\r\n\r\n  /** ----------  Update  ---------- */\r\n  async update(\r\n    id: number,\r\n    dto: UpdateProductDto,\r\n    files: UploadFiles = {},\r\n    req: Request,\r\n  ): Promise<product> {\r\n    const product = await this.productRepo.findOne({\r\n      where: { id },\r\n      relations: ['category', 'subCategory', 'poster'],\r\n    });\r\n    if (!product) throw new NotFoundException('Product not found');\r\n    if (dto.name) product.name = dto.name;\r\n    if (dto.description) product.description = dto.description;\r\n    if (dto.categoryId)\r\n      product.category = await this.fetchCategory(dto.categoryId);\r\n    if (dto.subCategoryId)\r\n      product.subCategory = await this.fetchSubCategory(\r\n        dto.categoryId as number,\r\n        dto.subCategoryId,\r\n      );\r\n    if (dto.publishState) product.publishState = dto.publishState;\r\n\r\n    // Update files if provided - save to file system and handle old files properly\r\n    try {\r\n      // Handle product images (multiple files)\r\n      if (files.images && files.images.length > 0) {\r\n        // Delete old images if they exist\r\n        if (product.images && product.images.length > 0) {\r\n          this.fileStorageService.deleteFiles(product.images);\r\n        }\r\n        // Save new images\r\n        product.images = await this.saveFiles(\r\n          files.images,\r\n          product.name,\r\n          'images',\r\n        );\r\n      }\r\n\r\n      // Handle product cover image (single file)\r\n      if (files.imgCover && files.imgCover[0]) {\r\n        // Delete old cover image if it exists\r\n        if (product.imgCover) {\r\n          this.fileStorageService.deleteFile(product.imgCover);\r\n        }\r\n        // Save new cover image\r\n        product.imgCover = await this.saveFile(\r\n          files.imgCover[0],\r\n          product.name,\r\n          'cover',\r\n        );\r\n      }\r\n\r\n      // Handle size chart image (single file)\r\n      if (files.imgSizeChart && files.imgSizeChart[0]) {\r\n        // Delete old size chart image if it exists\r\n        if (product.imgSizeChart) {\r\n          this.fileStorageService.deleteFile(product.imgSizeChart);\r\n        }\r\n        // Save new size chart image\r\n        product.imgSizeChart = await this.saveFile(\r\n          files.imgSizeChart[0],\r\n          product.name,\r\n          'sizechart',\r\n        );\r\n      }\r\n\r\n      // Handle measure image (single file)\r\n      if (files.imgMeasure && files.imgMeasure[0]) {\r\n        // Delete old measure image if it exists\r\n        if (product.imgMeasure) {\r\n          this.fileStorageService.deleteFile(product.imgMeasure);\r\n        }\r\n        // Save new measure image\r\n        product.imgMeasure = await this.saveFile(\r\n          files.imgMeasure[0],\r\n          product.name,\r\n          'measure',\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling product files:', error);\r\n      throw new Error(`Failed to process product files: ${error.message}`);\r\n    }\r\n\r\n    // Update category and subcategory if provided\r\n    if (dto.categoryId)\r\n      product.category = await this.fetchCategory(dto.categoryId);\r\n    if (dto.subCategoryId && dto.categoryId)\r\n      product.subCategory = await this.fetchSubCategory(\r\n        dto.categoryId,\r\n        dto.subCategoryId,\r\n      );\r\n\r\n    // Update size details if provided\r\n    if (dto.sizes && dto.sizes.length > 0) {\r\n      product.sizeDetails = dto.sizes.map((size, index) => ({\r\n        sizeName: size?.sizeName,\r\n        price: size?.price || product.sizeDetails[index].price,\r\n        quantities: size?.quantities\r\n          ? size.quantities.map((q, index) => ({\r\n              colorName: q.colorName,\r\n              quantity:\r\n                q.quantity ||\r\n                product.sizeDetails[index].quantities[index].quantity,\r\n              // imgColors:\r\n              //   q.imgColors ||\r\n              //   product.sizeDetails[index].quantities[index].imgColors,\r\n            }))\r\n          : product.sizeDetails[index].quantities,\r\n      }));\r\n    }\r\n\r\n    // Update colors if provided\r\n    try {\r\n      if (\r\n        dto.colors &&\r\n        dto.colors.length > 0 &&\r\n        files.imgColors &&\r\n        files.imgColors.length > 0\r\n      ) {\r\n        // Delete old color images if they exist\r\n        if (product.colors && product.colors.length > 0) {\r\n          const oldColorImages = product.colors\r\n            .map((color) => color.imgColor)\r\n            .filter(\r\n              (imgPath): imgPath is string => !!imgPath && imgPath.length > 0,\r\n            );\r\n\r\n          if (oldColorImages.length > 0) {\r\n            this.fileStorageService.deleteFiles(oldColorImages);\r\n          }\r\n        }\r\n\r\n        // Save new color images to file system\r\n        const colorImagePaths = await this.saveFiles(\r\n          files.imgColors,\r\n          product.name,\r\n          'colors',\r\n        );\r\n\r\n        product.colors = dto.colors.map((color, index) => ({\r\n          name:\r\n            color.name ||\r\n            (product.colors && product.colors[index]\r\n              ? product.colors[index].name\r\n              : ''),\r\n          imgColor:\r\n            colorImagePaths[index] ||\r\n            (product.colors && product.colors[index]\r\n              ? product.colors[index].imgColor\r\n              : ''),\r\n        }));\r\n      } else if (dto.colors && dto.colors.length > 0) {\r\n        // Update color names but keep existing image paths\r\n        product.colors = dto.colors.map((color, index) => ({\r\n          name:\r\n            color.name ||\r\n            (product.colors && product.colors[index]\r\n              ? product.colors[index].name\r\n              : ''),\r\n          imgColor:\r\n            product.colors && product.colors[index]\r\n              ? product.colors[index].imgColor\r\n              : '',\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error handling product color images:', error);\r\n      throw new Error(\r\n        `Failed to process product color images: ${error.message}`,\r\n      );\r\n    }\r\n    product.updatedAt = new Date();\r\n\r\n    // Use update method for better efficiency (doesn't load entity, doesn't trigger hooks)\r\n    await this.productRepo.update(id, product);\r\n\r\n    // Fetch the updated product to return it\r\n    const updatedProduct = await this.productRepo.findOne({\r\n      where: { id },\r\n      relations: ['category', 'subCategory', 'poster'],\r\n    });\r\n\r\n    if (!updatedProduct) {\r\n      throw new NotFoundException(\r\n        `Product with ID ${id} not found after update`,\r\n      );\r\n    }\r\n\r\n    // Transform file paths to full URLs if request object is provided\r\n    if (req) {\r\n      const [transformedProduct] = this.transformProductUrls(\r\n        [updatedProduct],\r\n        req,\r\n      );\r\n      return transformedProduct;\r\n    }\r\n\r\n    return updatedProduct;\r\n  }\r\n\r\n  /** ----------  Helpers  ---------- */\r\n  private async fetchCategory(id: number): Promise<any> {\r\n    const cat = await this.categoryRepo.findOne({\r\n      where: { id },\r\n      relations: ['subCategories'],\r\n    });\r\n    if (!cat) throw new NotFoundException(`Category ${id} not found`);\r\n\r\n    return { id: cat.id, name: cat.name };\r\n  }\r\n\r\n  private async fetchSubCategory(idCat: number, idSub: number): Promise<any> {\r\n    const sub = await this.subCategoryRepo.findOneBy({\r\n      id: idSub,\r\n      category: { id: idCat },\r\n    });\r\n    if (!sub)\r\n      throw new NotFoundException(\r\n        'SubCategory not found or not exist in this category',\r\n      );\r\n    return { id: sub.id, name: sub.name };\r\n  }\r\n\r\n  async remove(\r\n    id: number,\r\n  ): Promise<{ success: boolean; product?: any; message?: string }> {\r\n    const product = await this.productRepo.findOneBy({ id });\r\n    if (!product) throw new NotFoundException('Product not found');\r\n\r\n    const productInfo = {\r\n      id: product.id,\r\n      name: product.name,\r\n    };\r\n    await this.productRepo.save(product);\r\n    // Delete the entire product directory\r\n    const productPath = `products/${product.name.replace(/\\s+/g, '_').toLowerCase()}`;\r\n    this.fileStorageService.deleteDirectory(productPath);\r\n    try {\r\n      await this.productRepo.remove(product);\r\n      return {\r\n        success: true,\r\n        product: productInfo,\r\n        message: 'Product deleted successfully',\r\n      };\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      return {\r\n        success: false,\r\n        message: `Error deleting product: ${error.message}`,\r\n      };\r\n    }\r\n  }\r\n\r\n  async findOne(id: number): Promise<any> {\r\n    const product = await this.productRepo.findOne({\r\n      where: { id },\r\n      relations: ['category', 'subCategory'],\r\n    });\r\n\r\n    if (!product) {\r\n      throw new NotFoundException(`Product with ID ${id} not found`);\r\n    }\r\n    return product;\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    const productPath = `products`;\r\n    this.fileStorageService.deleteDirectory(productPath);\r\n    await this.productRepo\r\n      .createQueryBuilder()\r\n      .delete()\r\n      .from(product)\r\n      .where('1 = 1')\r\n      .execute();\r\n  }\r\n}\r\n"],"names":["ProductService","saveFiles","files","productName","subDirectory","productPath","replace","toLowerCase","fileStorageService","saveFile","file","uploadFiles","result","images","length","imgCover","imgSizeChart","imgMeasure","imgColors","transformProductUrls","products","req","protocol","host","get","baseUrl","map","product","transformed","Object","create","getPrototypeOf","getOwnPropertyDescriptors","startsWith","Array","isArray","img","colors","color","imgColor","getAllProducts","query","queryBuilder","productRepo","createQueryBuilder","leftJoinAndSelect","where","isDeleted","features","ApiFeatures","filter","sort","paginate","data","total","getManyAndCount","transformedData","pagination","getPaginationInfo","status","results","page","limit","dto","poster","Product","existingProduct","findOne","name","BadRequestException","description","id","username","category","fetchCategory","categoryId","subCategory","fetchSubCategory","subCategoryId","publishState","error","console","Error","colorImagePaths","imgPath","index","sizes","colorNames","sizeColorNames","Set","size","colorQty","quantities","add","colorName","uniqueSizeColorNames","from","includes","sizeDetails","sizeName","price","quantity","getTotalQuantity","savedProduct","save","transformedProduct","update","relations","NotFoundException","deleteFiles","deleteFile","message","q","oldColorImages","updatedAt","Date","updatedProduct","cat","categoryRepo","idCat","idSub","sub","subCategoryRepo","findOneBy","remove","productInfo","deleteDirectory","success","deleteAll","delete","execute","constructor","configService"],"mappings":"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"}