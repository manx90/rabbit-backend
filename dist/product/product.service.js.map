{"version":3,"sources":["../../src/product/product.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { product } from './entities/product.entity';\nimport { category, subCategory } from './entities/Category.entity';\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { PublishState } from 'src/common/interfaces/entity.interface';\nimport { ApiFeatures } from 'src/common/utils/api-features';\nimport { Request } from 'express';\nimport { ParsedQs } from 'qs';\nimport { FileStorageService } from '../file-storage/file-storage.service';\nimport { ConfigService } from '@nestjs/config';\n\ninterface UploadFiles {\n  images?: Express.Multer.File[];\n  imgCover?: Express.Multer.File[];\n  imgSizeChart?: Express.Multer.File[];\n  imgMeasure?: Express.Multer.File[];\n  imgColors?: Express.Multer.File[];\n}\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(product)\n    private readonly productRepo: Repository<product>,\n    @InjectRepository(category)\n    private readonly categoryRepo: Repository<category>,\n    @InjectRepository(subCategory)\n    private readonly subCategoryRepo: Repository<subCategory>,\n    private readonly fileStorageService: FileStorageService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * Save files to storage and return their paths\n   * This replaces the old mapFiles method that converted to base64\n   */\n  private async saveFiles(\n    files: Express.Multer.File[] = [],\n    productName: string,\n    subDirectory: string,\n  ): Promise<string[]> {\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    return await this.fileStorageService.saveFiles(files, productPath);\n  }\n\n  /**\n   * Save a single file to storage and return its path\n   */\n  private async saveFile(\n    file: Express.Multer.File,\n    productName: string,\n    subDirectory: string,\n  ): Promise<string> {\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    return await this.fileStorageService.saveFile(file, productPath);\n  }\n\n  /**\n   * Transform product file paths to full URLs\n   * @param products Array of product entities\n   * @param req Express Request object\n   * @returns Products with transformed URLs\n   */\n  private transformProductUrls(products: product[], req: Request): any[] {\n    const protocol = req.protocol || 'http';\n    const host = req.get('host') || 'localhost:3000';\n    const baseUrl = `${protocol}://${host}`;\n\n    return products.map((product) => {\n      // Create a clone of the product to avoid modifying the original\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const transformed = Object.create(\n        Object.getPrototypeOf(product),\n        Object.getOwnPropertyDescriptors(product),\n      );\n      // Transform image cover URL\n      if (transformed.imgCover && !transformed.imgCover.startsWith('http')) {\n        transformed.imgCover = `${baseUrl}/uploads/${transformed.imgCover}`;\n      }\n      // Transform size chart image URL\n      if (\n        transformed.imgSizeChart &&\n        !transformed.imgSizeChart.startsWith('http')\n      ) {\n        transformed.imgSizeChart = `${baseUrl}/uploads/${transformed.imgSizeChart}`;\n      }\n      // Transform measure image URL\n      if (\n        transformed.imgMeasure &&\n        !transformed.imgMeasure.startsWith('http')\n      ) {\n        transformed.imgMeasure = `${baseUrl}/uploads/${transformed.imgMeasure}`;\n      }\n      // Transform product images URLs\n      if (transformed.images && Array.isArray(transformed.images)) {\n        transformed.images = transformed.images.map((img: string) =>\n          img && !img.startsWith('http') ? `${baseUrl}/uploads/${img}` : img,\n        );\n      }\n      // Transform color images URLs\n      if (transformed.colors && Array.isArray(transformed.colors)) {\n        transformed.colors = transformed.colors.map((color) => ({\n          ...color,\n          imgColor:\n            color.imgColor && !color.imgColor.startsWith('http')\n              ? `${baseUrl}/uploads/${color.imgColor}`\n              : color.imgColor,\n        }));\n      }\n\n      return transformed;\n    });\n  }\n\n  /** ----------  Get All Products  ---------- */\n  async getAllProducts(\n    query: ParsedQs,\n    req?: Request,\n  ): Promise<{\n    status: string;\n    results: number;\n    total: number;\n    page: number;\n    limit: number;\n    data: product[];\n  }> {\n    const queryBuilder = this.productRepo\n      .createQueryBuilder('product')\n      .leftJoinAndSelect('product.category', 'category')\n      .leftJoinAndSelect('product.subCategory', 'subCategory')\n      .where('product.isDeleted = :isDeleted', { isDeleted: false });\n\n    const features = new ApiFeatures(queryBuilder, query || {})\n      .filter()\n      .sort()\n      .paginate();\n\n    const [data, total] = await features.getManyAndCount();\n\n    // Transform file paths to full URLs if request object is provided\n    const transformedData = req ? this.transformProductUrls(data, req) : data;\n\n    // Get pagination info from features\n    const pagination = features.getPaginationInfo();\n\n    return {\n      status: 'success',\n      results: transformedData.length,\n      total,\n      page: pagination.page,\n      limit: pagination.limit,\n      data: transformedData,\n    };\n  }\n\n  async create(\n    dto: CreateProductDto,\n    files: UploadFiles = {},\n    poster: auth,\n    req?: Request,\n  ): Promise<product> {\n    // 1) بناء الكيان الأساسي\n    const Product = new product();\n    const existingProduct = await this.productRepo.findOne({\n      where: { name: dto.name },\n    });\n    if (existingProduct)\n      throw new BadRequestException('Product name already exists');\n    Product.name = dto.name;\n    Product.description = dto.description;\n    Product.poster = poster;\n    Product.category = await this.fetchCategory(dto.categoryId);\n    Product.subCategory = await this.fetchSubCategory(\n      dto.categoryId,\n      dto.subCategoryId,\n    );\n    Product.publishState = dto.publishState as PublishState;\n\n    // 2) Save images to file system and store paths in database\n    try {\n      // Initialize image fields\n      Product.imgCover = '';\n      Product.imgSizeChart = '';\n      Product.imgMeasure = '';\n      Product.images = [];\n\n      // Save cover image if provided\n      if (files.imgCover && files.imgCover[0]) {\n        Product.imgCover = await this.saveFile(\n          files.imgCover[0],\n          dto.name,\n          'cover',\n        );\n      }\n\n      // Save size chart image if provided\n      if (files.imgSizeChart && files.imgSizeChart[0]) {\n        Product.imgSizeChart = await this.saveFile(\n          files.imgSizeChart[0],\n          dto.name,\n          'sizechart',\n        );\n      }\n\n      // Save measure image if provided\n      if (files.imgMeasure && files.imgMeasure[0]) {\n        Product.imgMeasure = await this.saveFile(\n          files.imgMeasure[0],\n          dto.name,\n          'measure',\n        );\n      }\n\n      // Validate that the count of color images matches the count of color names\n      if (files.imgColors && files.imgColors.length !== dto.colors?.length) {\n        throw new BadRequestException(\n          'The count of color images must match the count of color names',\n          'COLORS_AND_IMAGES_COUNT_DO_NOT_MATCH',\n        );\n      }\n\n      // Save gallery images if provided\n      if (files.images && files.images.length > 0) {\n        Product.images = await this.saveFiles(files.images, dto.name, 'images');\n      }\n    } catch (error) {\n      console.error('Error saving images:', error);\n      throw new Error('Failed to save product images');\n    }\n\n    // Save color images to file system and validate\n    if (files.imgColors && files.imgColors.length > 0) {\n      if (!dto.colors || !Array.isArray(dto.colors)) {\n        throw new BadRequestException(\n          'Colors array is required when uploading color images',\n        );\n      }\n\n      // Save all color images first\n      const colorImagePaths = await this.saveFiles(\n        files.imgColors,\n        dto.name,\n        'colors',\n      );\n\n      // Map color images to colors array\n      Product.colors = colorImagePaths.map((imgPath, index) => ({\n        name:\n          dto.colors && dto.colors[index]\n            ? dto.colors[index].name\n            : `Color ${index + 1}`,\n        imgColor: imgPath,\n      }));\n    } else if (dto.colors && Array.isArray(dto.colors)) {\n      // Handle colors without images\n      Product.colors = dto.colors.map((color) => ({\n        name: color.name,\n        imgColor: '',\n      }));\n    }\n\n    // 3) Categories\n    Product.category = await this.fetchCategory(dto.categoryId);\n    Product.subCategory = await this.fetchSubCategory(\n      dto.categoryId,\n      dto.subCategoryId,\n    );\n\n    // Poster is already assigned in the initial setup\n\n    // 6) Size Details\n    Product.sizeDetails = dto.sizes.map((size) => ({\n      sizeName: size.sizeName,\n      price: size.price,\n      quantities: size.quantities.map((colorQty) => ({\n        colorName: colorQty.colorName,\n        quantity: colorQty.quantity,\n        imgColors: colorQty.imgColors || '', // Use provided imgColors or empty string\n      })),\n    }));\n\n    // Calculate total quantity\n    Product.quantity = Product.getTotalQuantity();\n\n    try {\n      // Save the product to database\n      const savedProduct = await this.productRepo.save(Product);\n\n      // Transform file paths to full URLs if request object is provided\n      if (req) {\n        const [transformedProduct] = this.transformProductUrls(\n          [savedProduct],\n          req,\n        );\n        return transformedProduct;\n      }\n\n      return savedProduct;\n    } catch (error) {\n      console.error('Error saving product:', error);\n      throw new Error('Failed to save product');\n    }\n  }\n\n  /** ----------  Update  ---------- */\n  async update(\n    id: number,\n    dto: UpdateProductDto,\n    files: UploadFiles = {},\n    req: Request,\n  ): Promise<product> {\n    const product = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory', 'poster'],\n    });\n    if (!product) throw new NotFoundException('Product not found');\n    if (dto.name) product.name = dto.name;\n    if (dto.description) product.description = dto.description;\n    if (dto.categoryId)\n      product.category = await this.fetchCategory(dto.categoryId);\n    if (dto.subCategoryId)\n      product.subCategory = await this.fetchSubCategory(\n        dto.categoryId as number,\n        dto.subCategoryId,\n      );\n    if (dto.publishState) product.publishState = dto.publishState;\n\n    // Update files if provided - save to file system\n    if (files.images && files.images.length > 0) {\n      product.images = await this.saveFiles(\n        files.images,\n        product.name,\n        'images',\n      );\n    }\n\n    if (files.imgCover && files.imgCover[0]) {\n      product.imgCover = await this.saveFile(\n        files.imgCover[0],\n        product.name,\n        'cover',\n      );\n    }\n\n    if (files.imgSizeChart && files.imgSizeChart[0]) {\n      product.imgSizeChart = await this.saveFile(\n        files.imgSizeChart[0],\n        product.name,\n        'sizechart',\n      );\n    }\n\n    if (files.imgMeasure && files.imgMeasure[0]) {\n      product.imgMeasure = await this.saveFile(\n        files.imgMeasure[0],\n        product.name,\n        'measure',\n      );\n    }\n\n    // Update category and subcategory if provided\n    if (dto.categoryId)\n      product.category = await this.fetchCategory(dto.categoryId);\n    if (dto.subCategoryId && dto.categoryId)\n      product.subCategory = await this.fetchSubCategory(\n        dto.categoryId,\n        dto.subCategoryId,\n      );\n\n    // Update size details if provided\n    if (dto.sizes && dto.sizes.length > 0) {\n      product.sizeDetails = dto.sizes.map((size, index) => ({\n        sizeName: size?.sizeName,\n        price: size?.price || product.sizeDetails[index].price,\n        quantities: size?.quantities\n          ? size.quantities.map((q, index) => ({\n              colorName: q.colorName,\n              quantity:\n                q.quantity ||\n                product.sizeDetails[index].quantities[index].quantity,\n              // imgColors:\n              //   q.imgColors ||\n              //   product.sizeDetails[index].quantities[index].imgColors,\n            }))\n          : product.sizeDetails[index].quantities,\n      }));\n    }\n\n    // Update colors if provided\n    if (\n      dto.colors &&\n      dto.colors.length > 0 &&\n      files.imgColors &&\n      files.imgColors.length > 0\n    ) {\n      // Save new color images to file system\n      const colorImagePaths = await this.saveFiles(\n        files.imgColors,\n        product.name,\n        'colors',\n      );\n\n      product.colors = dto.colors.map((color, index) => ({\n        name:\n          color.name ||\n          (product.colors[index] ? product.colors[index].name : ''),\n        imgColor:\n          colorImagePaths[index] ||\n          (product.colors[index] ? product.colors[index].imgColor : ''),\n      }));\n    } else if (dto.colors && dto.colors.length > 0) {\n      // Update color names but keep existing image paths\n      product.colors = dto.colors.map((color, index) => ({\n        name:\n          color.name ||\n          (product.colors[index] ? product.colors[index].name : ''),\n        imgColor: product.colors[index] ? product.colors[index].imgColor : '',\n      }));\n    }\n\n    // The BeforeUpdate hook will automatically update the total quantity\n    const updatedProduct = await this.productRepo.save(product);\n\n    // Transform file paths to full URLs if request object is provided\n    if (req) {\n      const [transformedProduct] = this.transformProductUrls(\n        [updatedProduct],\n        req,\n      );\n      return transformedProduct;\n    }\n\n    return updatedProduct;\n  }\n\n  /** ----------  Helpers  ---------- */\n  private async fetchCategory(id: number): Promise<category> {\n    const cat = await this.categoryRepo.findOne({\n      where: { id },\n      relations: ['subCategories'],\n    });\n    if (!cat) throw new NotFoundException(`Category ${id} not found`);\n\n    // Update subCategoryIds\n    if (cat.subCategories && cat.subCategories.length > 0) {\n      cat.subCategoryIds = cat.subCategories.map((sub) => sub.id);\n    } else {\n      cat.subCategoryIds = [];\n    }\n    await this.categoryRepo.save(cat);\n\n    return cat;\n  }\n\n  private async fetchSubCategory(\n    idCat: number,\n    idSub: number,\n  ): Promise<subCategory> {\n    const sub = await this.subCategoryRepo.findOneBy({\n      id: idSub,\n      category: { id: idCat },\n    });\n    if (!sub)\n      throw new NotFoundException(\n        'SubCategory not found or not exist in this category',\n      );\n    return sub;\n  }\n\n  async remove(id: number): Promise<void> {\n    const product = await this.productRepo.findOneBy({ id });\n    if (!product) throw new NotFoundException('Product not found');\n    product.isDeleted = true;\n    await this.productRepo.save(product);\n    // Delete the entire product directory\n    const productPath = `products/${product.name.replace(/\\s+/g, '_').toLowerCase()}`;\n    this.fileStorageService.deleteDirectory(productPath);\n  }\n\n  async findOne(id: number): Promise<product> {\n    const product = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory'],\n    });\n\n    if (!product) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return product;\n  }\n\n  async deleteAll(): Promise<void> {\n    const productPath = `products`;\n    this.fileStorageService.deleteDirectory(productPath);\n    await this.productRepo\n      .createQueryBuilder()\n      .delete()\n      .from(product)\n      .where('1 = 1')\n      .execute();\n  }\n}\n"],"names":["ProductService","saveFiles","files","productName","subDirectory","productPath","replace","toLowerCase","fileStorageService","saveFile","file","transformProductUrls","products","req","protocol","host","get","baseUrl","map","product","transformed","Object","create","getPrototypeOf","getOwnPropertyDescriptors","imgCover","startsWith","imgSizeChart","imgMeasure","images","Array","isArray","img","colors","color","imgColor","getAllProducts","query","queryBuilder","productRepo","createQueryBuilder","leftJoinAndSelect","where","isDeleted","features","ApiFeatures","filter","sort","paginate","data","total","getManyAndCount","transformedData","pagination","getPaginationInfo","status","results","length","page","limit","dto","poster","Product","existingProduct","findOne","name","BadRequestException","description","category","fetchCategory","categoryId","subCategory","fetchSubCategory","subCategoryId","publishState","imgColors","error","console","Error","colorImagePaths","imgPath","index","sizeDetails","sizes","size","sizeName","price","quantities","colorQty","colorName","quantity","getTotalQuantity","savedProduct","save","transformedProduct","update","id","relations","NotFoundException","q","updatedProduct","cat","categoryRepo","subCategories","subCategoryIds","sub","idCat","idSub","subCategoryRepo","findOneBy","remove","deleteDirectory","deleteAll","delete","from","execute","constructor","configService"],"mappings":"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"}