{"version":3,"sources":["../../../src/product/entities/product.entity.ts"],"sourcesContent":["import {\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  Entity,\r\n  ManyToOne,\r\n  BeforeInsert,\r\n  JoinColumn,\r\n  BeforeUpdate,\r\n  // OneToOne,\r\n} from 'typeorm';\r\nimport { subCategory, category } from './Category.entity';\r\nimport {\r\n  SizeDetail,\r\n  PublishState,\r\n  ColorDetail,\r\n} from '../../common/interfaces/entity.interface';\r\nimport { auth } from 'src/auth/entities/auth.entity';\r\n\r\nexport interface ProductResponse {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  sizes: string[];\r\n  colors: string[];\r\n  isActive: boolean;\r\n  PosterAt: Date | null;\r\n}\r\n\r\n@Entity()\r\nexport class product {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({ type: 'varchar', length: 255 })\r\n  name: string;\r\n\r\n  @Column({ type: 'text', nullable: true })\r\n  description: string;\r\n\r\n  @Column({ type: 'json', nullable: true })\r\n  images: string[];\r\n\r\n  @Column({ type: 'longtext', nullable: true })\r\n  imgCover: string;\r\n\r\n  @Column({ type: 'longtext', nullable: true })\r\n  imgSizeChart: string;\r\n\r\n  @Column({ type: 'longtext', nullable: true })\r\n  imgMeasure: string;\r\n\r\n  @Column({ type: 'json' })\r\n  sizeDetails: SizeDetail[];\r\n\r\n  @Column({\r\n    type: 'enum',\r\n    enum: PublishState,\r\n    default: PublishState.DRAFT,\r\n  })\r\n  publishState: PublishState;\r\n\r\n  @Column({ type: 'json', nullable: true })\r\n  colors: ColorDetail[];\r\n\r\n  @ManyToOne(() => category, (category) => category.products)\r\n  @JoinColumn({ name: 'categoryId' })\r\n  category: { id: number; name: string };\r\n\r\n  @ManyToOne(() => subCategory, (subCategory) => subCategory.products, {\r\n    onDelete: 'CASCADE',\r\n  })\r\n  @JoinColumn({ name: 'subCategoryId' })\r\n  subCategory: subCategory;\r\n\r\n  @ManyToOne(() => auth, { nullable: true })\r\n  @JoinColumn({ name: 'posterId' })\r\n  poster: { id: string; username: string };\r\n\r\n  @Column({ type: 'decimal', default: null })\r\n  quantity: number;\r\n\r\n  @Column({ type: 'boolean', default: false })\r\n  isFeatured: boolean;\r\n\r\n  @Column({ type: 'boolean', default: false })\r\n  isTrending: boolean;\r\n\r\n  @Column({ type: 'boolean', default: true })\r\n  isNew: boolean;\r\n\r\n  @Column({ type: 'boolean', default: false })\r\n  isBestSeller: boolean;\r\n\r\n  @Column({ type: 'boolean', default: false })\r\n  isDeleted: boolean;\r\n\r\n  @Column({ type: 'int', default: 0 })\r\n  sales: number;\r\n\r\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\r\n  createdAt: Date;\r\n\r\n  @Column({ type: 'timestamp', default: null, nullable: true })\r\n  PosterAt: Date;\r\n\r\n  @Column({ type: 'timestamp', default: null, nullable: true })\r\n  updatedAt: Date;\r\n  Product: { id: string; username: string };\r\n\r\n  /**\r\n   * Calculate total quantity from all sizes and colors\r\n   */\r\n  getTotalQuantity(): number {\r\n    if (!this.sizeDetails) return 0;\r\n\r\n    return this.sizeDetails.reduce((total, size) => {\r\n      const sizeTotal = size.quantities.reduce((sizeSum, colorQty) => {\r\n        return sizeSum + colorQty.quantity;\r\n      }, 0);\r\n      return total + sizeTotal;\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Get all available colors from all sizes\r\n   */\r\n  getAvailableColors(): Array<{ name: string; imgColor?: string }> {\r\n    if (!this.sizeDetails) return [];\r\n\r\n    const colorsMap = new Map<string, string>();\r\n\r\n    this.sizeDetails.forEach((size) => {\r\n      size.quantities.forEach((colorQty) => {\r\n        if (colorQty.quantity > 0) {\r\n          colorsMap.set(colorQty.colorName, '');\r\n        }\r\n      });\r\n    });\r\n\r\n    return Array.from(colorsMap.entries()).map(([name, imgColor]) => ({\r\n      name,\r\n      imgColor,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get all available sizes\r\n   */\r\n  getAvailableSizes(): string[] {\r\n    if (!this.sizeDetails) return [];\r\n\r\n    return this.sizeDetails\r\n      .filter((size) => size.quantities.some((q) => q.quantity > 0))\r\n      .map((size) => size.sizeName);\r\n  }\r\n\r\n  /**\r\n   * Before insert hook - set isActive based on publishState\r\n  //  */\r\n  // @BeforeInsert()\r\n  // @BeforeUpdate()\r\n  // setActiveStatus() {\r\n  //   this.isActive = this.publishState === PublishState.PUBLISHED;\r\n  // }\r\n\r\n  /**\r\n   * Before insert hook - validate size details\r\n   */\r\n  @BeforeInsert()\r\n  @BeforeUpdate()\r\n  validateSizeDetails() {\r\n    if (!this.sizeDetails || this.sizeDetails.length === 0) {\r\n      throw new Error('Product must have at least one size detail');\r\n    }\r\n\r\n    this.sizeDetails.forEach((size) => {\r\n      if (!size.sizeName || size.price <= 0) {\r\n        throw new Error('Each size must have a valid name and price');\r\n      }\r\n\r\n      if (!size.quantities || size.quantities.length === 0) {\r\n        throw new Error('Each size must have at least one color quantity');\r\n      }\r\n\r\n      size.quantities.forEach((colorQty) => {\r\n        if (!colorQty.colorName || colorQty.quantity < 0) {\r\n          throw new Error(\r\n            'Each color quantity must have a valid color name and non-negative quantity',\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Before insert hook - validate size details\r\n   */\r\n  @BeforeInsert()\r\n  @BeforeUpdate()\r\n  validateTotalQuantity() {\r\n    if (!this.sizeDetails) return;\r\n\r\n    const totalQuantity = this.sizeDetails.reduce(\r\n      (total, size) =>\r\n        total +\r\n        size.quantities.reduce((sum, colorQty) => sum + colorQty.quantity, 0),\r\n      0,\r\n    );\r\n\r\n    this.quantity = totalQuantity;\r\n  }\r\n}\r\n"],"names":["product","getTotalQuantity","sizeDetails","reduce","total","size","sizeTotal","quantities","sizeSum","colorQty","quantity","getAvailableColors","colorsMap","Map","forEach","set","colorName","Array","from","entries","map","name","imgColor","getAvailableSizes","filter","some","q","sizeName","validateSizeDetails","length","Error","price","validateTotalQuantity","totalQuantity","sum","type","nullable","enum","PublishState","default","DRAFT","category","products","subCategory","onDelete","auth"],"mappings":"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"}