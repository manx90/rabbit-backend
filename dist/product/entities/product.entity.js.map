{"version":3,"sources":["../../../src/product/entities/product.entity.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { Transform } from 'class-transformer';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { SizeTable } from './sizeTable.entity';\nimport {\n  AfterInsert,\n  AfterLoad,\n  AfterUpdate,\n  BeforeInsert,\n  BeforeUpdate,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport {\n  ColorDetail,\n  PublishState,\n  SizeDetail,\n} from '../../common/interfaces/entity.interface';\nimport { category, subCategory } from './Category.entity';\n\nexport interface ProductResponse {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  sizes: string[];\n  colors: string[];\n  isActive: boolean;\n  PosterAt: Date | null;\n}\n\nexport enum Season {\n  winter = 'winter',\n  summer = 'summer',\n  spring_autumn = 'spring_autumn',\n  all = 'all',\n}\n\n@Entity()\nexport class product {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: Season,\n    default: Season.all,\n    nullable: true,\n  })\n  season: Season;\n\n  @Column({\n    type: 'simple-array',\n    nullable: true,\n  })\n  @Transform(({ value }) => {\n    const newVal = value?.map((item) => item.trim());\n    return newVal;\n  })\n  wordKeys: string[];\n\n  @Column({ type: 'longtext', nullable: true })\n  videoLink: string;\n\n  @Column({ type: 'text', nullable: true })\n  description: string;\n\n  @Column({ type: 'json', nullable: true })\n  images: string[];\n\n  @Column({ type: 'simple-array', nullable: true })\n  productIdsCollection: number[];\n\n  @Column({ type: 'longtext', nullable: true })\n  imgCover: string;\n\n  @Column({ type: 'longtext', nullable: true })\n  imgSizeChart: string;\n\n  @Column({ type: 'longtext', nullable: true })\n  imgMeasure: string;\n\n  @Column({ type: 'json' })\n  sizeDetails: SizeDetail[];\n\n  @Column({\n    type: 'enum',\n    enum: PublishState,\n    default: PublishState.PUBLISHED,\n  })\n  publishState: PublishState;\n\n  @Column({ type: 'boolean', default: false, nullable: true })\n  isManualPublishState: boolean;\n\n  @Column({ type: 'json', nullable: true })\n  colors: ColorDetail[];\n\n  @ManyToOne(() => category, (category) => category.products)\n  @JoinColumn({ name: 'categoryId' })\n  category: { id: number; name: string };\n\n  @ManyToOne(() => subCategory, (subCategory) => subCategory.products, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'subCategoryId' })\n  subCategory: subCategory;\n\n  @ManyToOne(() => auth, { nullable: true })\n  @JoinColumn({ name: 'posterId' })\n  poster: { id: string; username: string };\n\n  @Column({ type: 'decimal', default: null })\n  quantity: number;\n\n  @Column({ type: 'boolean', default: false })\n  isFeatured: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isTrending: boolean;\n\n  @Column({ type: 'boolean', default: true })\n  isNew: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isBestSeller: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isDeleted: boolean;\n\n  @Column({ type: 'int', default: 0 })\n  sales: number;\n\n  @Column({\n    type: 'timestamp',\n    default: null,\n    nullable: true,\n  })\n  datePublished: Date;\n\n  @ManyToOne(() => SizeTable, { nullable: true })\n  @JoinColumn({ name: 'sizeTableId' })\n  sizeTable: SizeTable | null;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: null, nullable: true })\n  PosterAt: Date;\n\n  @Column({ type: 'timestamp', default: null, nullable: true })\n  updatedAt: Date;\n  Product: { id: string; username: string };\n\n  /**\n   * Calculate total quantity from all sizes and colors\n   */\n  getTotalQuantity(): number {\n    if (!this.sizeDetails) return 0;\n\n    return this.sizeDetails.reduce((total, size) => {\n      const sizeTotal = size.quantities.reduce((sizeSum, colorQty) => {\n        return sizeSum + colorQty.quantity;\n      }, 0);\n      return total + sizeTotal;\n    }, 0);\n  }\n\n  /**\n   * Get all available colors from all sizes\n   */\n  getAvailableColors(): Array<{ name: string; imgColor?: string }> {\n    if (!this.sizeDetails) return [];\n\n    const colorsMap = new Map<string, string>();\n\n    this.sizeDetails.forEach((size) => {\n      size.quantities.forEach((colorQty) => {\n        if (colorQty.quantity > 0) {\n          colorsMap.set(colorQty.colorName, '');\n        }\n      });\n    });\n\n    return Array.from(colorsMap.entries()).map(([name, imgColor]) => ({\n      name,\n      imgColor,\n    }));\n  }\n\n  /**\n   * Get all available sizes\n   */\n  getAvailableSizes(): string[] {\n    if (!this.sizeDetails) return [];\n\n    return this.sizeDetails\n      .filter((size) => size.quantities.some((q) => q.quantity > 0))\n      .map((size) => size.sizeName);\n  }\n\n  // schedule publish\n  @AfterLoad()\n  @AfterInsert()\n  @AfterUpdate()\n  updatePublishState() {\n    // Skip automatic state update if manually set (only if column exists)\n    if (this.isManualPublishState === true) {\n      return;\n    }\n\n    if (this.datePublished && this.datePublished > new Date()) {\n      this.publishState = PublishState.DRAFT;\n    } else {\n      this.publishState = PublishState.PUBLISHED;\n    }\n  }\n\n  /**\n   * Before insert hook - validate size details\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  validateSizeDetails() {\n    if (!this.sizeDetails || this.sizeDetails.length === 0) {\n      throw new Error('Product must have at least one size detail');\n    }\n\n    this.sizeDetails.forEach((size) => {\n      if (!size.sizeName || size.price <= 0) {\n        throw new Error('Each size must have a valid name and price');\n      }\n\n      if (!size.quantities || size.quantities.length === 0) {\n        throw new Error('Each size must have at least one color quantity');\n      }\n\n      size.quantities.forEach((colorQty) => {\n        if (!colorQty.colorName || colorQty.quantity < 0) {\n          throw new Error(\n            'Each color quantity must have a valid color name and non-negative quantity',\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * Before insert hook - validate size details\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  validateTotalQuantity() {\n    if (!this.sizeDetails) return;\n\n    const totalQuantity = this.sizeDetails.reduce(\n      (total, size) =>\n        total +\n        size.quantities.reduce((sum, colorQty) => sum + colorQty.quantity, 0),\n      0,\n    );\n\n    this.quantity = totalQuantity;\n  }\n}\n"],"names":["Season","product","getTotalQuantity","sizeDetails","reduce","total","size","sizeTotal","quantities","sizeSum","colorQty","quantity","getAvailableColors","colorsMap","Map","forEach","set","colorName","Array","from","entries","map","name","imgColor","getAvailableSizes","filter","some","q","sizeName","updatePublishState","isManualPublishState","datePublished","Date","publishState","PublishState","DRAFT","PUBLISHED","validateSizeDetails","length","Error","price","validateTotalQuantity","totalQuantity","sum","type","enum","default","nullable","value","newVal","item","trim","category","products","subCategory","onDelete","auth","SizeTable"],"mappings":"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"}