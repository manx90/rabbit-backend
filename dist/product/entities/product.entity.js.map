{"version":3,"sources":["../../../src/product/entities/product.entity.ts"],"sourcesContent":["import {\n  PrimaryGeneratedColumn,\n  Column,\n  Entity,\n  ManyToOne,\n  BeforeInsert,\n  JoinColumn,\n  BeforeUpdate,\n  // OneToOne,\n} from 'typeorm';\nimport { subCategory, category } from './Category.entity';\nimport {\n  SizeDetail,\n  PublishState,\n  ColorDetail,\n} from '../../common/interfaces/entity.interface';\nimport { auth } from 'src/auth/entities/auth.entity';\n\nexport interface ProductResponse {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  sizes: string[];\n  colors: string[];\n  isActive: boolean;\n  PosterAt: Date | null;\n}\n\n@Entity()\nexport class product {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  name: string;\n\n  @Column({ type: 'text', nullable: true })\n  description: string;\n\n  @Column({ type: 'json', nullable: true })\n  images: string[];\n\n  @Column({ type: 'longtext', nullable: true })\n  imgCover: string;\n\n  @Column({ type: 'longtext', nullable: true })\n  imgSizeChart: string;\n\n  @Column({ type: 'longtext', nullable: true })\n  imgMeasure: string;\n\n  @Column({ type: 'json' })\n  sizeDetails: SizeDetail[];\n\n  @Column({\n    type: 'enum',\n    enum: PublishState,\n    default: PublishState.DRAFT,\n  })\n  publishState: PublishState;\n\n  @Column({ type: 'json', nullable: true })\n  colors: ColorDetail[];\n\n  @ManyToOne(() => category, (category) => category.products)\n  @JoinColumn({ name: 'categoryId' })\n  category: { id: number; name: string };\n\n  @ManyToOne(() => subCategory, (subCategory) => subCategory.products, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'subCategoryId' })\n  subCategory: subCategory;\n\n  @ManyToOne(() => auth, { nullable: true })\n  @JoinColumn({ name: 'posterId' })\n  poster: { id: string; username: string };\n\n  @Column({ type: 'decimal', default: null })\n  quantity: number;\n\n  @Column({ type: 'boolean', default: false })\n  isFeatured: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isTrending: boolean;\n\n  @Column({ type: 'boolean', default: true })\n  isNew: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isBestSeller: boolean;\n\n  @Column({ type: 'boolean', default: false })\n  isDeleted: boolean;\n\n  @Column({ type: 'int', default: 0 })\n  sales: number;\n\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @Column({ type: 'timestamp', default: null, nullable: true })\n  PosterAt: Date;\n\n  @Column({ type: 'timestamp', default: null, nullable: true })\n  updatedAt: Date;\n  Product: { id: string; username: string };\n\n  /**\n   * Calculate total quantity from all sizes and colors\n   */\n  getTotalQuantity(): number {\n    if (!this.sizeDetails) return 0;\n\n    return this.sizeDetails.reduce((total, size) => {\n      const sizeTotal = size.quantities.reduce((sizeSum, colorQty) => {\n        return sizeSum + colorQty.quantity;\n      }, 0);\n      return total + sizeTotal;\n    }, 0);\n  }\n\n  /**\n   * Get all available colors from all sizes\n   */\n  getAvailableColors(): Array<{ name: string; imgColor?: string }> {\n    if (!this.sizeDetails) return [];\n\n    const colorsMap = new Map<string, string>();\n\n    this.sizeDetails.forEach((size) => {\n      size.quantities.forEach((colorQty) => {\n        if (colorQty.quantity > 0) {\n          colorsMap.set(colorQty.colorName, '');\n        }\n      });\n    });\n\n    return Array.from(colorsMap.entries()).map(([name, imgColor]) => ({\n      name,\n      imgColor,\n    }));\n  }\n\n  /**\n   * Get all available sizes\n   */\n  getAvailableSizes(): string[] {\n    if (!this.sizeDetails) return [];\n\n    return this.sizeDetails\n      .filter((size) => size.quantities.some((q) => q.quantity > 0))\n      .map((size) => size.sizeName);\n  }\n\n  /**\n   * Before insert hook - set isActive based on publishState\n  //  */\n  // @BeforeInsert()\n  // @BeforeUpdate()\n  // setActiveStatus() {\n  //   this.isActive = this.publishState === PublishState.PUBLISHED;\n  // }\n\n  /**\n   * Before insert hook - validate size details\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  validateSizeDetails() {\n    if (!this.sizeDetails || this.sizeDetails.length === 0) {\n      throw new Error('Product must have at least one size detail');\n    }\n\n    this.sizeDetails.forEach((size) => {\n      if (!size.sizeName || size.price <= 0) {\n        throw new Error('Each size must have a valid name and price');\n      }\n\n      if (!size.quantities || size.quantities.length === 0) {\n        throw new Error('Each size must have at least one color quantity');\n      }\n\n      size.quantities.forEach((colorQty) => {\n        if (!colorQty.colorName || colorQty.quantity < 0) {\n          throw new Error(\n            'Each color quantity must have a valid color name and non-negative quantity',\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * Before insert hook - validate size details\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  validateTotalQuantity() {\n    if (!this.sizeDetails) return;\n\n    const totalQuantity = this.sizeDetails.reduce(\n      (total, size) =>\n        total +\n        size.quantities.reduce((sum, colorQty) => sum + colorQty.quantity, 0),\n      0,\n    );\n\n    this.quantity = totalQuantity;\n  }\n}\n"],"names":["product","getTotalQuantity","sizeDetails","reduce","total","size","sizeTotal","quantities","sizeSum","colorQty","quantity","getAvailableColors","colorsMap","Map","forEach","set","colorName","Array","from","entries","map","name","imgColor","getAvailableSizes","filter","some","q","sizeName","validateSizeDetails","length","Error","price","validateTotalQuantity","totalQuantity","sum","type","nullable","enum","PublishState","default","DRAFT","category","products","subCategory","onDelete","auth"],"mappings":"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"}