{"version":3,"sources":["../../src/product/category.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { product } from './entities/product.entity';\r\nimport { category, subCategory } from './entities/Category.entity';\r\nimport { FileStorageService } from 'src/file-storage/file-storage.service';\r\nimport {\r\n  CreateCategoryDto,\r\n  UpdateCategoryDto,\r\n  CreateSubCategoryDto,\r\n  UpdateSubCategoryDto,\r\n  UploadIcon,\r\n} from './dto/category.dto';\r\nimport { CategoryApiFeatures } from 'src/common/utils/category-api-features';\r\nimport { ParsedQs } from 'qs';\r\nimport { Request as ExpressRequest } from 'express';\r\n\r\n@Injectable()\r\nexport class CategoryService {\r\n  constructor(\r\n    @InjectRepository(category)\r\n    private categoryRepository: Repository<category>,\r\n    @InjectRepository(subCategory)\r\n    private subCategoryRepository: Repository<subCategory>,\r\n    @InjectRepository(product)\r\n    private productRepository: Repository<product>,\r\n    private readonly fileStorageService: FileStorageService,\r\n  ) {}\r\n\r\n  private async saveFiles(\r\n    files: Express.Multer.File[] = [],\r\n    mainDirectory: string,\r\n    categoryName: string,\r\n    subDirectory?: string,\r\n  ): Promise<string[]> {\r\n    const categoryPath = `${mainDirectory}/${categoryName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\r\n    console.log('categoryPath', categoryPath);\r\n    return await this.fileStorageService.saveFiles(files, categoryPath);\r\n  }\r\n\r\n  /**\r\n   * Creates a new category.\r\n   * @param file - UploadIcon object containing the icon file for the category.\r\n   * @param dto - Data transfer object containing category details.\r\n   * @returns The created category entity.\r\n   * @throws HttpException if the category already exists.\r\n   */\r\n  async createCategory(\r\n    file: UploadIcon,\r\n    dto: CreateCategoryDto,\r\n  ): Promise<category> {\r\n    // Check if a category with the same name already exists\r\n    const existing = await this.categoryRepository.findOne({\r\n      where: { name: dto.name },\r\n    });\r\n    if (existing)\r\n      throw new HttpException(\r\n        'Category already exists',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n    let icon: string | undefined = undefined;\r\n    console.log('icon file uploaded', file);\r\n    // If an icon file is provided, save it and get its path\r\n    if (file.iconCat) {\r\n      icon = (\r\n        await this.saveFiles(\r\n          [file.iconCat],\r\n          'categoriesIcons',\r\n          dto.name,\r\n          'iconCat',\r\n        )\r\n      )[0];\r\n    }\r\n    // Create a new category entity\r\n    const category = this.categoryRepository.create({\r\n      name: dto.name,\r\n      icon: icon,\r\n      isActive: true,\r\n    });\r\n    // Save the new category to the database and return it\r\n    return this.categoryRepository.save(category);\r\n  }\r\n\r\n  async createSubCategory(\r\n    file: UploadIcon,\r\n    dto: CreateSubCategoryDto,\r\n  ): Promise<subCategory> {\r\n    const subCategory = await this.subCategoryRepository.findOne({\r\n      where: { name: dto.name, category: { id: dto.categoryId } },\r\n    });\r\n    if (subCategory)\r\n      throw new HttpException(\r\n        'SubCategory already exists',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n    const parent = await this.categoryRepository.findOne({\r\n      where: { id: dto.categoryId },\r\n    });\r\n    if (!parent)\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n\r\n    if (!dto.name.trim()) {\r\n      throw new HttpException(\r\n        'SubCategory name is required',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n    }\r\n\r\n    const exists = await this.subCategoryRepository.findOne({\r\n      where: { name: dto.name, category: { id: dto.categoryId } },\r\n    });\r\n    if (exists)\r\n      throw new HttpException(\r\n        'SubCategory already exists',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n\r\n    let icon: string | undefined = undefined;\r\n    if (file.iconSubCat) {\r\n      icon = (\r\n        await this.saveFiles(\r\n          [file.iconSubCat],\r\n          'subCategoriesIcons',\r\n          parent.name,\r\n          dto.name,\r\n        )\r\n      )[0];\r\n    }\r\n    const sub = this.subCategoryRepository.create({\r\n      name: dto.name,\r\n      category: { id: parent.id, name: parent.name },\r\n      isActive: true,\r\n      icon: icon,\r\n    });\r\n    return this.subCategoryRepository.save(sub);\r\n  }\r\n\r\n  /**\r\n   * Transform category file paths to full URLs\r\n   * @param categories Array of category entities\r\n   * @param req Express Request object\r\n   * @returns Categories with transformed URLs\r\n   */\r\n  private transformCategoryUrls(\r\n    categories: category[],\r\n    req: ExpressRequest,\r\n  ): any[] {\r\n    const protocol = req.protocol || 'http';\r\n    const host = req.get('host') || 'localhost:3000';\r\n    const baseUrl = `${protocol}://${host}`;\r\n\r\n    return categories.map((category) => {\r\n      // Create a clone of the category to avoid modifying the original\r\n      const transformed = Object.create(\r\n        Object.getPrototypeOf(category),\r\n        Object.getOwnPropertyDescriptors(category),\r\n      );\r\n\r\n      // Transform category icon URL\r\n      if (transformed.icon && !transformed.icon.startsWith('http')) {\r\n        transformed.icon = `${baseUrl}/uploads/${transformed.icon}`;\r\n      }\r\n\r\n      // Transform subcategory icon URLs\r\n      if (\r\n        transformed.subCategories &&\r\n        Array.isArray(transformed.subCategories)\r\n      ) {\r\n        transformed.subCategories = transformed.subCategories.map(\r\n          (subCat: any) => ({\r\n            ...subCat,\r\n            icon:\r\n              subCat.icon && !subCat.icon.startsWith('http')\r\n                ? `${baseUrl}/uploads/${subCat.icon}`\r\n                : subCat.icon,\r\n          }),\r\n        );\r\n      }\r\n\r\n      return transformed;\r\n    });\r\n  }\r\n\r\n  async getAllCategories(\r\n    query?: ParsedQs,\r\n    req?: ExpressRequest,\r\n  ): Promise<{\r\n    status: string;\r\n    results: number;\r\n    total: number;\r\n    currentPage: number;\r\n    limit: number;\r\n    totalPages: number;\r\n    lastPage: number;\r\n    data: category[];\r\n  }> {\r\n    const queryBuilder = this.categoryRepository\r\n      .createQueryBuilder('category')\r\n      .leftJoinAndSelect('category.subCategories', 'subCategory')\r\n      .select([\r\n        'category.id',\r\n        'category.name',\r\n        'category.icon',\r\n        'category.isActive',\r\n        'category.createdAt',\r\n        'category.updatedAt',\r\n        'subCategory.id',\r\n        'subCategory.name',\r\n        'subCategory.icon',\r\n        'subCategory.isActive',\r\n        'subCategory.categoryId',\r\n      ]);\r\n\r\n    const features = new CategoryApiFeatures(\r\n      queryBuilder,\r\n      query || {},\r\n      this.categoryRepository.metadata,\r\n    )\r\n      .filter()\r\n      .sort()\r\n      .paginate();\r\n\r\n    const [data, total] = await features.getManyAndCount();\r\n    const transformedData = req ? this.transformCategoryUrls(data, req) : data;\r\n    const pagination = features.getPaginationInfo();\r\n\r\n    return {\r\n      status: 'success',\r\n      results: transformedData.length,\r\n      total,\r\n      currentPage: pagination.page,\r\n      limit: pagination.limit,\r\n      totalPages: Math.ceil(total / pagination.limit),\r\n      lastPage: Math.ceil(total / pagination.limit),\r\n      data: transformedData,\r\n    };\r\n  }\r\n\r\n  async getCategoryById(id: number): Promise<category> {\r\n    const category = await this.categoryRepository.findOne({\r\n      where: { id },\r\n      relations: ['subCategories'],\r\n    });\r\n    if (!category)\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n    return category;\r\n  }\r\n\r\n  async updateCategory(\r\n    id: number,\r\n    dto: UpdateCategoryDto,\r\n    file?: UploadIcon,\r\n  ): Promise<category> {\r\n    const category = await this.categoryRepository.findOne({ where: { id } });\r\n    if (!category)\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n\r\n    if (dto.name && dto.name !== category.name) {\r\n      const dup = await this.categoryRepository.findOne({\r\n        where: { name: dto.name },\r\n      });\r\n      if (dup)\r\n        throw new HttpException(\r\n          'Category name already exists',\r\n          HttpStatus.BAD_REQUEST,\r\n        );\r\n      category.name = dto.name;\r\n    }\r\n    if (dto.isActive !== undefined) category.isActive = dto.isActive;\r\n    if (file?.iconCat) {\r\n      category.icon = (\r\n        await this.saveFiles(\r\n          [file.iconCat],\r\n          'categoriesIcons',\r\n          category.name,\r\n          'iconCat',\r\n        )\r\n      )[0];\r\n    }\r\n    return this.categoryRepository.save(category);\r\n  }\r\n\r\n  async updateSubCategory(\r\n    categoryId: number,\r\n    id: number,\r\n    dto: UpdateSubCategoryDto,\r\n    file?: UploadIcon,\r\n  ): Promise<subCategory> {\r\n    const sub = await this.subCategoryRepository.findOne({\r\n      where: { id, categoryId: categoryId },\r\n      relations: ['category'],\r\n    });\r\n    if (!sub)\r\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\r\n\r\n    if (dto.name && dto.name !== sub.name) {\r\n      const dup = await this.subCategoryRepository.findOne({\r\n        where: { name: dto.name },\r\n      });\r\n      if (dup)\r\n        throw new HttpException(\r\n          'SubCategory name already exists',\r\n          HttpStatus.BAD_REQUEST,\r\n        );\r\n      sub.name = dto.name;\r\n    }\r\n    if (dto.isActive !== undefined) sub.isActive = dto.isActive;\r\n    if (file?.iconSubCat) {\r\n      sub.icon = (\r\n        await this.saveFiles(\r\n          [file.iconSubCat],\r\n          'subCategoriesIcons',\r\n          sub.category.name,\r\n          dto.name ?? sub.name,\r\n        )\r\n      )[0];\r\n    }\r\n    return this.subCategoryRepository.save(sub);\r\n  }\r\n\r\n  async deleteCategory(id: number): Promise<void> {\r\n    const category = await this.getCategoryById(id);\r\n    if (!category) {\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n    }\r\n    if (category.icon && category.icon !== '') {\r\n      // Icons are stored under categoriesIcons/<categoryName>\r\n      this.fileStorageService.deleteDirectory(\r\n        `categoriesIcons/${category.name.replace(/\\s+/g, '_').toLowerCase()}`,\r\n      );\r\n    }\r\n    if (category.subCategories && category.subCategories.length > 0) {\r\n      for (const sub of category.subCategories) {\r\n        if (sub.icon && sub.icon !== '') {\r\n          // Use parent category name from outer scope to avoid missing relation on sub\r\n          this.fileStorageService.deleteDirectory(\r\n            `subCategoriesIcons/${category.name\r\n              .replace(/\\s+/g, '_')\r\n              .toLowerCase()}/${sub.name.replace(/\\s+/g, '_').toLowerCase()}`,\r\n          );\r\n        }\r\n      }\r\n    }\r\n    await this.subCategoryRepository.remove(category.subCategories);\r\n    await this.categoryRepository.remove(category);\r\n  }\r\n  async deleteSubCategory(id: number): Promise<void> {\r\n    const sub = await this.subCategoryRepository.findOne({\r\n      where: { id },\r\n      relations: ['category'],\r\n    });\r\n    if (!sub)\r\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\r\n    if (sub.icon && sub.icon !== '' && sub.category) {\r\n      this.fileStorageService.deleteDirectory(\r\n        `subCategoriesIcons/${sub.category.name\r\n          .replace(/\\s+/g, '_')\r\n          .toLowerCase()}/${sub.name.replace(/\\s+/g, '_').toLowerCase()}`,\r\n      );\r\n    }\r\n    await this.subCategoryRepository.remove(sub);\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.productRepository.delete({});\r\n    await this.subCategoryRepository.delete({});\r\n    await this.categoryRepository.delete({});\r\n  }\r\n\r\n  async getSubCategories() {\r\n    return this.subCategoryRepository.find();\r\n  }\r\n  async getSubCategoryById(id: number): Promise<subCategory> {\r\n    const subCategory = await this.subCategoryRepository.findOne({\r\n      where: { id },\r\n    });\r\n    if (!subCategory)\r\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\r\n    return subCategory;\r\n  }\r\n}\r\n"],"names":["CategoryService","saveFiles","files","mainDirectory","categoryName","subDirectory","categoryPath","replace","toLowerCase","console","log","fileStorageService","createCategory","file","dto","existing","categoryRepository","findOne","where","name","HttpException","HttpStatus","BAD_REQUEST","icon","undefined","iconCat","category","create","isActive","save","createSubCategory","subCategory","subCategoryRepository","id","categoryId","parent","NOT_FOUND","trim","exists","iconSubCat","sub","transformCategoryUrls","categories","req","protocol","host","get","baseUrl","map","transformed","Object","getPrototypeOf","getOwnPropertyDescriptors","startsWith","subCategories","Array","isArray","subCat","getAllCategories","query","queryBuilder","createQueryBuilder","leftJoinAndSelect","select","features","CategoryApiFeatures","metadata","filter","sort","paginate","data","total","getManyAndCount","transformedData","pagination","getPaginationInfo","status","results","length","currentPage","page","limit","totalPages","Math","ceil","lastPage","getCategoryById","relations","updateCategory","dup","updateSubCategory","deleteCategory","deleteDirectory","remove","deleteSubCategory","deleteAll","productRepository","delete","getSubCategories","find","getSubCategoryById","constructor"],"mappings":"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"}