{"version":3,"sources":["../../src/product/category.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { product } from './entities/product.entity';\r\nimport { category, subCategory } from './entities/Category.entity';\r\nimport {\r\n  CreateCategoryDto,\r\n  UpdateCategoryDto,\r\n  CreateSubCategoryDto,\r\n  UpdateSubCategoryDto,\r\n} from './dto/category.dto';\r\n\r\n@Injectable()\r\nexport class CategoryService {\r\n  constructor(\r\n    @InjectRepository(category)\r\n    private categoryRepository: Repository<category>,\r\n    @InjectRepository(subCategory)\r\n    private subCategoryRepository: Repository<subCategory>,\r\n    @InjectRepository(product)\r\n    private productRepository: Repository<product>,\r\n  ) {}\r\n\r\n  async createCategory(dto: CreateCategoryDto): Promise<category> {\r\n    const existing = await this.categoryRepository.findOne({\r\n      where: { name: dto.name },\r\n    });\r\n    if (existing)\r\n      throw new HttpException(\r\n        'Category already exists',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n\r\n    const category = this.categoryRepository.create({\r\n      name: dto.name,\r\n      isActive: true,\r\n    });\r\n\r\n    return this.categoryRepository.save(category);\r\n  }\r\n\r\n  async createSubCategory(dto: CreateSubCategoryDto): Promise<subCategory> {\r\n    const parent = await this.categoryRepository.findOne({\r\n      where: { id: dto.categoryId },\r\n    });\r\n    if (!parent)\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n\r\n    if (!dto.name.trim()) {\r\n      throw new HttpException(\r\n        'SubCategory name is required',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n    }\r\n\r\n    const exists = await this.subCategoryRepository.findOne({\r\n      where: { name: dto.name, category: { id: dto.categoryId } },\r\n      relations: ['category'],\r\n    });\r\n    if (exists)\r\n      throw new HttpException(\r\n        'SubCategory already exists',\r\n        HttpStatus.BAD_REQUEST,\r\n      );\r\n\r\n    const sub = this.subCategoryRepository.create({\r\n      name: dto.name,\r\n      category: parent,\r\n      isActive: true,\r\n    });\r\n    return this.subCategoryRepository.save(sub);\r\n  }\r\n\r\n  async getAllCategories(): Promise<category[]> {\r\n    return this.categoryRepository.find({ relations: ['subCategories'] });\r\n  }\r\n\r\n  async getCategoryById(id: number): Promise<category> {\r\n    const category = await this.categoryRepository.findOne({\r\n      where: { id },\r\n      relations: ['subCategories'],\r\n    });\r\n    if (!category)\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n    return category;\r\n  }\r\n\r\n  async updateCategory(id: number, dto: UpdateCategoryDto): Promise<category> {\r\n    const category = await this.categoryRepository.findOne({ where: { id } });\r\n    if (!category)\r\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\r\n\r\n    if (dto.name && dto.name !== category.name) {\r\n      const dup = await this.categoryRepository.findOne({\r\n        where: { name: dto.name },\r\n      });\r\n      if (dup)\r\n        throw new HttpException(\r\n          'Category name already exists',\r\n          HttpStatus.BAD_REQUEST,\r\n        );\r\n      category.name = dto.name;\r\n    }\r\n    if (dto.isActive !== undefined) category.isActive = dto.isActive;\r\n\r\n    return this.categoryRepository.save(category);\r\n  }\r\n\r\n  async updateSubCategory(\r\n    id: number,\r\n    dto: UpdateSubCategoryDto,\r\n  ): Promise<subCategory> {\r\n    const sub = await this.subCategoryRepository.findOne({\r\n      where: { id },\r\n      relations: ['category'],\r\n    });\r\n    if (!sub)\r\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\r\n\r\n    if (dto.name && dto.name !== sub.name) {\r\n      const dup = await this.subCategoryRepository.findOne({\r\n        where: { name: dto.name },\r\n      });\r\n      if (dup)\r\n        throw new HttpException(\r\n          'SubCategory name already exists',\r\n          HttpStatus.BAD_REQUEST,\r\n        );\r\n      sub.name = dto.name;\r\n    }\r\n    if (dto.isActive !== undefined) sub.isActive = dto.isActive;\r\n\r\n    return this.subCategoryRepository.save(sub);\r\n  }\r\n\r\n  async deleteCategory(id: number): Promise<void> {\r\n    const category = await this.getCategoryById(id);\r\n    await this.subCategoryRepository.remove(category.subCategories);\r\n    await this.categoryRepository.remove(category);\r\n  }\r\n\r\n  async deleteSubCategory(id: number): Promise<void> {\r\n    const sub = await this.subCategoryRepository.findOne({ where: { id } });\r\n    if (!sub)\r\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\r\n    await this.subCategoryRepository.remove(sub);\r\n  }\r\n\r\n  async deleteAll(): Promise<void> {\r\n    await this.productRepository.delete({});\r\n    await this.subCategoryRepository.delete({});\r\n    await this.categoryRepository.delete({});\r\n  }\r\n}\r\n"],"names":["CategoryService","createCategory","dto","existing","categoryRepository","findOne","where","name","HttpException","HttpStatus","BAD_REQUEST","category","create","isActive","save","createSubCategory","parent","id","categoryId","NOT_FOUND","trim","exists","subCategoryRepository","relations","sub","getAllCategories","find","getCategoryById","updateCategory","dup","undefined","updateSubCategory","deleteCategory","remove","subCategories","deleteSubCategory","deleteAll","productRepository","delete","constructor"],"mappings":";;;;+BAaaA;;;eAAAA;;;wBAbyC;yBACrB;0BACN;+BACH;gCACc;;;;;;;;;;;;;;;AAS/B,IAAA,AAAMA,kBAAN,MAAMA;IAUX,MAAMC,eAAeC,GAAsB,EAAqB;QAC9D,MAAMC,WAAW,MAAM,IAAI,CAACC,kBAAkB,CAACC,OAAO,CAAC;YACrDC,OAAO;gBAAEC,MAAML,IAAIK,IAAI;YAAC;QAC1B;QACA,IAAIJ,UACF,MAAM,IAAIK,qBAAa,CACrB,2BACAC,kBAAU,CAACC,WAAW;QAG1B,MAAMC,WAAW,IAAI,CAACP,kBAAkB,CAACQ,MAAM,CAAC;YAC9CL,MAAML,IAAIK,IAAI;YACdM,UAAU;QACZ;QAEA,OAAO,IAAI,CAACT,kBAAkB,CAACU,IAAI,CAACH;IACtC;IAEA,MAAMI,kBAAkBb,GAAyB,EAAwB;QACvE,MAAMc,SAAS,MAAM,IAAI,CAACZ,kBAAkB,CAACC,OAAO,CAAC;YACnDC,OAAO;gBAAEW,IAAIf,IAAIgB,UAAU;YAAC;QAC9B;QACA,IAAI,CAACF,QACH,MAAM,IAAIR,qBAAa,CAAC,sBAAsBC,kBAAU,CAACU,SAAS;QAEpE,IAAI,CAACjB,IAAIK,IAAI,CAACa,IAAI,IAAI;YACpB,MAAM,IAAIZ,qBAAa,CACrB,gCACAC,kBAAU,CAACC,WAAW;QAE1B;QAEA,MAAMW,SAAS,MAAM,IAAI,CAACC,qBAAqB,CAACjB,OAAO,CAAC;YACtDC,OAAO;gBAAEC,MAAML,IAAIK,IAAI;gBAAEI,UAAU;oBAAEM,IAAIf,IAAIgB,UAAU;gBAAC;YAAE;YAC1DK,WAAW;gBAAC;aAAW;QACzB;QACA,IAAIF,QACF,MAAM,IAAIb,qBAAa,CACrB,8BACAC,kBAAU,CAACC,WAAW;QAG1B,MAAMc,MAAM,IAAI,CAACF,qBAAqB,CAACV,MAAM,CAAC;YAC5CL,MAAML,IAAIK,IAAI;YACdI,UAAUK;YACVH,UAAU;QACZ;QACA,OAAO,IAAI,CAACS,qBAAqB,CAACR,IAAI,CAACU;IACzC;IAEA,MAAMC,mBAAwC;QAC5C,OAAO,IAAI,CAACrB,kBAAkB,CAACsB,IAAI,CAAC;YAAEH,WAAW;gBAAC;aAAgB;QAAC;IACrE;IAEA,MAAMI,gBAAgBV,EAAU,EAAqB;QACnD,MAAMN,WAAW,MAAM,IAAI,CAACP,kBAAkB,CAACC,OAAO,CAAC;YACrDC,OAAO;gBAAEW;YAAG;YACZM,WAAW;gBAAC;aAAgB;QAC9B;QACA,IAAI,CAACZ,UACH,MAAM,IAAIH,qBAAa,CAAC,sBAAsBC,kBAAU,CAACU,SAAS;QACpE,OAAOR;IACT;IAEA,MAAMiB,eAAeX,EAAU,EAAEf,GAAsB,EAAqB;QAC1E,MAAMS,WAAW,MAAM,IAAI,CAACP,kBAAkB,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEW;YAAG;QAAE;QACvE,IAAI,CAACN,UACH,MAAM,IAAIH,qBAAa,CAAC,sBAAsBC,kBAAU,CAACU,SAAS;QAEpE,IAAIjB,IAAIK,IAAI,IAAIL,IAAIK,IAAI,KAAKI,SAASJ,IAAI,EAAE;YAC1C,MAAMsB,MAAM,MAAM,IAAI,CAACzB,kBAAkB,CAACC,OAAO,CAAC;gBAChDC,OAAO;oBAAEC,MAAML,IAAIK,IAAI;gBAAC;YAC1B;YACA,IAAIsB,KACF,MAAM,IAAIrB,qBAAa,CACrB,gCACAC,kBAAU,CAACC,WAAW;YAE1BC,SAASJ,IAAI,GAAGL,IAAIK,IAAI;QAC1B;QACA,IAAIL,IAAIW,QAAQ,KAAKiB,WAAWnB,SAASE,QAAQ,GAAGX,IAAIW,QAAQ;QAEhE,OAAO,IAAI,CAACT,kBAAkB,CAACU,IAAI,CAACH;IACtC;IAEA,MAAMoB,kBACJd,EAAU,EACVf,GAAyB,EACH;QACtB,MAAMsB,MAAM,MAAM,IAAI,CAACF,qBAAqB,CAACjB,OAAO,CAAC;YACnDC,OAAO;gBAAEW;YAAG;YACZM,WAAW;gBAAC;aAAW;QACzB;QACA,IAAI,CAACC,KACH,MAAM,IAAIhB,qBAAa,CAAC,yBAAyBC,kBAAU,CAACU,SAAS;QAEvE,IAAIjB,IAAIK,IAAI,IAAIL,IAAIK,IAAI,KAAKiB,IAAIjB,IAAI,EAAE;YACrC,MAAMsB,MAAM,MAAM,IAAI,CAACP,qBAAqB,CAACjB,OAAO,CAAC;gBACnDC,OAAO;oBAAEC,MAAML,IAAIK,IAAI;gBAAC;YAC1B;YACA,IAAIsB,KACF,MAAM,IAAIrB,qBAAa,CACrB,mCACAC,kBAAU,CAACC,WAAW;YAE1Bc,IAAIjB,IAAI,GAAGL,IAAIK,IAAI;QACrB;QACA,IAAIL,IAAIW,QAAQ,KAAKiB,WAAWN,IAAIX,QAAQ,GAAGX,IAAIW,QAAQ;QAE3D,OAAO,IAAI,CAACS,qBAAqB,CAACR,IAAI,CAACU;IACzC;IAEA,MAAMQ,eAAef,EAAU,EAAiB;QAC9C,MAAMN,WAAW,MAAM,IAAI,CAACgB,eAAe,CAACV;QAC5C,MAAM,IAAI,CAACK,qBAAqB,CAACW,MAAM,CAACtB,SAASuB,aAAa;QAC9D,MAAM,IAAI,CAAC9B,kBAAkB,CAAC6B,MAAM,CAACtB;IACvC;IAEA,MAAMwB,kBAAkBlB,EAAU,EAAiB;QACjD,MAAMO,MAAM,MAAM,IAAI,CAACF,qBAAqB,CAACjB,OAAO,CAAC;YAAEC,OAAO;gBAAEW;YAAG;QAAE;QACrE,IAAI,CAACO,KACH,MAAM,IAAIhB,qBAAa,CAAC,yBAAyBC,kBAAU,CAACU,SAAS;QACvE,MAAM,IAAI,CAACG,qBAAqB,CAACW,MAAM,CAACT;IAC1C;IAEA,MAAMY,YAA2B;QAC/B,MAAM,IAAI,CAACC,iBAAiB,CAACC,MAAM,CAAC,CAAC;QACrC,MAAM,IAAI,CAAChB,qBAAqB,CAACgB,MAAM,CAAC,CAAC;QACzC,MAAM,IAAI,CAAClC,kBAAkB,CAACkC,MAAM,CAAC,CAAC;IACxC;IA1IAC,YACE,AACQnC,kBAAwC,EAChD,AACQkB,qBAA8C,EACtD,AACQe,iBAAsC,CAC9C;aALQjC,qBAAAA;aAEAkB,wBAAAA;aAEAe,oBAAAA;IACP;AAoIL"}