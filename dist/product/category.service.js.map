{"version":3,"sources":["../../src/product/category.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Request as ExpressRequest } from 'express';\nimport { ParsedQs } from 'qs';\nimport { PublishState } from 'src/common/interfaces/entity.interface';\nimport { CategoryApiFeatures } from 'src/common/utils/category-api-features';\nimport { FileStorageService } from 'src/file-storage/file-storage.service';\nimport { Repository } from 'typeorm';\nimport {\n  CreateCategoryDto,\n  CreateSubCategoryDto,\n  UpdateCategoryDto,\n  UpdateSubCategoryDto,\n  UploadIcon,\n} from './dto/category.dto';\nimport { category, subCategory } from './entities/Category.entity';\nimport { product } from './entities/product.entity';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(category)\n    private categoryRepository: Repository<category>,\n    @InjectRepository(subCategory)\n    private subCategoryRepository: Repository<subCategory>,\n    @InjectRepository(product)\n    private productRepository: Repository<product>,\n    private readonly fileStorageService: FileStorageService,\n  ) {}\n\n  private async saveFiles(\n    files: Express.Multer.File[] = [],\n    mainDirectory: string,\n    categoryName: string,\n    subDirectory?: string,\n  ): Promise<string[]> {\n    const categoryPath = `${mainDirectory}/${categoryName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    console.log('categoryPath', categoryPath);\n    return await this.fileStorageService.saveFiles(files, categoryPath);\n  }\n  async createCategory(\n    file: UploadIcon,\n    dto: CreateCategoryDto,\n  ): Promise<category> {\n    // Check if a category with the same name already exists\n    const existing = await this.categoryRepository.findOne({\n      where: { name: dto.name },\n    });\n    if (existing)\n      throw new HttpException(\n        'Category already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    let icon: string | undefined = undefined;\n    console.log('icon file uploaded', file);\n    // If an icon file is provided, save it and get its path\n    if (file.iconCat) {\n      icon = (\n        await this.saveFiles(\n          [file.iconCat],\n          'categoriesIcons',\n          dto.name,\n          'iconCat',\n        )\n      )[0];\n    }\n    // Create a new category entity\n    const category = this.categoryRepository.create({\n      name: dto.name,\n      icon: icon,\n      isActive: true,\n    });\n    // Save the new category to the database and return it\n    return this.categoryRepository.save(category);\n  }\n  async createSubCategory(\n    file: UploadIcon,\n    dto: CreateSubCategoryDto,\n  ): Promise<subCategory> {\n    const subCategory = await this.subCategoryRepository.findOne({\n      where: { name: dto.name, category: { id: dto.categoryId } },\n    });\n    if (subCategory)\n      throw new HttpException(\n        'SubCategory already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    const parent = await this.categoryRepository.findOne({\n      where: { id: dto.categoryId },\n    });\n    if (!parent)\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\n\n    if (!dto.name.trim()) {\n      throw new HttpException(\n        'SubCategory name is required',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const exists = await this.subCategoryRepository.findOne({\n      where: { name: dto.name, category: { id: dto.categoryId } },\n    });\n    if (exists)\n      throw new HttpException(\n        'SubCategory already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n\n    let icon: string | undefined = undefined;\n    if (file.iconSubCat) {\n      icon = (\n        await this.saveFiles(\n          [file.iconSubCat],\n          'subCategoriesIcons',\n          parent.name,\n          dto.name,\n        )\n      )[0];\n    }\n    const sub = this.subCategoryRepository.create({\n      name: dto.name,\n      category: { id: parent.id, name: parent.name },\n      isActive: true,\n      icon: icon,\n    });\n    return this.subCategoryRepository.save(sub);\n  }\n  private transformCategoryUrls(\n    categories: category[],\n    req: ExpressRequest,\n  ): any[] {\n    const protocol = req.protocol || 'http';\n    const host = req.get('host') || 'localhost:3000';\n    const baseUrl = `${protocol}://${host}`;\n\n    return categories.map((category) => {\n      // Create a clone of the category to avoid modifying the original\n      const transformed = Object.create(\n        Object.getPrototypeOf(category),\n        Object.getOwnPropertyDescriptors(category),\n      );\n\n      // Transform category icon URL\n      if (transformed.icon && !transformed.icon.startsWith('http')) {\n        transformed.icon = `${baseUrl}/uploads/${transformed.icon}`;\n      }\n\n      // Transform subcategory icon URLs\n      if (\n        transformed.subCategories &&\n        Array.isArray(transformed.subCategories)\n      ) {\n        transformed.subCategories = transformed.subCategories.map(\n          (subCat: any) => ({\n            ...subCat,\n            icon:\n              subCat.icon && !subCat.icon.startsWith('http')\n                ? `${baseUrl}/uploads/${subCat.icon}`\n                : subCat.icon,\n          }),\n        );\n      }\n\n      return transformed;\n    });\n  }\n  async getAllCategories(\n    query?: ParsedQs,\n    req?: ExpressRequest,\n  ): Promise<{\n    status: string;\n    results: number;\n    total: number;\n    currentPage: number;\n    limit: number;\n    totalPages: number;\n    lastPage: number;\n    data: category[];\n  }> {\n    const queryBuilder = this.categoryRepository\n      .createQueryBuilder('category')\n      .leftJoinAndSelect('category.subCategories', 'subCategory')\n      .select([\n        'category.id',\n        'category.name',\n        'category.icon',\n        'category.isActive',\n        'category.createdAt',\n        'category.updatedAt',\n        'subCategory.id',\n        'subCategory.name',\n        'subCategory.icon',\n        'subCategory.isActive',\n        'subCategory.categoryId',\n      ]);\n\n    const features = new CategoryApiFeatures(\n      queryBuilder,\n      query || {},\n      this.categoryRepository.metadata,\n    )\n      .filter()\n      .sort()\n      .paginate();\n\n    const [data, total] = await features.getManyAndCount();\n    const transformedData = req ? this.transformCategoryUrls(data, req) : data;\n    const pagination = features.getPaginationInfo();\n\n    return {\n      status: 'success',\n      results: transformedData.length,\n      total,\n      currentPage: pagination.page,\n      limit: pagination.limit,\n      totalPages: Math.ceil(total / pagination.limit),\n      lastPage: Math.ceil(total / pagination.limit),\n      data: transformedData,\n    };\n  }\n  async getCategoryById(id: number): Promise<category> {\n    const category = await this.categoryRepository.findOne({\n      where: { id },\n      relations: ['subCategories'],\n    });\n    if (!category)\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\n    return category;\n  }\n  async updateCategory(\n    id: number,\n    dto: UpdateCategoryDto,\n    file?: UploadIcon,\n  ): Promise<category> {\n    const category = await this.categoryRepository.findOne({ where: { id } });\n    if (!category)\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\n\n    if (dto.name && dto.name !== category.name) {\n      const dup = await this.categoryRepository.findOne({\n        where: { name: dto.name },\n      });\n      if (dup)\n        throw new HttpException(\n          'Category name already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      category.name = dto.name;\n    }\n    if (dto.isActive !== undefined) category.isActive = dto.isActive;\n    if (file?.iconCat) {\n      category.icon = (\n        await this.saveFiles(\n          [file.iconCat],\n          'categoriesIcons',\n          category.name,\n          'iconCat',\n        )\n      )[0];\n    }\n    return this.categoryRepository.save(category);\n  }\n  async updateSubCategory(\n    categoryId: number,\n    id: number,\n    dto: UpdateSubCategoryDto,\n    file?: UploadIcon,\n  ): Promise<subCategory> {\n    const sub = await this.subCategoryRepository.findOne({\n      where: { id, categoryId: categoryId },\n      relations: ['category'],\n    });\n    if (!sub)\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\n\n    if (dto.name && dto.name !== sub.name) {\n      const dup = await this.subCategoryRepository.findOne({\n        where: { name: dto.name },\n      });\n      if (dup)\n        throw new HttpException(\n          'SubCategory name already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      sub.name = dto.name;\n    }\n    if (dto.isActive !== undefined) sub.isActive = dto.isActive;\n    if (file?.iconSubCat) {\n      sub.icon = (\n        await this.saveFiles(\n          [file.iconSubCat],\n          'subCategoriesIcons',\n          sub.category.name,\n          dto.name ?? sub.name,\n        )\n      )[0];\n    }\n    return this.subCategoryRepository.save(sub);\n  }\n  async deleteCategory(id: number): Promise<void> {\n    const category = await this.getCategoryById(id);\n    if (!category) {\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\n    }\n    if (category.icon && category.icon !== '') {\n      // Icons are stored under categoriesIcons/<categoryName>\n      this.fileStorageService.deleteDirectory(\n        `categoriesIcons/${category.name.replace(/\\s+/g, '_').toLowerCase()}`,\n      );\n    }\n    if (category.subCategories && category.subCategories.length > 0) {\n      for (const sub of category.subCategories) {\n        if (sub.icon && sub.icon !== '') {\n          // Use parent category name from outer scope to avoid missing relation on sub\n          this.fileStorageService.deleteDirectory(\n            `subCategoriesIcons/${category.name\n              .replace(/\\s+/g, '_')\n              .toLowerCase()}/${sub.name.replace(/\\s+/g, '_').toLowerCase()}`,\n          );\n        }\n      }\n    }\n    await this.subCategoryRepository.remove(category.subCategories);\n    await this.categoryRepository.remove(category);\n  }\n  async deleteSubCategory(id: number): Promise<void> {\n    const sub = await this.subCategoryRepository.findOne({\n      where: { id },\n      relations: ['category'],\n    });\n    if (!sub)\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\n    if (sub.icon && sub.icon !== '' && sub.category) {\n      this.fileStorageService.deleteDirectory(\n        `subCategoriesIcons/${sub.category.name\n          .replace(/\\s+/g, '_')\n          .toLowerCase()}/${sub.name.replace(/\\s+/g, '_').toLowerCase()}`,\n      );\n    }\n    await this.subCategoryRepository.remove(sub);\n  }\n  async deleteAll(): Promise<void> {\n    await this.productRepository.delete({});\n    await this.subCategoryRepository.delete({});\n    await this.categoryRepository.delete({});\n  }\n  async getSubCategories() {\n    return this.subCategoryRepository.find();\n  }\n  async getSubCategoryById(id: number): Promise<subCategory> {\n    const subCategory = await this.subCategoryRepository.findOne({\n      where: { id },\n    });\n    if (!subCategory)\n      throw new HttpException('SubCategory not found', HttpStatus.NOT_FOUND);\n    return subCategory;\n  }\n  async updateState(id: number): Promise<category> {\n    const categoryEntity = await this.categoryRepository.findOne({\n      where: { id },\n    });\n    if (!categoryEntity) {\n      throw new HttpException('Category not found', HttpStatus.NOT_FOUND);\n    }\n    const products = await this.productRepository.find({\n      where: { category: { id } },\n      relations: ['category', 'subCategory'],\n    });\n    categoryEntity.isActive = !categoryEntity.isActive;\n    await this.categoryRepository.save(categoryEntity);\n    const newPublishState = categoryEntity.isActive\n      ? PublishState.PUBLISHED\n      : PublishState.DRAFT;\n\n    for (const product of products) {\n      if (product.publishState !== newPublishState) {\n        product.publishState = newPublishState;\n        product.isManualPublishState = true;\n        await this.productRepository.save(product);\n        console.log(`Updated product ${product.id} to ${newPublishState}`);\n      }\n    }\n    return categoryEntity;\n  }\n  async updateStateSub(id: number): Promise<subCategory> {\n    const subcategoryEntity = await this.subCategoryRepository.findOne({\n      where: { id },\n    });\n    if (!subcategoryEntity) {\n      throw new HttpException('subcateogry not found', HttpStatus.NOT_FOUND);\n    }\n    const products = await this.productRepository.find({\n      where: { subCategory: { id } },\n      relations: ['category', 'subCategory'],\n    });\n    subcategoryEntity.isActive = !subcategoryEntity.isActive;\n    await this.subCategoryRepository.save(subcategoryEntity);\n    const newPublishState = subcategoryEntity.isActive\n      ? PublishState.PUBLISHED\n      : PublishState.DRAFT;\n\n    for (const product of products) {\n      if (product.publishState !== newPublishState) {\n        product.publishState = newPublishState;\n        product.isManualPublishState = true;\n        await this.productRepository.save(product);\n        console.log(`Updated product ${product.id} to ${newPublishState}`);\n      }\n    }\n    return subcategoryEntity;\n  }\n}\n"],"names":["CategoryService","saveFiles","files","mainDirectory","categoryName","subDirectory","categoryPath","replace","toLowerCase","console","log","fileStorageService","createCategory","file","dto","existing","categoryRepository","findOne","where","name","HttpException","HttpStatus","BAD_REQUEST","icon","undefined","iconCat","category","create","isActive","save","createSubCategory","subCategory","subCategoryRepository","id","categoryId","parent","NOT_FOUND","trim","exists","iconSubCat","sub","transformCategoryUrls","categories","req","protocol","host","get","baseUrl","map","transformed","Object","getPrototypeOf","getOwnPropertyDescriptors","startsWith","subCategories","Array","isArray","subCat","getAllCategories","query","queryBuilder","createQueryBuilder","leftJoinAndSelect","select","features","CategoryApiFeatures","metadata","filter","sort","paginate","data","total","getManyAndCount","transformedData","pagination","getPaginationInfo","status","results","length","currentPage","page","limit","totalPages","Math","ceil","lastPage","getCategoryById","relations","updateCategory","dup","updateSubCategory","deleteCategory","deleteDirectory","remove","deleteSubCategory","deleteAll","productRepository","delete","getSubCategories","find","getSubCategoryById","updateState","categoryEntity","products","newPublishState","PublishState","PUBLISHED","DRAFT","product","publishState","isManualPublishState","updateStateSub","subcategoryEntity","constructor"],"mappings":"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"}