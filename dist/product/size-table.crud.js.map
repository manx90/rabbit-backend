{"version":3,"sources":["../../src/product/size-table.crud.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { SizeTable } from './entities/sizeTable.entity';\r\nimport {\r\n  CreateSizeTableDto,\r\n  UpdateSizeTableDto,\r\n  SizeTableResponseDto,\r\n} from './dto/size-table.dto';\r\n\r\n@Injectable()\r\nexport class SizeTableCrud {\r\n  constructor(\r\n    @InjectRepository(SizeTable)\r\n    private readonly sizeTableRepo: Repository<SizeTable>,\r\n  ) {}\r\n\r\n  private sanitizeSizeTable(sizeTable: SizeTable): SizeTableResponseDto {\r\n    return {\r\n      id: sizeTable.id,\r\n      tableName: sizeTable.tableName,\r\n      data: sizeTable.data,\r\n    };\r\n  }\r\n\r\n  async createSizeTable(\r\n    createDto: CreateSizeTableDto,\r\n  ): Promise<SizeTableResponseDto | null> {\r\n    try {\r\n      const sizeTable = new SizeTable();\r\n      sizeTable.tableName = createDto.tableName;\r\n      sizeTable.data = {\r\n        tableName: createDto.tableName,\r\n        dimensions: createDto.dimensions,\r\n      };\r\n\r\n      const savedSizeTable = await this.sizeTableRepo.save(sizeTable);\r\n      return this.sanitizeSizeTable(savedSizeTable);\r\n    } catch (error) {\r\n      console.error('Error creating size table:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getAllSizeTables(): Promise<SizeTableResponseDto[]> {\r\n    try {\r\n      const sizeTables = await this.sizeTableRepo.find({\r\n        order: { tableName: 'ASC' },\r\n      });\r\n      return sizeTables.map((sizeTable) => this.sanitizeSizeTable(sizeTable));\r\n    } catch (error) {\r\n      console.error('Error getting all size tables:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getSizeTableById(id: string): Promise<SizeTableResponseDto> {\r\n    try {\r\n      const sizeTable = await this.sizeTableRepo.findOne({\r\n        where: { id },\r\n      });\r\n\r\n      if (!sizeTable) {\r\n        throw new NotFoundException(`Size table with ID ${id} not found`);\r\n      }\r\n\r\n      return this.sanitizeSizeTable(sizeTable);\r\n    } catch (error) {\r\n      console.error('Error getting size table by ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateSizeTable(\r\n    id: string,\r\n    updateDto: UpdateSizeTableDto,\r\n  ): Promise<SizeTableResponseDto> {\r\n    try {\r\n      const sizeTable = await this.sizeTableRepo.findOne({\r\n        where: { id },\r\n      });\r\n\r\n      if (!sizeTable) {\r\n        throw new NotFoundException(`Size table with ID ${id} not found`);\r\n      }\r\n\r\n      // Update table name if provided\r\n      if (updateDto.tableName !== undefined) {\r\n        sizeTable.tableName = updateDto.tableName;\r\n        sizeTable.data.tableName = updateDto.tableName;\r\n      }\r\n\r\n      // Update dimensions if provided\r\n      if (updateDto.dimensions !== undefined) {\r\n        sizeTable.data.dimensions = updateDto.dimensions;\r\n      }\r\n\r\n      const updatedSizeTable = await this.sizeTableRepo.save(sizeTable);\r\n      return this.sanitizeSizeTable(updatedSizeTable);\r\n    } catch (error) {\r\n      console.error('Error updating size table:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteSizeTable(id: string): Promise<void> {\r\n    try {\r\n      const sizeTable = await this.sizeTableRepo.findOne({\r\n        where: { id },\r\n      });\r\n\r\n      if (!sizeTable) {\r\n        throw new NotFoundException(`Size table with ID ${id} not found`);\r\n      }\r\n\r\n      await this.sizeTableRepo.remove(sizeTable);\r\n    } catch (error) {\r\n      console.error('Error deleting size table:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"names":["SizeTableCrud","sanitizeSizeTable","sizeTable","id","tableName","data","createSizeTable","createDto","SizeTable","dimensions","savedSizeTable","sizeTableRepo","save","error","console","getAllSizeTables","sizeTables","find","order","map","getSizeTableById","findOne","where","NotFoundException","updateSizeTable","updateDto","undefined","updatedSizeTable","deleteSizeTable","remove","constructor"],"mappings":"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"}