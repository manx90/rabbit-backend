{"version":3,"sources":["../../src/product/size-table.crud.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SizeTable, SizeDimension, SizeField } from './entities/sizeTable';\n\n@Injectable()\nexport class SizeTableCrud {\n  constructor(\n    @InjectRepository(SizeTable)\n    private readonly sizeTableRepo: Repository<SizeTable>,\n    @InjectRepository(SizeDimension)\n    private readonly sizeDimensionRepo: Repository<SizeDimension>,\n    @InjectRepository(SizeField)\n    private readonly sizeFieldRepo: Repository<SizeField>,\n  ) {}\n\n  async createSizeTable(tableData: {\n    tableName: string;\n    sizeDimensions?: Array<{\n      sizeName: string;\n      fields?: Array<{\n        fieldName: string;\n        fieldValue: string;\n      }>;\n    }>;\n  }): Promise<SizeTable | null> {\n    const sizeTable = this.sizeTableRepo.create({\n      tableName: tableData.tableName,\n    });\n\n    const savedTable = await this.sizeTableRepo.save(sizeTable);\n\n    // Create size dimensions if provided\n    if (tableData.sizeDimensions && tableData.sizeDimensions.length > 0) {\n      for (const sizeDim of tableData.sizeDimensions) {\n        const sizeDimension = this.sizeDimensionRepo.create({\n          sizeName: sizeDim.sizeName,\n          sizeTable: savedTable,\n        });\n\n        const savedDimension = await this.sizeDimensionRepo.save(sizeDimension);\n\n        // Create fields if provided\n        if (sizeDim.fields && sizeDim.fields.length > 0) {\n          for (const field of sizeDim.fields) {\n            await this.sizeFieldRepo.save({\n              fieldName: field.fieldName,\n              fieldValue: field.fieldValue,\n              sizeDimension: savedDimension,\n            });\n          }\n        }\n      }\n    }\n\n    return await this.sizeTableRepo.findOne({\n      where: { id: savedTable.id },\n      relations: ['sizeDimensions', 'sizeDimensions.fields'],\n    });\n  }\n\n  async getAllSizeTables(): Promise<SizeTable[]> {\n    return await this.sizeTableRepo.find({\n      relations: ['sizeDimensions', 'sizeDimensions.fields'],\n      order: { id: 'ASC' },\n    });\n  }\n\n  async getSizeTableById(id: number): Promise<SizeTable> {\n    const sizeTable = await this.sizeTableRepo.findOne({\n      where: { id },\n      relations: ['sizeDimensions', 'sizeDimensions.fields'],\n    });\n\n    if (!sizeTable) {\n      throw new NotFoundException(`Size table with ID ${id} not found`);\n    }\n\n    return sizeTable;\n  }\n\n  async updateSizeTable(\n    id: number,\n    updateData: {\n      tableName?: string;\n    },\n  ): Promise<SizeTable> {\n    const sizeTable = await this.sizeTableRepo.findOne({\n      where: { id },\n    });\n\n    if (!sizeTable) {\n      throw new NotFoundException(`Size table with ID ${id} not found`);\n    }\n\n    Object.assign(sizeTable, updateData);\n    return await this.sizeTableRepo.save(sizeTable);\n  }\n\n  async deleteSizeTable(id: number): Promise<void> {\n    const sizeTable = await this.sizeTableRepo.findOne({\n      where: { id },\n    });\n\n    if (!sizeTable) {\n      throw new NotFoundException(`Size table with ID ${id} not found`);\n    }\n\n    await this.sizeTableRepo.remove(sizeTable);\n  }\n\n  async addSizeDimension(\n    tableId: number,\n    sizeData: {\n      sizeName: string;\n      fields?: Array<{\n        fieldName: string;\n        fieldValue: string;\n      }>;\n    },\n  ): Promise<SizeDimension | null> {\n    const sizeTable = await this.sizeTableRepo.findOne({\n      where: { id: tableId },\n    });\n\n    if (!sizeTable) {\n      throw new NotFoundException(`Size table with ID ${tableId} not found`);\n    }\n\n    const sizeDimension = this.sizeDimensionRepo.create({\n      sizeName: sizeData.sizeName,\n      sizeTable,\n    });\n\n    const savedDimension = await this.sizeDimensionRepo.save(sizeDimension);\n\n    // Create fields if provided\n    if (sizeData.fields && sizeData.fields.length > 0) {\n      for (const field of sizeData.fields) {\n        await this.sizeFieldRepo.save({\n          fieldName: field.fieldName,\n          fieldValue: field.fieldValue,\n          sizeDimension: savedDimension,\n        });\n      }\n    }\n\n    return await this.sizeDimensionRepo.findOne({\n      where: { id: savedDimension.id },\n      relations: ['fields'],\n    });\n  }\n}\n"],"names":["SizeTableCrud","createSizeTable","tableData","sizeTable","sizeTableRepo","create","tableName","savedTable","save","sizeDimensions","length","sizeDim","sizeDimension","sizeDimensionRepo","sizeName","savedDimension","fields","field","sizeFieldRepo","fieldName","fieldValue","findOne","where","id","relations","getAllSizeTables","find","order","getSizeTableById","NotFoundException","updateSizeTable","updateData","Object","assign","deleteSizeTable","remove","addSizeDimension","tableId","sizeData","constructor"],"mappings":"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"}