{"version":3,"sources":["../../src/product/product.crud.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Request } from 'express';\nimport { ParsedQs } from 'qs';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { PublishState } from 'src/common/interfaces/entity.interface';\nimport { ApiFeatures } from 'src/common/utils/api-features';\nimport { Repository } from 'typeorm';\nimport { FileStorageService } from '../file-storage/file-storage.service';\nimport { LoggerService } from '../common/utils/logger.service';\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\nimport { category, subCategory } from './entities/Category.entity';\nimport { product } from './entities/product.entity';\nimport { SizeTable } from './entities/sizeTable.entity';\n\ninterface UploadFiles {\n  images?: Express.Multer.File[];\n  imgCover?: Express.Multer.File[];\n  imgColors?: Express.Multer.File[];\n}\n\n@Injectable()\nexport class ProductCrud {\n  constructor(\n    @InjectRepository(product)\n    private readonly productRepo: Repository<product>,\n    @InjectRepository(category)\n    private readonly categoryRepo: Repository<category>,\n    @InjectRepository(subCategory)\n    private readonly subCategoryRepo: Repository<subCategory>,\n    private readonly fileStorageService: FileStorageService,\n    private readonly configService: ConfigService,\n    private readonly logger: LoggerService,\n  ) {}\n\n  private async saveFiles(\n    files: Express.Multer.File[] = [],\n    productName: string,\n    subDirectory: string,\n  ): Promise<string[]> {\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    return await this.fileStorageService.saveFiles(files, productPath);\n  }\n\n  private async saveFile(\n    file: Express.Multer.File,\n    productName: string,\n    subDirectory: string,\n  ): Promise<string> {\n    const productPath = `products/${productName.replace(/\\s+/g, '_').toLowerCase()}/${subDirectory}`;\n    // Save original file without optimization\n    return await this.fileStorageService.saveFile(file, productPath);\n  }\n\n  private async uploadFiles(\n    files: UploadFiles,\n    productName: string,\n  ): Promise<{\n    images?: string[];\n    imgCover?: string;\n    imgColors?: string[];\n  }> {\n    const result: any = {};\n\n    if (files.images && files.images.length > 0) {\n      result.images = await this.saveFiles(files.images, productName, 'images');\n    }\n    if (files.imgCover && files.imgCover.length > 0) {\n      result.imgCover = await this.saveFile(\n        files.imgCover[0],\n        productName,\n        'cover',\n      );\n    }\n    if (files.imgColors && files.imgColors.length > 0) {\n      result.imgColors = await this.saveFiles(\n        files.imgColors,\n        productName,\n        'colors',\n      );\n    }\n    return result;\n  }\n\n  private transformProductUrls(products: product[], req: Request): any[] {\n    const protocol = req.protocol || 'http';\n    const host = req.get('host') || 'localhost:3000';\n    const baseUrl = `${protocol}://${host}`;\n\n    return products.map((product) => {\n      // Create a clone of the product to avoid modifying the original\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const transformed = Object.create(\n        Object.getPrototypeOf(product),\n        Object.getOwnPropertyDescriptors(product),\n      );\n      // Transform image cover URL\n      if (transformed.imgCover && !transformed.imgCover.startsWith('http')) {\n        transformed.imgCover = `${baseUrl}/uploads/${transformed.imgCover}`;\n      }\n      // Transform product images URLs\n      if (transformed.images && Array.isArray(transformed.images)) {\n        transformed.images = transformed.images.map((img: string) =>\n          img && !img.startsWith('http') ? `${baseUrl}/uploads/${img}` : img,\n        );\n      }\n      // Transform color images URLs\n      if (transformed.colors && Array.isArray(transformed.colors)) {\n        transformed.colors = transformed.colors.map((color) => ({\n          ...color,\n          imgColor:\n            color.imgColor && !color.imgColor.startsWith('http')\n              ? `${baseUrl}/uploads/${color.imgColor}`\n              : color.imgColor,\n        }));\n      }\n\n      return transformed;\n    });\n  }\n  /** ----------  Get All Products  ---------- */\n  async getAllProducts(\n    query: ParsedQs,\n    req?: Request,\n  ): Promise<{\n    status: string;\n    results: number;\n    total: number;\n    currentPage: number;\n    limit: number;\n    totalPages: number;\n    lastPage: number;\n    data: product[];\n  }> {\n    try {\n      this.logger.debug(\n        `Starting getAllProducts with query: ${JSON.stringify(query)}`,\n        'ProductCrud',\n      );\n\n      const queryBuilder = this.productRepo\n        .createQueryBuilder('product')\n        .leftJoinAndSelect('product.category', 'category')\n        .leftJoinAndSelect('product.subCategory', 'subCategory')\n        .leftJoinAndSelect('product.poster', 'auth')\n        .leftJoinAndSelect('product.sizeTable', 'sizeTable')\n        .select([\n          'product.id',\n          'product.name',\n          'product.season',\n          'product.wordKeys',\n          'product.videoLink',\n          'product.description',\n          'product.images',\n          'product.productIdsCollection',\n          'product.imgCover',\n          'product.sizeDetails',\n          'product.publishState',\n          'product.isManualPublishState',\n          'product.colors',\n          'product.quantity',\n          'product.isFeatured',\n          'product.isTrending',\n          'product.isNew',\n          'product.isBestSeller',\n          'product.isDeleted',\n          'product.sales',\n          'product.datePublished',\n          'product.createdAt',\n          'product.PosterAt',\n          'product.updatedAt',\n          'category.id',\n          'category.name',\n          'subCategory.name',\n          'subCategory.id',\n          'auth.username',\n          'sizeTable.id',\n          'sizeTable.tableName',\n          'sizeTable.data',\n        ]);\n\n      this.logger.debug('Query builder created successfully', 'ProductCrud');\n\n      const features = new ApiFeatures(\n        queryBuilder,\n        query || {},\n        this.productRepo.metadata,\n      )\n        .filter()\n        .sort()\n        .paginate();\n\n      this.logger.debug('ApiFeatures applied successfully', 'ProductCrud');\n\n      this.logger.logDatabaseOperation(\n        'SELECT',\n        'product',\n        { query: query },\n        'ProductCrud',\n      );\n      const [data, total] = await features.getManyAndCount();\n      this.logger.info(\n        `Query executed successfully. Found ${data.length} products, total: ${total}`,\n        'ProductCrud',\n      );\n\n      const transformedData = req ? this.transformProductUrls(data, req) : data;\n      this.logger.debug('Data transformation completed', 'ProductCrud');\n\n      const pagination = features.getPaginationInfo();\n\n      const result = {\n        status: 'success',\n        results: transformedData.length,\n        total,\n        currentPage: pagination.page,\n        limit: pagination.limit,\n        totalPages: Math.ceil(total / pagination.limit),\n        lastPage: Math.ceil(total / pagination.limit),\n        data: transformedData,\n      };\n\n      this.logger.debug(\n        `Returning result: ${JSON.stringify({\n          status: result.status,\n          results: result.results,\n          total: result.total,\n          currentPage: result.currentPage,\n          limit: result.limit,\n        })}`,\n        'ProductCrud',\n      );\n\n      return result;\n    } catch (error) {\n      this.logger.logError(error, 'ProductCrud', { query: query });\n      throw error;\n    }\n  }\n  async create(\n    dto: CreateProductDto,\n    files: UploadFiles = {},\n    poster: auth,\n    req?: Request,\n  ): Promise<product> {\n    // 1) بناء الكيان الأساسي\n    const Product = new product();\n    const existingProduct = await this.productRepo.findOne({\n      where: { name: dto.name },\n    });\n    if (existingProduct)\n      throw new BadRequestException('Product name already exists');\n    Product.name = dto.name;\n    Product.description = dto.description;\n    Product.poster = { id: poster.id, username: poster.username };\n    Product.category = await this.fetchCategory(dto.categoryId);\n    Product.subCategory = await this.fetchSubCategory(\n      dto.categoryId,\n      dto.subCategoryId,\n    );\n    Product.publishState = dto.publishState as PublishState;\n\n    // 2) Save images to file system and store paths in database\n    try {\n      // Initialize image fields\n      Product.imgCover = '';\n      Product.images = [];\n\n      // Save cover image if provided\n      if (files.imgCover && files.imgCover[0]) {\n        Product.imgCover = await this.saveFile(\n          files.imgCover[0],\n          dto.name,\n          'cover',\n        );\n      }\n\n      // Validate that the count of color images matches the count of color names\n      if (files.imgColors && files.imgColors.length !== dto.colors?.length) {\n        throw new BadRequestException(\n          'The count of color images must match the count of color names',\n          'COLORS_AND_IMAGES_COUNT_DO_NOT_MATCH',\n        );\n      }\n\n      // Save gallery images if provided\n      if (files.images && files.images.length > 0) {\n        Product.images = await this.saveFiles(files.images, dto.name, 'images');\n      }\n    } catch (error) {\n      console.error('Error saving images:', error);\n      throw new Error('Failed to save product images');\n    }\n\n    // Save color images to file system and validate\n    if (files.imgColors && files.imgColors.length > 0) {\n      if (!dto.colors || !Array.isArray(dto.colors)) {\n        throw new BadRequestException(\n          'Colors array is required when uploading color images',\n        );\n      }\n\n      // Save all color images first\n      const colorImagePaths = await this.saveFiles(\n        files.imgColors,\n        dto.name,\n        'colors',\n      );\n\n      // Map color images to colors array\n      Product.colors = colorImagePaths.map((imgPath, index) => ({\n        name:\n          dto.colors && dto.colors[index]\n            ? dto.colors[index].name\n            : `Color ${index + 1}`,\n        imgColor: imgPath,\n      }));\n    } else if (dto.colors && Array.isArray(dto.colors)) {\n      // Handle colors without images\n      Product.colors = dto.colors.map((color) => ({\n        name: color.name,\n        imgColor: '',\n      }));\n    }\n\n    // 3) Categories\n    Product.category = await this.fetchCategory(dto.categoryId);\n    Product.subCategory = await this.fetchSubCategory(\n      dto.categoryId,\n      dto.subCategoryId,\n    );\n\n    // Poster is already assigned in the initial setup\n\n    // 6) Size Details\n    // Validate that color names in quantities match the defined colors\n    if (\n      dto.sizes &&\n      Array.isArray(dto.sizes) &&\n      dto.colors &&\n      Array.isArray(dto.colors)\n    ) {\n      const colorNames = dto.colors.map((color) => color.name);\n      const sizeColorNames = new Set<string>();\n\n      // Collect all color names used in sizes\n      for (const size of dto.sizes) {\n        for (const colorQty of size.quantities) {\n          sizeColorNames.add(colorQty.colorName);\n        }\n      }\n\n      // Convert set to array for comparison\n      const uniqueSizeColorNames = Array.from(sizeColorNames);\n\n      // Check if the count and names match exactly\n      if (uniqueSizeColorNames.length !== colorNames.length) {\n        throw new BadRequestException(\n          'Number of colors in sizes does not match the number of colors defined in the colors list',\n        );\n      }\n\n      // Check if all colors in sizes exist in colors array and vice versa\n      for (const colorName of uniqueSizeColorNames) {\n        if (!colorNames.includes(colorName)) {\n          throw new BadRequestException(\n            `Color \"${colorName}\" used in sizes is not defined in the colors list`,\n          );\n        }\n      }\n\n      for (const colorName of colorNames) {\n        if (!uniqueSizeColorNames.includes(colorName)) {\n          throw new BadRequestException(\n            `Color \"${colorName}\" defined in colors list is not used in any size`,\n          );\n        }\n      }\n    }\n    //  Date Published\n    if (dto.datePublished) {\n      Product.datePublished = dto.datePublished;\n      Product.publishState = PublishState.DRAFT;\n    }\n    Product.sizeDetails = dto.sizes.map((size) => ({\n      sizeName: size.sizeName,\n      price: size.price,\n      quantities: size.quantities.map((colorQty) => ({\n        colorName: colorQty.colorName,\n        quantity: colorQty.quantity,\n      })),\n    }));\n\n    if (dto.wordKeys) Product.wordKeys = dto.wordKeys;\n    if (dto.videoLink) Product.videoLink = dto.videoLink;\n    if (dto.season) Product.season = dto.season;\n    if (dto.sizeTableId) {\n      Product.sizeTable = new SizeTable();\n      Product.sizeTable.id = dto.sizeTableId;\n    }\n\n    // Calculate total quantity\n    Product.quantity = Product.getTotalQuantity();\n\n    try {\n      // Save the product to database\n      const savedProduct = await this.productRepo.save(Product);\n\n      // Transform file paths to full URLs if request object is provided\n      if (req) {\n        const [transformedProduct] = this.transformProductUrls(\n          [savedProduct],\n          req,\n        );\n        return transformedProduct;\n      }\n\n      return savedProduct;\n    } catch (error) {\n      console.error('Error saving product:', error);\n      throw new Error('Failed to save product');\n    }\n  }\n  /** ----------  Update  ---------- */\n  async update(\n    id: number,\n    dto: UpdateProductDto,\n    files: UploadFiles = {},\n    req: Request,\n  ): Promise<product> {\n    const product = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory', 'poster', 'sizeTable'],\n    });\n    if (!product) throw new NotFoundException('Product not found');\n    if (dto.name) product.name = dto.name;\n    if (dto.description) product.description = dto.description;\n    if (dto.categoryId)\n      product.category = await this.fetchCategory(dto.categoryId);\n    if (dto.subCategoryId)\n      product.subCategory = await this.fetchSubCategory(\n        dto.categoryId as number,\n        dto.subCategoryId,\n      );\n    if (dto.publishState) product.publishState = dto.publishState;\n\n    // Update files if provided - save to file system and handle old files properly\n    try {\n      // Handle product images (multiple files)\n      if (files.images && files.images.length > 0) {\n        // Delete old images if they exist\n        if (product.images && product.images.length > 0) {\n          this.fileStorageService.deleteFiles(product.images);\n        }\n        // Save new images\n        product.images = await this.saveFiles(\n          files.images,\n          product.name,\n          'images',\n        );\n      }\n\n      // Handle product cover image (single file)\n      if (files.imgCover && files.imgCover[0]) {\n        // Delete old cover image if it exists\n        if (product.imgCover) {\n          this.fileStorageService.deleteFile(product.imgCover);\n        }\n        // Save new cover image\n        product.imgCover = await this.saveFile(\n          files.imgCover[0],\n          product.name,\n          'cover',\n        );\n      }\n    } catch (error) {\n      console.error('Error handling product files:', error);\n      throw new Error(`Failed to process product files: ${error.message}`);\n    }\n\n    // Update category and subcategory if provided\n    if (dto.categoryId)\n      product.category = await this.fetchCategory(dto.categoryId);\n    if (dto.subCategoryId && dto.categoryId)\n      product.subCategory = await this.fetchSubCategory(\n        dto.categoryId,\n        dto.subCategoryId,\n      );\n    if (dto.sizes && dto.sizes.length > 0) {\n      product.sizeDetails = dto.sizes.map((size, index) => ({\n        sizeName: size?.sizeName,\n        price: size?.price || product.sizeDetails[index].price,\n        quantities: size?.quantities\n          ? size.quantities.map((q, index) => ({\n              colorName: q.colorName,\n              quantity:\n                q?.quantity !== undefined\n                  ? q.quantity\n                  : product.sizeDetails[index].quantities[index].quantity,\n              // imgColors:\n              //   q.imgColors ||\n              //   product.sizeDetails[index].quantities[index].imgColors,\n            }))\n          : product.sizeDetails[index].quantities,\n      }));\n    }\n    try {\n      if (\n        dto.colors &&\n        dto.colors.length > 0 &&\n        files.imgColors &&\n        files.imgColors.length > 0\n      ) {\n        if (product.colors && product.colors.length > 0) {\n          const oldColorImages = product.colors\n            .map((color) => color.imgColor)\n            .filter(\n              (imgPath): imgPath is string => !!imgPath && imgPath.length > 0,\n            );\n\n          if (oldColorImages.length > 0) {\n            this.fileStorageService.deleteFiles(oldColorImages);\n          }\n        }\n\n        // Save new color images to file system\n        const colorImagePaths = await this.saveFiles(\n          files.imgColors,\n          product.name,\n          'colors',\n        );\n\n        product.colors = dto.colors.map((color, index) => ({\n          name:\n            color.name ||\n            (product.colors && product.colors[index]\n              ? product.colors[index].name\n              : ''),\n          imgColor:\n            colorImagePaths[index] ||\n            (product.colors && product.colors[index]\n              ? product.colors[index].imgColor\n              : ''),\n        }));\n      } else if (dto.colors && dto.colors.length > 0) {\n        // Update color names but keep existing image paths\n        product.colors = dto.colors.map((color, index) => ({\n          name:\n            color.name ||\n            (product.colors && product.colors[index]\n              ? product.colors[index].name\n              : ''),\n          imgColor:\n            product.colors && product.colors[index]\n              ? product.colors[index].imgColor\n              : '',\n        }));\n      }\n    } catch (error) {\n      console.error('Error handling product color images:', error);\n      throw new Error(\n        `Failed to process product color images: ${error.message}`,\n      );\n    }\n\n    // Update optional fields\n    if (dto.wordKeys !== undefined) product.wordKeys = dto.wordKeys;\n    if (dto.videoLink !== undefined) product.videoLink = dto.videoLink;\n    if (dto.season !== undefined) product.season = dto.season;\n    if (dto.sizeTableId !== undefined) {\n      if (dto.sizeTableId) {\n        product.sizeTable = new SizeTable();\n        product.sizeTable.id = dto.sizeTableId;\n      } else {\n        product.sizeTable = null;\n      }\n    }\n\n    product.updatedAt = new Date();\n    await this.productRepo.update(id, product);\n    const updatedProduct = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory', 'poster'],\n    });\n    if (!updatedProduct) {\n      throw new NotFoundException(\n        `Product with ID ${id} not found after update`,\n      );\n    }\n    if (req) {\n      const [transformedProduct] = this.transformProductUrls(\n        [updatedProduct],\n        req,\n      );\n      return transformedProduct;\n    }\n    return updatedProduct;\n  }\n  /** ----------  Helpers  ---------- */\n  private async fetchCategory(id: number): Promise<any> {\n    const cat = await this.categoryRepo.findOne({\n      where: { id },\n      relations: ['subCategories'],\n    });\n    if (!cat) throw new NotFoundException(`Category ${id} not found`);\n\n    return { id: cat.id, name: cat.name };\n  }\n  private async fetchSubCategory(idCat: number, idSub: number): Promise<any> {\n    const sub = await this.subCategoryRepo.findOneBy({\n      id: idSub,\n      category: { id: idCat },\n    });\n    if (!sub)\n      throw new NotFoundException(\n        'SubCategory not found or not exist in this category',\n      );\n    return { id: sub.id, name: sub.name };\n  }\n  async remove(\n    id: number,\n  ): Promise<{ success: boolean; product?: any; message?: string }> {\n    this.logger.logApiRequest(\n      'DELETE',\n      `/product/${id}`,\n      undefined,\n      undefined,\n      'ProductCrud',\n    );\n    const start = Date.now();\n    try {\n      const product = await this.productRepo.findOne({ where: { id } });\n      if (!product) throw new NotFoundException('Product not found');\n\n      const productInfo = { id: product.id, name: product.name };\n\n      try {\n        const productPath = `products/${product.name.replace(/\\s+/g, '_').toLowerCase()}`;\n        const deleted = this.fileStorageService.deleteDirectory(productPath);\n        this.logger.info(\n          `deleteDirectory('${productPath}') -> ${deleted}`,\n          'ProductCrud',\n        );\n      } catch (fsErr) {\n        this.logger.warn(\n          `Failed to delete product directory for ${product.name}: ${fsErr instanceof Error ? fsErr.message : String(fsErr)}`,\n          'ProductCrud',\n        );\n      }\n\n      await this.productRepo.remove(product);\n\n      const duration = Date.now() - start;\n      this.logger.logApiResponse(\n        'DELETE',\n        `/product/${id}`,\n        200,\n        duration,\n        'ProductCrud',\n      );\n      return {\n        success: true,\n        product: productInfo,\n        message: 'Product deleted successfully',\n      };\n    } catch (error) {\n      const duration = Date.now() - start;\n      this.logger.logApiResponse(\n        'DELETE',\n        `/product/${id}`,\n        500,\n        duration,\n        'ProductCrud',\n      );\n      this.logger.logError(error as Error, 'ProductCrud', { id });\n      throw error;\n    }\n  }\n\n  async findOne(id: number): Promise<any> {\n    const product = await this.productRepo.findOne({\n      where: { id },\n      relations: ['category', 'subCategory', 'sizeTable'],\n    });\n\n    if (!product) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return product;\n  }\n  async deleteAll(): Promise<void> {\n    const productPath = `products`;\n    this.fileStorageService.deleteDirectory(productPath);\n    await this.productRepo\n      .createQueryBuilder()\n      .delete()\n      .from(product)\n      .where('1 = 1')\n      .execute();\n  }\n  async ConnectProduct(productIds: number[]): Promise<any> {\n    const productsIds: number[] = [];\n    const products = await Promise.all(\n      productIds.map(async (id) => {\n        const prod = await this.productRepo.findOne({ where: { id } });\n        if (!prod) {\n          throw new NotFoundException(`Product with ID ${id} not found`);\n        }\n        productsIds.push(prod.id);\n        return prod;\n      }),\n    );\n    for (const prod of products) {\n      prod.productIdsCollection = productsIds;\n      await this.productRepo.save(prod);\n    }\n    return {\n      data: products,\n      message: 'Products connected successfully',\n    };\n  }\n}\n"],"names":["ProductCrud","saveFiles","files","productName","subDirectory","productPath","replace","toLowerCase","fileStorageService","saveFile","file","uploadFiles","result","images","length","imgCover","imgColors","transformProductUrls","products","req","protocol","host","get","baseUrl","map","product","transformed","Object","create","getPrototypeOf","getOwnPropertyDescriptors","startsWith","Array","isArray","img","colors","color","imgColor","getAllProducts","query","logger","debug","JSON","stringify","queryBuilder","productRepo","createQueryBuilder","leftJoinAndSelect","select","features","ApiFeatures","metadata","filter","sort","paginate","logDatabaseOperation","data","total","getManyAndCount","info","transformedData","pagination","getPaginationInfo","status","results","currentPage","page","limit","totalPages","Math","ceil","lastPage","error","logError","dto","poster","Product","existingProduct","findOne","where","name","BadRequestException","description","id","username","category","fetchCategory","categoryId","subCategory","fetchSubCategory","subCategoryId","publishState","console","Error","colorImagePaths","imgPath","index","sizes","colorNames","sizeColorNames","Set","size","colorQty","quantities","add","colorName","uniqueSizeColorNames","from","includes","datePublished","PublishState","DRAFT","sizeDetails","sizeName","price","quantity","wordKeys","videoLink","season","sizeTableId","sizeTable","SizeTable","getTotalQuantity","savedProduct","save","transformedProduct","update","relations","NotFoundException","deleteFiles","deleteFile","message","q","undefined","oldColorImages","updatedAt","Date","updatedProduct","cat","categoryRepo","idCat","idSub","sub","subCategoryRepo","findOneBy","remove","logApiRequest","start","now","productInfo","deleted","deleteDirectory","fsErr","warn","String","duration","logApiResponse","success","deleteAll","delete","execute","ConnectProduct","productIds","productsIds","Promise","all","prod","push","productIdsCollection","constructor","configService"],"mappings":"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"}