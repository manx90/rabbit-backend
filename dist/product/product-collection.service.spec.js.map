{"version":3,"sources":["../../src/product/product-collection.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ProductCollectionService } from './product-collection.service';\r\nimport { ProductCollection } from './entities/product-collection.entity';\r\nimport { product } from './entities/product.entity';\r\nimport { category, subCategory } from './entities/Category.entity';\r\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\r\nimport { auth } from '../auth/entities/auth.entity';\r\n\r\ndescribe('ProductCollectionService', () => {\r\n  let service: ProductCollectionService;\r\n  let collectionRepo: Repository<ProductCollection>;\r\n  let productRepo: Repository<product>;\r\n  let categoryRepo: Repository<category>;\r\n  let subCategoryRepo: Repository<subCategory>;\r\n\r\n  const mockCollectionRepo = {\r\n    create: jest.fn(),\r\n    save: jest.fn(),\r\n    findOne: jest.fn(),\r\n    find: jest.fn(),\r\n    remove: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  };\r\n\r\n  const mockProductRepo = {\r\n    find: jest.fn(),\r\n    createQueryBuilder: jest.fn(),\r\n  };\r\n\r\n  const mockCategoryRepo = {\r\n    find: jest.fn(),\r\n  };\r\n\r\n  const mockSubCategoryRepo = {\r\n    find: jest.fn(),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        ProductCollectionService,\r\n        {\r\n          provide: getRepositoryToken(ProductCollection),\r\n          useValue: mockCollectionRepo,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(product),\r\n          useValue: mockProductRepo,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(category),\r\n          useValue: mockCategoryRepo,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(subCategory),\r\n          useValue: mockSubCategoryRepo,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<ProductCollectionService>(ProductCollectionService);\r\n    collectionRepo = module.get<Repository<ProductCollection>>(\r\n      getRepositoryToken(ProductCollection),\r\n    );\r\n    productRepo = module.get<Repository<product>>(getRepositoryToken(product));\r\n    categoryRepo = module.get<Repository<category>>(\r\n      getRepositoryToken(category),\r\n    );\r\n    subCategoryRepo = module.get<Repository<subCategory>>(\r\n      getRepositoryToken(subCategory),\r\n    );\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('create', () => {\r\n    const mockUser: auth = {\r\n      id: '1',\r\n      username: 'testuser',\r\n      email: 'test@example.com',\r\n      password: 'hashedpassword',\r\n      role: 'admin',\r\n      isActive: true,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    it('should throw error when no categories, subcategories, or products are provided', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        type: 'mixed' as any,\r\n      };\r\n\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        BadRequestException,\r\n      );\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        'At least one category, subcategory, or product must be provided',\r\n      );\r\n    });\r\n\r\n    it('should throw error when categories are not found', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        categoryIds: [1, 2, 3],\r\n      };\r\n\r\n      mockCategoryRepo.find.mockResolvedValue([]);\r\n\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        NotFoundException,\r\n      );\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        'Categories with IDs [1, 2, 3] not found',\r\n      );\r\n    });\r\n\r\n    it('should throw error when subcategories are not found', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        subCategoryIds: [1, 2, 3],\r\n      };\r\n\r\n      mockSubCategoryRepo.find.mockResolvedValue([]);\r\n\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        NotFoundException,\r\n      );\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        'Subcategories with IDs [1, 2, 3] not found',\r\n      );\r\n    });\r\n\r\n    it('should throw error when products are not found', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        productIds: [1, 2, 3],\r\n      };\r\n\r\n      mockProductRepo.find.mockResolvedValue([]);\r\n\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        NotFoundException,\r\n      );\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        'Products with IDs [1, 2, 3] not found',\r\n      );\r\n    });\r\n\r\n    it('should throw error when subcategories do not belong to specified categories', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        categoryIds: [1],\r\n        subCategoryIds: [2],\r\n      };\r\n\r\n      const mockCategories = [{ id: 1, name: 'Category 1', isActive: true }];\r\n      const mockSubCategories = [\r\n        { id: 2, name: 'SubCategory 2', categoryId: 3, isActive: true },\r\n      ];\r\n\r\n      mockCategoryRepo.find.mockResolvedValue(mockCategories);\r\n      mockSubCategoryRepo.find.mockResolvedValue(mockSubCategories);\r\n\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        BadRequestException,\r\n      );\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        'Subcategories with IDs [2] do not belong to any of the specified categories [1]',\r\n      );\r\n    });\r\n\r\n    it('should throw error when products do not belong to specified categories/subcategories', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        categoryIds: [1],\r\n        productIds: [2],\r\n      };\r\n\r\n      const mockCategories = [{ id: 1, name: 'Category 1', isActive: true }];\r\n      const mockProducts = [\r\n        {\r\n          id: 2,\r\n          name: 'Product 2',\r\n          category: { id: 3 },\r\n          subCategory: { id: 4 },\r\n          isDeleted: false,\r\n        },\r\n      ];\r\n\r\n      mockCategoryRepo.find.mockResolvedValue(mockCategories);\r\n      mockProductRepo.find.mockResolvedValue(mockProducts);\r\n\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        BadRequestException,\r\n      );\r\n      await expect(service.create(createDto, mockUser)).rejects.toThrow(\r\n        'Products with IDs [2] do not belong to the specified categories [1]',\r\n      );\r\n    });\r\n\r\n    it('should create collection successfully with valid data', async () => {\r\n      const createDto = {\r\n        name: 'Test Collection',\r\n        categoryIds: [1],\r\n        subCategoryIds: [2],\r\n        productIds: [3],\r\n      };\r\n\r\n      const mockCategories = [{ id: 1, name: 'Category 1', isActive: true }];\r\n      const mockSubCategories = [\r\n        { id: 2, name: 'SubCategory 2', categoryId: 1, isActive: true },\r\n      ];\r\n      const mockProducts = [\r\n        {\r\n          id: 3,\r\n          name: 'Product 3',\r\n          category: { id: 1 },\r\n          subCategory: { id: 2 },\r\n          isDeleted: false,\r\n        },\r\n      ];\r\n\r\n      const mockCollection = {\r\n        id: 1,\r\n        name: 'Test Collection',\r\n        categories: mockCategories,\r\n        subCategories: mockSubCategories,\r\n        products: mockProducts,\r\n      };\r\n\r\n      mockCategoryRepo.find.mockResolvedValue(mockCategories);\r\n      mockSubCategoryRepo.find.mockResolvedValue(mockSubCategories);\r\n      mockProductRepo.find.mockResolvedValue(mockProducts);\r\n      mockCollectionRepo.create.mockReturnValue(mockCollection);\r\n      mockCollectionRepo.save.mockResolvedValue(mockCollection);\r\n\r\n      const result = await service.create(createDto, mockUser);\r\n\r\n      expect(result).toEqual(mockCollection);\r\n      expect(mockCollectionRepo.create).toHaveBeenCalledWith({\r\n        ...createDto,\r\n        createdBy: mockUser,\r\n        categories: mockCategories,\r\n        subCategories: mockSubCategories,\r\n        products: mockProducts,\r\n      });\r\n      expect(mockCollectionRepo.save).toHaveBeenCalledWith(mockCollection);\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","service","collectionRepo","productRepo","categoryRepo","subCategoryRepo","mockCollectionRepo","create","jest","fn","save","findOne","find","remove","createQueryBuilder","mockProductRepo","mockCategoryRepo","mockSubCategoryRepo","beforeEach","module","Test","createTestingModule","providers","ProductCollectionService","provide","getRepositoryToken","ProductCollection","useValue","product","category","subCategory","compile","get","afterEach","clearAllMocks","mockUser","id","username","email","password","role","isActive","createdAt","Date","updatedAt","it","createDto","name","type","expect","rejects","toThrow","BadRequestException","categoryIds","mockResolvedValue","NotFoundException","subCategoryIds","productIds","mockCategories","mockSubCategories","categoryId","mockProducts","isDeleted","mockCollection","categories","subCategories","products","mockReturnValue","result","toEqual","toHaveBeenCalledWith","createdBy"],"mappings":"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"}