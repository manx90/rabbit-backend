{"version":3,"sources":["../../src/product/product.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Body,\n  UseInterceptors,\n  UploadedFiles,\n  Get,\n  Delete,\n  Param,\n  Put,\n  Req,\n  UseGuards,\n  ClassSerializerInterceptor,\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { ParseFormJsonPipe } from '../common/pipes/parse-form-json.pipe';\nimport { ProductService } from './product.service';\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\nimport { Request } from 'express';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\nimport { Role } from '../common/constants/roles.constant';\nimport { Roles } from '../common/decorators/roles.decorator';\n@Controller('product')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n  @Get()\n  async getAllProducts(@Req() req: Request) {\n    return await this.productService.getAllProducts(req.query);\n  }\n\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @UseInterceptors(\n    FileFieldsInterceptor([\n      { name: 'images', maxCount: 10 },\n      { name: 'imgCover', maxCount: 1 },\n      { name: 'imgSizeChart', maxCount: 1 },\n      { name: 'imgMeasure', maxCount: 1 },\n      { name: 'imgColors', maxCount: 10 },\n    ]),\n    ClassSerializerInterceptor,\n  )\n  async createProduct(\n    @Body(new ParseFormJsonPipe()) createProductDto: CreateProductDto,\n    @UploadedFiles()\n    files: {\n      images?: Express.Multer.File[];\n      imgCover?: Express.Multer.File[];\n      imgSizeChart?: Express.Multer.File[];\n      imgMeasure?: Express.Multer.File[];\n      imgColors?: Express.Multer.File[];\n    },\n    @Req() req: Request,\n  ) {\n    if (\n      !files.images ||\n      !files.imgCover ||\n      !files.imgSizeChart ||\n      !files.imgMeasure ||\n      !files.imgColors\n    ) {\n      throw new BadRequestException('All required files must be uploaded');\n    }\n    const poster = req.user as auth;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.productService.create(createProductDto, files, poster, req);\n  }\n\n  // @Get()\n  // findAll() {\n  //   return this.productService.findAll();\n  // }\n\n  @Get(':id')\n  findOne(@Param('id') id: number) {\n    return this.productService.findOne(+id);\n  }\n\n  @Put(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @UseInterceptors(\n    FileFieldsInterceptor([\n      { name: 'images', maxCount: 10 },\n      { name: 'imgCover', maxCount: 1 },\n      { name: 'imgSizeChart', maxCount: 1 },\n      { name: 'imgMeasure', maxCount: 1 },\n      { name: 'imgColors', maxCount: 10 },\n    ]),\n    ClassSerializerInterceptor,\n  )\n  async updateProduct(\n    @Param('id') id: number,\n    @Body(new ParseFormJsonPipe()) updateProductDto: UpdateProductDto,\n    @UploadedFiles()\n    files: {\n      images?: Express.Multer.File[];\n      imgCover?: Express.Multer.File[];\n      imgSizeChart?: Express.Multer.File[];\n      imgMeasure?: Express.Multer.File[];\n      imgColors?: Express.Multer.File[];\n    },\n    @Req() req: Request,\n  ) {\n    return this.productService.update(+id, updateProductDto, files, req);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  remove(@Param('id') id: number) {\n    return this.productService.remove(+id);\n  }\n\n  @Delete()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  deleteall() {\n    return this.productService.deleteAll();\n  }\n}\n"],"names":["ProductController","getAllProducts","req","productService","query","createProduct","createProductDto","files","images","imgCover","imgSizeChart","imgMeasure","imgColors","BadRequestException","poster","user","create","findOne","id","updateProduct","updateProductDto","update","remove","deleteall","deleteAll","constructor","Admin","SuperAdmin","name","maxCount","ParseFormJsonPipe"],"mappings":";;;;+BA0BaA;;;eAAAA;;;wBAZN;iCAC+B;mCACJ;gCACH;4BACoB;yBAC3B;4BAEG;8BACE;+BACR;gCACC;;;;;;;;;;;;;;;AAEf,IAAA,AAAMA,oBAAN,MAAMA;IAEX,MACMC,eAAe,AAAOC,GAAY,EAAE;QACxC,OAAO,MAAM,IAAI,CAACC,cAAc,CAACF,cAAc,CAACC,IAAIE,KAAK;IAC3D;IAEA,MAaMC,cACJ,AAA+BC,gBAAkC,EACjE,AACAC,KAMC,EACD,AAAOL,GAAY,EACnB;QACA,IACE,CAACK,MAAMC,MAAM,IACb,CAACD,MAAME,QAAQ,IACf,CAACF,MAAMG,YAAY,IACnB,CAACH,MAAMI,UAAU,IACjB,CAACJ,MAAMK,SAAS,EAChB;YACA,MAAM,IAAIC,2BAAmB,CAAC;QAChC;QACA,MAAMC,SAASZ,IAAIa,IAAI;QACvB,+DAA+D;QAC/D,OAAO,IAAI,CAACZ,cAAc,CAACa,MAAM,CAACV,kBAAkBC,OAAOO,QAAQZ;IACrE;IAEA,SAAS;IACT,cAAc;IACd,0CAA0C;IAC1C,IAAI;IAGJe,QAAQ,AAAaC,EAAU,EAAE;QAC/B,OAAO,IAAI,CAACf,cAAc,CAACc,OAAO,CAAC,CAACC;IACtC;IAEA,MAaMC,cACJ,AAAaD,EAAU,EACvB,AAA+BE,gBAAkC,EACjE,AACAb,KAMC,EACD,AAAOL,GAAY,EACnB;QACA,OAAO,IAAI,CAACC,cAAc,CAACkB,MAAM,CAAC,CAACH,IAAIE,kBAAkBb,OAAOL;IAClE;IAKAoB,OAAO,AAAaJ,EAAU,EAAE;QAC9B,OAAO,IAAI,CAACf,cAAc,CAACmB,MAAM,CAAC,CAACJ;IACrC;IAKAK,YAAY;QACV,OAAO,IAAI,CAACpB,cAAc,CAACqB,SAAS;IACtC;IAhGAC,YAAY,AAAiBtB,cAA8B,CAAE;aAAhCA,iBAAAA;IAAiC;AAiGhE;;;;;;;;;;;;;mDAzFcuB,2BAAYC;;QAGpB;YAAEC,MAAM;YAAUC,UAAU;QAAG;QAC/B;YAAED,MAAM;YAAYC,UAAU;QAAE;QAChC;YAAED,MAAM;YAAgBC,UAAU;QAAE;QACpC;YAAED,MAAM;YAAcC,UAAU;QAAE;QAClC;YAAED,MAAM;YAAaC,UAAU;QAAG;;uCAK1BC,oCAAiB;;;;;;;;;;;;;;;;;;;;;;;mDAqCjBJ,2BAAYC;;QAGpB;YAAEC,MAAM;YAAUC,UAAU;QAAG;QAC/B;YAAED,MAAM;YAAYC,UAAU;QAAE;QAChC;YAAED,MAAM;YAAgBC,UAAU;QAAE;QACpC;YAAED,MAAM;YAAcC,UAAU;QAAE;QAClC;YAAED,MAAM;YAAaC,UAAU;QAAG;;;uCAM1BC,oCAAiB;;;;;;;;;;;;;;;mDAgBjBJ,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC"}