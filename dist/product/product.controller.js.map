{"version":3,"sources":["../../src/product/product.controller.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\nimport {\r\n  BadRequestException,\r\n  Body,\r\n  ClassSerializerInterceptor,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  Req,\r\n  UploadedFiles,\r\n  UseGuards,\r\n  UseInterceptors,\r\n} from '@nestjs/common';\r\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\r\nimport { Request } from 'express';\r\nimport { auth } from 'src/auth/entities/auth.entity';\r\nimport { Role } from '../common/constants/roles.constant';\r\nimport { Roles } from '../common/decorators/roles.decorator';\r\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\r\nimport { RolesGuard } from '../common/guards/roles.guard';\r\nimport { ParseFormJsonPipe } from '../common/pipes/parse-form-json.pipe';\r\nimport { LoggerService } from '../common/utils/logger.service';\r\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\r\nimport { ProductCrud } from './product.crud';\r\nimport { ProductService } from './product.service';\r\n@Controller('product')\r\nexport class ProductController {\r\n  constructor(\r\n    private readonly productcrud: ProductCrud,\r\n    private readonly productservice: ProductService,\r\n    private readonly logger: LoggerService,\r\n  ) {}\r\n  @Get()\r\n  async getAllProducts(@Req() req: Request) {\r\n    const startTime = Date.now();\r\n    try {\r\n      this.logger.logApiRequest(\r\n        'GET',\r\n        '/product',\r\n        req.query,\r\n        null,\r\n        'ProductController',\r\n      );\r\n\r\n      const result = await this.productcrud.getAllProducts(req.query);\r\n\r\n      const responseTime = Date.now() - startTime;\r\n      this.logger.logApiResponse(\r\n        'GET',\r\n        '/product',\r\n        200,\r\n        responseTime,\r\n        'ProductController',\r\n      );\r\n      this.logger.info(\r\n        `getAllProducts completed successfully. Found ${result.results} products`,\r\n        'ProductController',\r\n      );\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const responseTime = Date.now() - startTime;\r\n      this.logger.logApiResponse(\r\n        'GET',\r\n        '/product',\r\n        500,\r\n        responseTime,\r\n        'ProductController',\r\n      );\r\n      this.logger.logError(error, 'ProductController', { query: req.query });\r\n      throw error;\r\n    }\r\n  }\r\n  // @Get()\r\n  // async getAllProducts(@Req() req: Request) {\r\n  //   return await this.productcrud.getAllProducts(req.query, req);\r\n  // }\r\n\r\n  @Post()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @UseInterceptors(\r\n    FileFieldsInterceptor([\r\n      { name: 'images', maxCount: 10 },\r\n      { name: 'imgCover', maxCount: 1 },\r\n      { name: 'imgSizeChart', maxCount: 1 },\r\n      { name: 'imgMeasure', maxCount: 1 },\r\n      { name: 'imgColors', maxCount: 10 },\r\n    ]),\r\n    ClassSerializerInterceptor,\r\n  )\r\n  async createProduct(\r\n    @Body(new ParseFormJsonPipe()) createProductDto: CreateProductDto,\r\n    @UploadedFiles()\r\n    files: {\r\n      images?: Express.Multer.File[];\r\n      imgCover?: Express.Multer.File[];\r\n      imgSizeChart?: Express.Multer.File[];\r\n      imgMeasure?: Express.Multer.File[];\r\n      imgColors?: Express.Multer.File[];\r\n    },\r\n    @Req() req: Request,\r\n  ) {\r\n    if (!files.imgCover || !files.imgColors) {\r\n      throw new BadRequestException('imgCover and imgColors must be upload!');\r\n    }\r\n    const poster = req.user as auth;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return this.productcrud.create(createProductDto, files, poster, req);\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: number) {\r\n    return this.productcrud.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @UseInterceptors(\r\n    FileFieldsInterceptor([\r\n      { name: 'images', maxCount: 10 },\r\n      { name: 'imgCover', maxCount: 1 },\r\n      { name: 'imgSizeChart', maxCount: 1 },\r\n      { name: 'imgMeasure', maxCount: 1 },\r\n      { name: 'imgColors', maxCount: 10 },\r\n    ]),\r\n    ClassSerializerInterceptor,\r\n  )\r\n  async updateProduct(\r\n    @Param('id') id: number,\r\n    @Body(new ParseFormJsonPipe()) updateProductDto: UpdateProductDto,\r\n    @UploadedFiles()\r\n    files: {\r\n      images?: Express.Multer.File[];\r\n      imgCover?: Express.Multer.File[];\r\n      imgSizeChart?: Express.Multer.File[];\r\n      imgMeasure?: Express.Multer.File[];\r\n      imgColors?: Express.Multer.File[];\r\n    },\r\n    @Req() req: Request,\r\n  ) {\r\n    return this.productcrud.update(+id, updateProductDto, files, req);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async remove(@Param('id') id: number, @Req() req: Request) {\r\n    const start = Date.now();\r\n    this.logger.logApiRequest(\r\n      'DELETE',\r\n      `/product/${id}`,\r\n      undefined,\r\n      undefined,\r\n      'ProductController',\r\n    );\r\n    try {\r\n      const result = await this.productcrud.remove(+id);\r\n      const duration = Date.now() - start;\r\n      this.logger.logApiResponse(\r\n        'DELETE',\r\n        `/product/${id}`,\r\n        200,\r\n        duration,\r\n        'ProductController',\r\n      );\r\n      return result;\r\n    } catch (error) {\r\n      const duration = Date.now() - start;\r\n      this.logger.logApiResponse(\r\n        'DELETE',\r\n        `/product/${id}`,\r\n        500,\r\n        duration,\r\n        'ProductController',\r\n      );\r\n      this.logger.logError(error, 'ProductController', { id });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Delete()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  deleteall() {\r\n    return this.productcrud.deleteAll();\r\n  }\r\n\r\n  @Post('connectProductIds')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  connectProduct(@Body() body: { productIds: number[] }) {\r\n    const ProductsIds = body.productIds?.map((id) =>\r\n      Number(id.toString().trim()),\r\n    );\r\n    return this.productcrud.ConnectProduct(ProductsIds);\r\n  }\r\n\r\n  @Get(':id/publish')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async updatePublishState(@Param('id') id: number) {\r\n    console.log('run this api publish', id);\r\n    return this.productservice.UpdateStatus(+id);\r\n  }\r\n  @Put('ShowSeason/spring')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async showSeasonSpring() {\r\n    const season = 'spring_autumn';\r\n    const count = await this.productservice.ShowSeason(season);\r\n    return { message: `Published ${count} products for (spring)` };\r\n  }\r\n  @Put('ShowSeason/summer')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async showSeasonSummer() {\r\n    const season = 'summer';\r\n    const count = await this.productservice.ShowSeason(season);\r\n    return { message: `Published ${count} products for (summer)` };\r\n  }\r\n  @Put('ShowSeason/winter')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async showSeasonWinter() {\r\n    const season = 'winter';\r\n    const count = await this.productservice.ShowSeason(season);\r\n    return { message: `Published ${count} products for  (winter)` };\r\n  }\r\n  @Put('hideseason/winter')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async hideSeasonWinter() {\r\n    const season = 'winter';\r\n    const count = await this.productservice.HiddenSeason(season);\r\n    return { message: `Draft ${count} products for  (winter)` };\r\n  }\r\n  @Put('hideseason/summer')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async hideSeasonSummer() {\r\n    const season = 'winter';\r\n    const count = await this.productservice.HiddenSeason(season);\r\n    return { message: `Draft ${count} products for  (winter)` };\r\n  }\r\n  @Put('hideseason/spring')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async hideSeasonSpring() {\r\n    const season = 'winter';\r\n    const count = await this.productservice.HiddenSeason(season);\r\n    return { message: `Draft ${count} products for  (winter)` };\r\n  }\r\n\r\n  // ========== STATISTICS ENDPOINTS ==========\r\n\r\n  @Get('stats/overview')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductStatsOverview() {\r\n    return await this.productservice.getComprehensiveStats();\r\n  }\r\n\r\n  @Get('stats/total')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getTotalProductsCount() {\r\n    const count = await this.productservice.getTotalProductsCount();\r\n    return { totalProducts: count };\r\n  }\r\n\r\n  @Get('stats/publish-state')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCountByPublishState() {\r\n    return await this.productservice.getProductsCountByPublishState();\r\n  }\r\n\r\n  @Get('stats/season')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCountBySeason() {\r\n    return await this.productservice.getProductsCountBySeason();\r\n  }\r\n\r\n  @Get('stats/flags')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCountByFlags() {\r\n    return await this.productservice.getProductsCountByFlags();\r\n  }\r\n\r\n  @Get('stats/recent/:days')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCreatedInLastDays(@Param('days') days: number) {\r\n    const count = await this.productservice.getProductsCreatedInLastDays(days);\r\n    return {\r\n      days: days,\r\n      count: count,\r\n      message: `${count} products created in the last ${days} days`,\r\n    };\r\n  }\r\n\r\n  @Get('stats/category')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCountByCategory() {\r\n    return await this.productservice.getProductsCountByCategory();\r\n  }\r\n\r\n  @Get('stats/subcategory')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCountBySubCategory() {\r\n    return await this.productservice.getProductsCountBySubCategory();\r\n  }\r\n\r\n  @Get('stats/top-selling')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getTopSellingProducts(@Query('limit') limit?: number) {\r\n    const limitNum = limit ? parseInt(limit.toString()) : 10;\r\n    return await this.productservice.getTopSellingProducts(limitNum);\r\n  }\r\n\r\n  @Get('stats/low-stock')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getLowStockProducts(@Query('threshold') threshold?: number) {\r\n    const thresholdNum = threshold ? parseInt(threshold.toString()) : 10;\r\n    return await this.productservice.getLowStockProducts(thresholdNum);\r\n  }\r\n\r\n  @Get('stats/missing-images')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsWithoutImages() {\r\n    return await this.productservice.getProductsWithoutImages();\r\n  }\r\n\r\n  @Get('stats/creators')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCountByCreator() {\r\n    return await this.productservice.getProductsCountByCreator();\r\n  }\r\n\r\n  @Get('stats/scheduled')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getScheduledProducts() {\r\n    return await this.productservice.getScheduledProducts();\r\n  }\r\n\r\n  @Get('stats/date-range')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getProductsCreatedInDateRange(\r\n    @Query('startDate') startDate: string,\r\n    @Query('endDate') endDate: string,\r\n  ) {\r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n    const count = await this.productservice.getProductsCreatedInDateRange(\r\n      start,\r\n      end,\r\n    );\r\n    return {\r\n      startDate: start,\r\n      endDate: end,\r\n      count: count,\r\n      message: `${count} products created between ${startDate} and ${endDate}`,\r\n    };\r\n  }\r\n}\r\n"],"names":["ProductController","getAllProducts","req","startTime","Date","now","logger","logApiRequest","query","result","productcrud","responseTime","logApiResponse","info","results","error","logError","createProduct","createProductDto","files","imgCover","imgColors","BadRequestException","poster","user","create","findOne","id","updateProduct","updateProductDto","update","remove","start","undefined","duration","deleteall","deleteAll","connectProduct","body","ProductsIds","productIds","map","Number","toString","trim","ConnectProduct","updatePublishState","console","log","productservice","UpdateStatus","showSeasonSpring","season","count","ShowSeason","message","showSeasonSummer","showSeasonWinter","hideSeasonWinter","HiddenSeason","hideSeasonSummer","hideSeasonSpring","getProductStatsOverview","getComprehensiveStats","getTotalProductsCount","totalProducts","getProductsCountByPublishState","getProductsCountBySeason","getProductsCountByFlags","getProductsCreatedInLastDays","days","getProductsCountByCategory","getProductsCountBySubCategory","getTopSellingProducts","limit","limitNum","parseInt","getLowStockProducts","threshold","thresholdNum","getProductsWithoutImages","getProductsCountByCreator","getScheduledProducts","getProductsCreatedInDateRange","startDate","endDate","end","constructor","Admin","SuperAdmin","name","maxCount","ParseFormJsonPipe"],"mappings":"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"}