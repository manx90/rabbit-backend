{"version":3,"sources":["../../src/product/product.controller.ts"],"sourcesContent":["import {\r\n  Controller,\r\n  Post,\r\n  Body,\r\n  UseInterceptors,\r\n  UploadedFiles,\r\n  Get,\r\n  Delete,\r\n  Param,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n  ClassSerializerInterceptor,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\r\nimport { ParseFormJsonPipe } from '../common/pipes/parse-form-json.pipe';\r\nimport { ProductService } from './product.service';\r\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\r\nimport { Request } from 'express';\r\nimport { auth } from 'src/auth/entities/auth.entity';\r\nimport { RolesGuard } from '../common/guards/roles.guard';\r\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\r\nimport { Role } from '../common/constants/roles.constant';\r\nimport { Roles } from '../common/decorators/roles.decorator';\r\n@Controller('product')\r\nexport class ProductController {\r\n  constructor(private readonly productService: ProductService) {}\r\n  @Get()\r\n  async getAllProducts(@Req() req: Request) {\r\n    return await this.productService.getAllProducts(req.query);\r\n  }\r\n\r\n  @Post()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @UseInterceptors(\r\n    FileFieldsInterceptor([\r\n      { name: 'images', maxCount: 10 },\r\n      { name: 'imgCover', maxCount: 1 },\r\n      { name: 'imgSizeChart', maxCount: 1 },\r\n      { name: 'imgMeasure', maxCount: 1 },\r\n      { name: 'imgColors', maxCount: 10 },\r\n    ]),\r\n    ClassSerializerInterceptor,\r\n  )\r\n  async createProduct(\r\n    @Body(new ParseFormJsonPipe()) createProductDto: CreateProductDto,\r\n    @UploadedFiles()\r\n    files: {\r\n      images?: Express.Multer.File[];\r\n      imgCover?: Express.Multer.File[];\r\n      imgSizeChart?: Express.Multer.File[];\r\n      imgMeasure?: Express.Multer.File[];\r\n      imgColors?: Express.Multer.File[];\r\n    },\r\n    @Req() req: Request,\r\n  ) {\r\n    if (\r\n      !files.imgCover ||\r\n      !files.imgColors\r\n    ) {\r\n      throw new BadRequestException('imgCover and ImgColors must be upload!');\r\n    }\r\n    const poster = req.user as auth;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return this.productService.create(createProductDto, files, poster, req);\r\n  }\r\n\r\n  // @Get()\r\n  // findAll() {\r\n  //   return this.productService.findAll();\r\n  // }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: number) {\r\n    return this.productService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @UseInterceptors(\r\n    FileFieldsInterceptor([\r\n      { name: 'images', maxCount: 10 },\r\n      { name: 'imgCover', maxCount: 1 },\r\n      { name: 'imgSizeChart', maxCount: 1 },\r\n      { name: 'imgMeasure', maxCount: 1 },\r\n      { name: 'imgColors', maxCount: 10 },\r\n    ]),\r\n    ClassSerializerInterceptor,\r\n  )\r\n  async updateProduct(\r\n    @Param('id') id: number,\r\n    @Body(new ParseFormJsonPipe()) updateProductDto: UpdateProductDto,\r\n    @UploadedFiles()\r\n    files: {\r\n      images?: Express.Multer.File[];\r\n      imgCover?: Express.Multer.File[];\r\n      imgSizeChart?: Express.Multer.File[];\r\n      imgMeasure?: Express.Multer.File[];\r\n      imgColors?: Express.Multer.File[];\r\n    },\r\n    @Req() req: Request,\r\n  ) {\r\n    return this.productService.update(+id, updateProductDto, files, req);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  remove(@Param('id') id: number) {\r\n    return this.productService.remove(+id);\r\n  }\r\n\r\n  @Delete()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  deleteall() {\r\n    return this.productService.deleteAll();\r\n  }\r\n}\r\n"],"names":["ProductController","getAllProducts","req","productService","query","createProduct","createProductDto","files","imgCover","imgColors","BadRequestException","poster","user","create","findOne","id","updateProduct","updateProductDto","update","remove","deleteall","deleteAll","constructor","Admin","SuperAdmin","name","maxCount","ParseFormJsonPipe"],"mappings":";;;;+BA0BaA;;;eAAAA;;;wBAZN;iCAC+B;mCACJ;gCACH;4BACoB;yBAC3B;4BAEG;8BACE;+BACR;gCACC;;;;;;;;;;;;;;;AAEf,IAAA,AAAMA,oBAAN,MAAMA;IAEX,MACMC,eAAe,AAAOC,GAAY,EAAE;QACxC,OAAO,MAAM,IAAI,CAACC,cAAc,CAACF,cAAc,CAACC,IAAIE,KAAK;IAC3D;IAEA,MAaMC,cACJ,AAA+BC,gBAAkC,EACjE,AACAC,KAMC,EACD,AAAOL,GAAY,EACnB;QACA,IACE,CAACK,MAAMC,QAAQ,IACf,CAACD,MAAME,SAAS,EAChB;YACA,MAAM,IAAIC,2BAAmB,CAAC;QAChC;QACA,MAAMC,SAAST,IAAIU,IAAI;QACvB,+DAA+D;QAC/D,OAAO,IAAI,CAACT,cAAc,CAACU,MAAM,CAACP,kBAAkBC,OAAOI,QAAQT;IACrE;IAEA,SAAS;IACT,cAAc;IACd,0CAA0C;IAC1C,IAAI;IAGJY,QAAQ,AAAaC,EAAU,EAAE;QAC/B,OAAO,IAAI,CAACZ,cAAc,CAACW,OAAO,CAAC,CAACC;IACtC;IAEA,MAaMC,cACJ,AAAaD,EAAU,EACvB,AAA+BE,gBAAkC,EACjE,AACAV,KAMC,EACD,AAAOL,GAAY,EACnB;QACA,OAAO,IAAI,CAACC,cAAc,CAACe,MAAM,CAAC,CAACH,IAAIE,kBAAkBV,OAAOL;IAClE;IAKAiB,OAAO,AAAaJ,EAAU,EAAE;QAC9B,OAAO,IAAI,CAACZ,cAAc,CAACgB,MAAM,CAAC,CAACJ;IACrC;IAKAK,YAAY;QACV,OAAO,IAAI,CAACjB,cAAc,CAACkB,SAAS;IACtC;IA7FAC,YAAY,AAAiBnB,cAA8B,CAAE;aAAhCA,iBAAAA;IAAiC;AA8FhE;;;;;;;;;;;;;mDAtFcoB,2BAAYC;;QAGpB;YAAEC,MAAM;YAAUC,UAAU;QAAG;QAC/B;YAAED,MAAM;YAAYC,UAAU;QAAE;QAChC;YAAED,MAAM;YAAgBC,UAAU;QAAE;QACpC;YAAED,MAAM;YAAcC,UAAU;QAAE;QAClC;YAAED,MAAM;YAAaC,UAAU;QAAG;;uCAK1BC,oCAAiB;;;;;;;;;;;;;;;;;;;;;;;mDAkCjBJ,2BAAYC;;QAGpB;YAAEC,MAAM;YAAUC,UAAU;QAAG;QAC/B;YAAED,MAAM;YAAYC,UAAU;QAAE;QAChC;YAAED,MAAM;YAAgBC,UAAU;QAAE;QACpC;YAAED,MAAM;YAAcC,UAAU;QAAE;QAClC;YAAED,MAAM;YAAaC,UAAU;QAAG;;;uCAM1BC,oCAAiB;;;;;;;;;;;;;;;mDAgBjBJ,2BAAYC;;;;;;;;;;;mDAOZD,2BAAYC"}