{"version":3,"sources":["../../src/product/product.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport {\n  BadRequestException,\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UploadedFiles,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiConsumes,\n} from '@nestjs/swagger';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { Request } from 'express';\nimport { auth } from 'src/auth/entities/auth.entity';\nimport { Role } from '../common/constants/roles.constant';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { ParseFormJsonPipe } from '../common/pipes/parse-form-json.pipe';\nimport { LoggerService } from '../common/utils/logger.service';\nimport { CreateProductDto, UpdateProductDto } from './dto/Product.dto';\nimport { ProductCrud } from './product.crud';\nimport { ProductService } from './product.service';\n@ApiTags('Products')\n@Controller('product')\nexport class ProductController {\n  constructor(\n    private readonly productcrud: ProductCrud,\n    private readonly productservice: ProductService,\n    private readonly logger: LoggerService,\n  ) {}\n  @Get()\n  @ApiOperation({ summary: 'Get all products with pagination and filters' })\n  @ApiQuery({ name: 'page', required: false, description: 'Page number' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Items per page' })\n  @ApiQuery({\n    name: 'category',\n    required: false,\n    description: 'Filter by category',\n  })\n  @ApiQuery({\n    name: 'subcategory',\n    required: false,\n    description: 'Filter by subcategory',\n  })\n  @ApiQuery({\n    name: 'season',\n    required: false,\n    description: 'Filter by season',\n  })\n  @ApiQuery({\n    name: 'published',\n    required: false,\n    description: 'Filter by published status',\n  })\n  @ApiOkResponse({ description: 'Products retrieved successfully' })\n  async getAllProducts(@Req() req: Request) {\n    const startTime = Date.now();\n    try {\n      this.logger.logApiRequest(\n        'GET',\n        '/product',\n        req.query,\n        null,\n        'ProductController',\n      );\n\n      const result = await this.productcrud.getAllProducts(req.query);\n\n      const responseTime = Date.now() - startTime;\n      this.logger.logApiResponse(\n        'GET',\n        '/product',\n        200,\n        responseTime,\n        'ProductController',\n      );\n      this.logger.info(\n        `getAllProducts completed successfully. Found ${result.results} products`,\n        'ProductController',\n      );\n\n      return result;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      this.logger.logApiResponse(\n        'GET',\n        '/product',\n        500,\n        responseTime,\n        'ProductController',\n      );\n      this.logger.logError(error, 'ProductController', { query: req.query });\n      throw error;\n    }\n  }\n\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new product (Admin/SuperAdmin only)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Product data with file uploads',\n    schema: {\n      type: 'object',\n      properties: {\n        // Product fields will be defined by CreateProductDto\n        images: { type: 'array', items: { type: 'string', format: 'binary' } },\n        imgCover: { type: 'string', format: 'binary' },\n        imgSizeChart: { type: 'string', format: 'binary' },\n        imgMeasure: { type: 'string', format: 'binary' },\n        imgColors: {\n          type: 'array',\n          items: { type: 'string', format: 'binary' },\n        },\n      },\n    },\n  })\n  @ApiCreatedResponse({ description: 'Product created successfully' })\n  @ApiBadRequestResponse({\n    description: 'Bad request - validation failed or missing required files',\n  })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor([\n      { name: 'images', maxCount: 10 },\n      { name: 'imgCover', maxCount: 1 },\n      { name: 'imgSizeChart', maxCount: 1 },\n      { name: 'imgMeasure', maxCount: 1 },\n      { name: 'imgColors', maxCount: 10 },\n    ]),\n    ClassSerializerInterceptor,\n  )\n  async createProduct(\n    @Body(new ParseFormJsonPipe()) createProductDto: CreateProductDto,\n    @UploadedFiles()\n    files: {\n      images?: Express.Multer.File[];\n      imgCover?: Express.Multer.File[];\n      imgSizeChart?: Express.Multer.File[];\n      imgMeasure?: Express.Multer.File[];\n      imgColors?: Express.Multer.File[];\n    },\n    @Req() req: Request,\n  ) {\n    if (!files.imgCover || !files.imgColors) {\n      throw new BadRequestException('imgCover and imgColors must be upload!');\n    }\n    const poster = req.user as auth;\n    return this.productcrud.create(createProductDto, files, poster, req);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get product by ID' })\n  @ApiParam({ name: 'id', description: 'Product ID', type: 'number' })\n  @ApiOkResponse({ description: 'Product retrieved successfully' })\n  @ApiNotFoundResponse({ description: 'Product not found' })\n  findOne(@Param('id') id: number) {\n    return this.productcrud.findOne(+id);\n  }\n\n  @Put(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update product by ID (Admin/SuperAdmin only)' })\n  @ApiParam({ name: 'id', description: 'Product ID', type: 'number' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Product data with optional file uploads',\n    schema: {\n      type: 'object',\n      properties: {\n        // Product fields will be defined by UpdateProductDto\n        images: { type: 'array', items: { type: 'string', format: 'binary' } },\n        imgCover: { type: 'string', format: 'binary' },\n        imgColors: {\n          type: 'array',\n          items: { type: 'string', format: 'binary' },\n        },\n      },\n    },\n  })\n  @ApiOkResponse({ description: 'Product updated successfully' })\n  @ApiNotFoundResponse({ description: 'Product not found' })\n  @ApiBadRequestResponse({ description: 'Bad request - validation failed' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  @UseInterceptors(\n    FileFieldsInterceptor([\n      { name: 'images', maxCount: 10 },\n      { name: 'imgCover', maxCount: 1 },\n      { name: 'imgSizeChart', maxCount: 1 },\n      { name: 'imgMeasure', maxCount: 1 },\n      { name: 'imgColors', maxCount: 10 },\n    ]),\n    ClassSerializerInterceptor,\n  )\n  async updateProduct(\n    @Param('id') id: number,\n    @Body(new ParseFormJsonPipe()) updateProductDto: UpdateProductDto,\n    @UploadedFiles()\n    files: {\n      images?: Express.Multer.File[];\n      imgCover?: Express.Multer.File[];\n      imgSizeChart?: Express.Multer.File[];\n      imgMeasure?: Express.Multer.File[];\n      imgColors?: Express.Multer.File[];\n    },\n    @Req() req: Request,\n  ) {\n    return this.productcrud.update(+id, updateProductDto, files, req);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete product by ID (Admin/SuperAdmin only)' })\n  @ApiParam({ name: 'id', description: 'Product ID', type: 'number' })\n  @ApiOkResponse({ description: 'Product deleted successfully' })\n  @ApiNotFoundResponse({ description: 'Product not found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  async remove(@Param('id') id: number, @Req() req: Request) {\n    const start = Date.now();\n    this.logger.logApiRequest(\n      'DELETE',\n      `/product/${id}`,\n      undefined,\n      undefined,\n      'ProductController',\n    );\n    try {\n      const result = await this.productcrud.remove(+id);\n      const duration = Date.now() - start;\n      this.logger.logApiResponse(\n        'DELETE',\n        `/product/${id}`,\n        200,\n        duration,\n        'ProductController',\n      );\n      return result;\n    } catch (error) {\n      const duration = Date.now() - start;\n      this.logger.logApiResponse(\n        'DELETE',\n        `/product/${id}`,\n        500,\n        duration,\n        'ProductController',\n      );\n      this.logger.logError(error, 'ProductController', { id });\n      throw error;\n    }\n  }\n\n  @Delete()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  deleteall() {\n    return this.productcrud.deleteAll();\n  }\n\n  @Post('connectProductIds')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  connectProduct(@Body() body: { productIds: number[] }) {\n    const ProductsIds = body.productIds?.map((id) =>\n      Number(id.toString().trim()),\n    );\n    return this.productcrud.ConnectProduct(ProductsIds);\n  }\n\n  @Get(':id/publish')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async updatePublishState(@Param('id') id: number) {\n    console.log('run this api publish', id);\n    return this.productservice.UpdateStatus(+id);\n  }\n  @Put('ShowSeason/spring')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async showSeasonSpring() {\n    const season = 'spring_autumn';\n    const count = await this.productservice.ShowSeason(season);\n    return { message: `Published ${count} products for (spring)` };\n  }\n  @Put('ShowSeason/summer')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async showSeasonSummer() {\n    const season = 'summer';\n    const count = await this.productservice.ShowSeason(season);\n    return { message: `Published ${count} products for (summer)` };\n  }\n  @Put('ShowSeason/winter')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async showSeasonWinter() {\n    const season = 'winter';\n    const count = await this.productservice.ShowSeason(season);\n    return { message: `Published ${count} products for  (winter)` };\n  }\n  @Put('hideseason/winter')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async hideSeasonWinter() {\n    const season = 'winter';\n    const count = await this.productservice.HiddenSeason(season);\n    return { message: `Draft ${count} products for  (winter)` };\n  }\n  @Put('hideseason/summer')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async hideSeasonSummer() {\n    const season = 'winter';\n    const count = await this.productservice.HiddenSeason(season);\n    return { message: `Draft ${count} products for  (winter)` };\n  }\n  @Put('hideseason/spring')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async hideSeasonSpring() {\n    const season = 'winter';\n    const count = await this.productservice.HiddenSeason(season);\n    return { message: `Draft ${count} products for  (winter)` };\n  }\n\n  // ========== STATISTICS ENDPOINTS ==========\n\n  @Get('stats/overview')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductStatsOverview() {\n    return await this.productservice.getComprehensiveStats();\n  }\n\n  @Get('stats/total')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getTotalProductsCount() {\n    const count = await this.productservice.getTotalProductsCount();\n    return { totalProducts: count };\n  }\n\n  @Get('stats/publish-state')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCountByPublishState() {\n    return await this.productservice.getProductsCountByPublishState();\n  }\n\n  @Get('stats/season')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCountBySeason() {\n    return await this.productservice.getProductsCountBySeason();\n  }\n\n  @Get('stats/flags')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCountByFlags() {\n    return await this.productservice.getProductsCountByFlags();\n  }\n\n  @Get('stats/recent/:days')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCreatedInLastDays(@Param('days') days: number) {\n    const count = await this.productservice.getProductsCreatedInLastDays(days);\n    return {\n      days: days,\n      count: count,\n      message: `${count} products created in the last ${days} days`,\n    };\n  }\n\n  @Get('stats/category')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCountByCategory() {\n    return await this.productservice.getProductsCountByCategory();\n  }\n\n  @Get('stats/subcategory')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCountBySubCategory() {\n    return await this.productservice.getProductsCountBySubCategory();\n  }\n\n  @Get('stats/top-selling')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getTopSellingProducts(@Query('limit') limit?: number) {\n    const limitNum = limit ? parseInt(limit.toString()) : 10;\n    return await this.productservice.getTopSellingProducts(limitNum);\n  }\n\n  @Get('stats/top-selling/:limit')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getTopSellingProductsByParam(@Param('limit') limit: string) {\n    const limitNum = limit ? parseInt(limit.toString()) : 10;\n    return await this.productservice.getTopSellingProducts(limitNum);\n  }\n\n  @Get('stats/low-stock')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getLowStockProducts(@Query('threshold') threshold?: number) {\n    const thresholdNum = threshold ? parseInt(threshold.toString()) : 10;\n    return await this.productservice.getLowStockProducts(thresholdNum);\n  }\n\n  @Get('stats/low-stock/:threshold')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getLowStockProductsByParam(@Param('threshold') threshold: string) {\n    const thresholdNum = threshold ? parseInt(threshold.toString()) : 10;\n    return await this.productservice.getLowStockProducts(thresholdNum);\n  }\n\n  @Get('stats/missing-images')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsWithoutImages() {\n    return await this.productservice.getProductsWithoutImages();\n  }\n\n  @Get('stats/creators')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCountByCreator() {\n    return await this.productservice.getProductsCountByCreator();\n  }\n\n  @Get('stats/sales')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getSalesStatistics() {\n    return await this.productservice.getSalesStatistics();\n  }\n\n  @Get('stats/avg-sales')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getAverageSalesPerProduct() {\n    return await this.productservice.getAverageSalesPerProduct();\n  }\n\n  @Get('stats/scheduled')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getScheduledProducts() {\n    return await this.productservice.getScheduledProducts();\n  }\n\n  @Get('stats/date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getProductsCreatedInDateRange(\n    @Query('startDate') startDate: string,\n    @Query('endDate') endDate: string,\n  ) {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const count = await this.productservice.getProductsCreatedInDateRange(\n      start,\n      end,\n    );\n    return {\n      startDate: start,\n      endDate: end,\n      count: count,\n      message: `${count} products created between ${startDate} and ${endDate}`,\n    };\n  }\n}\n"],"names":["ProductController","getAllProducts","req","startTime","Date","now","logger","logApiRequest","query","result","productcrud","responseTime","logApiResponse","info","results","error","logError","createProduct","createProductDto","files","imgCover","imgColors","BadRequestException","poster","user","create","findOne","id","updateProduct","updateProductDto","update","remove","start","undefined","duration","deleteall","deleteAll","connectProduct","body","ProductsIds","productIds","map","Number","toString","trim","ConnectProduct","updatePublishState","console","log","productservice","UpdateStatus","showSeasonSpring","season","count","ShowSeason","message","showSeasonSummer","showSeasonWinter","hideSeasonWinter","HiddenSeason","hideSeasonSummer","hideSeasonSpring","getProductStatsOverview","getComprehensiveStats","getTotalProductsCount","totalProducts","getProductsCountByPublishState","getProductsCountBySeason","getProductsCountByFlags","getProductsCreatedInLastDays","days","getProductsCountByCategory","getProductsCountBySubCategory","getTopSellingProducts","limit","limitNum","parseInt","getTopSellingProductsByParam","getLowStockProducts","threshold","thresholdNum","getLowStockProductsByParam","getProductsWithoutImages","getProductsCountByCreator","getSalesStatistics","getAverageSalesPerProduct","getScheduledProducts","getProductsCreatedInDateRange","startDate","endDate","end","constructor","summary","name","required","description","Admin","SuperAdmin","schema","type","properties","images","items","format","imgSizeChart","imgMeasure","maxCount","ParseFormJsonPipe"],"mappings":"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"}