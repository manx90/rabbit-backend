{"version":3,"sources":["../../src/product/product-collection.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n  Req,\n  UseGuards,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  BadRequestException,\n  HttpStatus,\n  HttpException,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { ProductCollectionService } from './product-collection.service';\nimport {\n  CreateProductCollectionDto,\n  UpdateProductCollectionDto,\n  ProductCollectionResponseDto,\n} from './dto/product-collection.dto';\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { Role } from '../common/constants/roles.constant';\nimport { Request } from 'express';\nimport { auth } from 'src/auth/entities/auth.entity';\n\n@ApiTags('Product Collections')\n@Controller('collections')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class ProductCollectionController {\n  constructor(private readonly collectionService: ProductCollectionService) {}\n\n  // ==================== ADMIN ENDPOINTS ====================\n\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new product collection (Admin only)' })\n  @ApiResponse({\n    status: 201,\n    description: 'Collection created successfully',\n    type: ProductCollectionResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad request - validation failed',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - categories, subcategories, or products not found',\n  })\n  async createCollection(\n    @Body() createDto: CreateProductCollectionDto,\n    @Req() req: Request,\n  ) {\n    try {\n      const user = req.user as auth;\n      return await this.collectionService.create(createDto, user);\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to create collection',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('admin')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get all collections with pagination (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collections retrieved successfully',\n  })\n  async getAllCollections(@Query() query: any) {\n    try {\n      const data = await this.collectionService.getAllCollections(query);\n      return {\n        status: '200',\n        data: data,\n      };\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve collections',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('admin/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get a specific collection by ID (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collection retrieved successfully',\n    type: ProductCollectionResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Collection not found',\n  })\n  async getCollectionById(@Param('id') id: number) {\n    try {\n      return await this.collectionService.findOne(+id);\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve collection',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Put(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a collection (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collection updated successfully',\n    type: ProductCollectionResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad request - validation failed',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Collection, categories, subcategories, or products not found',\n  })\n  async updateCollection(\n    @Param('id') id: number,\n    @Body() updateDto: UpdateProductCollectionDto,\n  ) {\n    try {\n      return await this.collectionService.update(+id, updateDto);\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to update collection',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a collection (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collection deleted successfully',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Collection not found',\n  })\n  async deleteCollection(@Param('id') id: number) {\n    try {\n      await this.collectionService.remove(+id);\n      return { message: 'Collection deleted successfully' };\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to delete collection',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  // ==================== CLIENT ENDPOINTS ====================\n\n  @Get()\n  @ApiOperation({ summary: 'Get all active collections (Public)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Active collections retrieved successfully',\n  })\n  async getActiveCollections() {\n    try {\n      const collections = await this.collectionService.getActiveCollections();\n      return {\n        status: 'success',\n        data: collections,\n      };\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve active collections',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('priority')\n  @ApiOperation({ summary: 'Get priority collections (Public)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Priority collections retrieved successfully',\n  })\n  async getPriorityCollections() {\n    try {\n      return await this.collectionService.getPriorityCollections();\n    } catch (error) {\n      throw new HttpException(\n        'Failed to retrieve priority collections',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('priority/:minPriority')\n  @ApiOperation({ summary: 'Get collections with minimum priority (Public)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collections with minimum priority retrieved successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid priority parameter',\n  })\n  async getCollectionsByMinPriority(@Param('minPriority') minPriority: number) {\n    try {\n      if (isNaN(+minPriority) || +minPriority < 0) {\n        throw new BadRequestException('Invalid priority parameter');\n      }\n      return await this.collectionService.getCollectionsByPriority(\n        +minPriority,\n      );\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve collections by priority',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('priority-range')\n  @ApiOperation({\n    summary:\n      'Get collections by priority range using query parameters (Public)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Collections by priority range retrieved successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid priority parameters',\n  })\n  async getCollectionsByPriorityQuery(\n    @Query('minPriority') minPriority: number,\n    @Query('maxPriority') maxPriority?: number,\n  ) {\n    try {\n      if (isNaN(+minPriority) || +minPriority < 0) {\n        throw new BadRequestException('Invalid minPriority parameter');\n      }\n      if (maxPriority && (isNaN(+maxPriority) || +maxPriority < +minPriority)) {\n        throw new BadRequestException('Invalid maxPriority parameter');\n      }\n      return await this.collectionService.getCollectionsByPriority(\n        +minPriority,\n        maxPriority ? +maxPriority : undefined,\n      );\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve collections by priority range',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get('priority/:minPriority/:maxPriority')\n  @ApiOperation({ summary: 'Get collections by priority range (Public)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collections by priority range retrieved successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid priority parameters',\n  })\n  async getCollectionsByPriorityRange(\n    @Param('minPriority') minPriority: number,\n    @Param('maxPriority') maxPriority: number,\n  ) {\n    try {\n      if (isNaN(+minPriority) || +minPriority < 0) {\n        throw new BadRequestException('Invalid minPriority parameter');\n      }\n      if (isNaN(+maxPriority) || +maxPriority < +minPriority) {\n        throw new BadRequestException('Invalid maxPriority parameter');\n      }\n      return await this.collectionService.getCollectionsByPriority(\n        +minPriority,\n        +maxPriority,\n      );\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve collections by priority range',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id/products')\n  @ApiOperation({ summary: 'Get products from a specific collection (Public)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Collection products retrieved successfully',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Collection not found',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Collection is not active or valid',\n  })\n  async getCollectionProducts(\n    @Param('id') id: number,\n    @Query() query: any,\n    @Req() req: Request,\n  ) {\n    try {\n      if (isNaN(+id) || +id <= 0) {\n        throw new BadRequestException('Invalid collection ID');\n      }\n      return await this.collectionService.getCollectionProducts(\n        +id,\n        query,\n        req,\n      );\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve collection products',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':id/with-products')\n  @ApiOperation({\n    summary: 'Get collection with its products (paginated, 10 per page)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Collection with products retrieved successfully',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Collection not found',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid parameters',\n  })\n  async getCollectionWithProducts(\n    @Param('id') id: number,\n    @Query('page') page: number = 1,\n    @Query('limit') limit: number = 10,\n    @Req() req: Request,\n  ) {\n    try {\n      if (isNaN(+id) || +id <= 0) {\n        throw new BadRequestException('Invalid collection ID');\n      }\n      if (isNaN(+page) || +page < 1) {\n        throw new BadRequestException('Invalid page parameter');\n      }\n      if (isNaN(+limit) || +limit < 1 || +limit > 100) {\n        throw new BadRequestException('Invalid limit parameter (1-100)');\n      }\n      return await this.collectionService.getCollectionWithProducts(\n        +id,\n        +page,\n        +limit,\n        req,\n      );\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve collection with products',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  // ==================== UTILITY ENDPOINTS ====================\n\n  @Get('featured/products')\n  @ApiOperation({ summary: 'Get products from featured collections (Public)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Featured collection products retrieved successfully',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'No featured collections found',\n  })\n  async getFeaturedCollectionProducts(\n    @Query() query: any,\n    @Req() req: Request,\n  ) {\n    try {\n      // This endpoint will get products from all featured collections\n      const activeCollections =\n        await this.collectionService.getActiveCollections();\n      const featuredCollections = activeCollections.filter(\n        (collection) => collection.isFeatured,\n      );\n\n      if (featuredCollections.length === 0) {\n        throw new BadRequestException('No featured collections found');\n      }\n\n      // For now, return products from the first featured collection\n      // You can enhance this to combine products from multiple featured collections\n      const firstFeatured = featuredCollections[0];\n      return await this.collectionService.getCollectionProducts(\n        firstFeatured.id,\n        query,\n        req,\n      );\n    } catch (error) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n      throw new HttpException(\n        'Failed to retrieve featured collection products',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n"],"names":["ProductCollectionController","createCollection","createDto","req","user","collectionService","create","error","HttpException","HttpStatus","INTERNAL_SERVER_ERROR","getAllCollections","query","data","status","getCollectionById","id","findOne","updateCollection","updateDto","update","deleteCollection","remove","message","getActiveCollections","collections","getPriorityCollections","getCollectionsByMinPriority","minPriority","isNaN","BadRequestException","getCollectionsByPriority","getCollectionsByPriorityQuery","maxPriority","undefined","getCollectionsByPriorityRange","getCollectionProducts","getCollectionWithProducts","page","limit","getFeaturedCollectionProducts","activeCollections","featuredCollections","filter","collection","isFeatured","length","firstFeatured","constructor","Admin","SuperAdmin","summary","description","type","ProductCollectionResponseDto"],"mappings":"AAAA,oDAAoD;;;;+BAwCvCA;;;eAAAA;;;wBAvBN;yBAMA;0CACkC;sCAKlC;8BACsB;4BACF;gCACL;+BACD;yBACG;;;;;;;;;;;;;;;AAMjB,IAAA,AAAMA,8BAAN,MAAMA;IAGX,4DAA4D;IAE5D,MAkBMC,iBACJ,AAAQC,SAAqC,EAC7C,AAAOC,GAAY,EACnB;QACA,IAAI;YACF,MAAMC,OAAOD,IAAIC,IAAI;YACrB,OAAO,MAAM,IAAI,CAACC,iBAAiB,CAACC,MAAM,CAACJ,WAAWE;QACxD,EAAE,OAAOG,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,+BACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MASMC,kBAAkB,AAASC,KAAU,EAAE;QAC3C,IAAI;YACF,MAAMC,OAAO,MAAM,IAAI,CAACR,iBAAiB,CAACM,iBAAiB,CAACC;YAC5D,OAAO;gBACLE,QAAQ;gBACRD,MAAMA;YACR;QACF,EAAE,OAAON,OAAO;YACd,MAAM,IAAIC,qBAAa,CACrB,kCACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAcMK,kBAAkB,AAAaC,EAAU,EAAE;QAC/C,IAAI;YACF,OAAO,MAAM,IAAI,CAACX,iBAAiB,CAACY,OAAO,CAAC,CAACD;QAC/C,EAAE,OAAOT,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,iCACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAkBMQ,iBACJ,AAAaF,EAAU,EACvB,AAAQG,SAAqC,EAC7C;QACA,IAAI;YACF,OAAO,MAAM,IAAI,CAACd,iBAAiB,CAACe,MAAM,CAAC,CAACJ,IAAIG;QAClD,EAAE,OAAOZ,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,+BACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAaMW,iBAAiB,AAAaL,EAAU,EAAE;QAC9C,IAAI;YACF,MAAM,IAAI,CAACX,iBAAiB,CAACiB,MAAM,CAAC,CAACN;YACrC,OAAO;gBAAEO,SAAS;YAAkC;QACtD,EAAE,OAAOhB,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,+BACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,6DAA6D;IAE7D,MAMMc,uBAAuB;QAC3B,IAAI;YACF,MAAMC,cAAc,MAAM,IAAI,CAACpB,iBAAiB,CAACmB,oBAAoB;YACrE,OAAO;gBACLV,QAAQ;gBACRD,MAAMY;YACR;QACF,EAAE,OAAOlB,OAAO;YACd,MAAM,IAAIC,qBAAa,CACrB,yCACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAMMgB,yBAAyB;QAC7B,IAAI;YACF,OAAO,MAAM,IAAI,CAACrB,iBAAiB,CAACqB,sBAAsB;QAC5D,EAAE,OAAOnB,OAAO;YACd,MAAM,IAAIC,qBAAa,CACrB,2CACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAUMiB,4BAA4B,AAAsBC,WAAmB,EAAE;QAC3E,IAAI;YACF,IAAIC,MAAM,CAACD,gBAAgB,CAACA,cAAc,GAAG;gBAC3C,MAAM,IAAIE,2BAAmB,CAAC;YAChC;YACA,OAAO,MAAM,IAAI,CAACzB,iBAAiB,CAAC0B,wBAAwB,CAC1D,CAACH;QAEL,EAAE,OAAOrB,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,8CACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAaMsB,8BACJ,AAAsBJ,WAAmB,EACzC,AAAsBK,WAAoB,EAC1C;QACA,IAAI;YACF,IAAIJ,MAAM,CAACD,gBAAgB,CAACA,cAAc,GAAG;gBAC3C,MAAM,IAAIE,2BAAmB,CAAC;YAChC;YACA,IAAIG,eAAgBJ,CAAAA,MAAM,CAACI,gBAAgB,CAACA,cAAc,CAACL,WAAU,GAAI;gBACvE,MAAM,IAAIE,2BAAmB,CAAC;YAChC;YACA,OAAO,MAAM,IAAI,CAACzB,iBAAiB,CAAC0B,wBAAwB,CAC1D,CAACH,aACDK,cAAc,CAACA,cAAcC;QAEjC,EAAE,OAAO3B,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,oDACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAUMyB,8BACJ,AAAsBP,WAAmB,EACzC,AAAsBK,WAAmB,EACzC;QACA,IAAI;YACF,IAAIJ,MAAM,CAACD,gBAAgB,CAACA,cAAc,GAAG;gBAC3C,MAAM,IAAIE,2BAAmB,CAAC;YAChC;YACA,IAAID,MAAM,CAACI,gBAAgB,CAACA,cAAc,CAACL,aAAa;gBACtD,MAAM,IAAIE,2BAAmB,CAAC;YAChC;YACA,OAAO,MAAM,IAAI,CAACzB,iBAAiB,CAAC0B,wBAAwB,CAC1D,CAACH,aACD,CAACK;QAEL,EAAE,OAAO1B,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,oDACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAcM0B,sBACJ,AAAapB,EAAU,EACvB,AAASJ,KAAU,EACnB,AAAOT,GAAY,EACnB;QACA,IAAI;YACF,IAAI0B,MAAM,CAACb,OAAO,CAACA,MAAM,GAAG;gBAC1B,MAAM,IAAIc,2BAAmB,CAAC;YAChC;YACA,OAAO,MAAM,IAAI,CAACzB,iBAAiB,CAAC+B,qBAAqB,CACvD,CAACpB,IACDJ,OACAT;QAEJ,EAAE,OAAOI,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,0CACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,MAgBM2B,0BACJ,AAAarB,EAAU,EACvB,AAAesB,OAAe,CAAC,EAC/B,AAAgBC,QAAgB,EAAE,EAClC,AAAOpC,GAAY,EACnB;QACA,IAAI;YACF,IAAI0B,MAAM,CAACb,OAAO,CAACA,MAAM,GAAG;gBAC1B,MAAM,IAAIc,2BAAmB,CAAC;YAChC;YACA,IAAID,MAAM,CAACS,SAAS,CAACA,OAAO,GAAG;gBAC7B,MAAM,IAAIR,2BAAmB,CAAC;YAChC;YACA,IAAID,MAAM,CAACU,UAAU,CAACA,QAAQ,KAAK,CAACA,QAAQ,KAAK;gBAC/C,MAAM,IAAIT,2BAAmB,CAAC;YAChC;YACA,OAAO,MAAM,IAAI,CAACzB,iBAAiB,CAACgC,yBAAyB,CAC3D,CAACrB,IACD,CAACsB,MACD,CAACC,OACDpC;QAEJ,EAAE,OAAOI,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,+CACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAEA,8DAA8D;IAE9D,MAUM8B,8BACJ,AAAS5B,KAAU,EACnB,AAAOT,GAAY,EACnB;QACA,IAAI;YACF,gEAAgE;YAChE,MAAMsC,oBACJ,MAAM,IAAI,CAACpC,iBAAiB,CAACmB,oBAAoB;YACnD,MAAMkB,sBAAsBD,kBAAkBE,MAAM,CAClD,CAACC,aAAeA,WAAWC,UAAU;YAGvC,IAAIH,oBAAoBI,MAAM,KAAK,GAAG;gBACpC,MAAM,IAAIhB,2BAAmB,CAAC;YAChC;YAEA,8DAA8D;YAC9D,8EAA8E;YAC9E,MAAMiB,gBAAgBL,mBAAmB,CAAC,EAAE;YAC5C,OAAO,MAAM,IAAI,CAACrC,iBAAiB,CAAC+B,qBAAqB,CACvDW,cAAc/B,EAAE,EAChBJ,OACAT;QAEJ,EAAE,OAAOI,OAAO;YACd,IAAIA,iBAAiBC,qBAAa,EAAE;gBAClC,MAAMD;YACR;YACA,MAAM,IAAIC,qBAAa,CACrB,mDACAC,kBAAU,CAACC,qBAAqB;QAEpC;IACF;IAhbAsC,YAAY,AAAiB3C,iBAA2C,CAAE;aAA7CA,oBAAAA;IAA8C;AAib7E;;;;mDA3ac4C,2BAAYC;;;QAERC,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;QACbC,MAAMC,kDAA4B;;;QAGlCxC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;;;mDAsBHH,2BAAYC;;;QAERC,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;mDAmBHH,2BAAYC;;;QAERC,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;QACbC,MAAMC,kDAA4B;;;QAGlCxC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;mDAkBHH,2BAAYC;;;QAERC,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;QACbC,MAAMC,kDAA4B;;;QAGlCxC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;;;mDAqBHH,2BAAYC;;;QAERC,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;QAoBCD,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;;;;;;;QAkBCD,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;;;;;;;QAcCD,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;QAuBbD,SACE;;;QAGFrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;;;QA6BCD,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;;;QA6BCD,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;;;;;QA6BbD,SAAS;;;QAGTrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa;;;;;;;;;;;;;;;;;;QAsCCD,SAAS;;;QAEvBrC,QAAQ;QACRsC,aAAa;;;QAGbtC,QAAQ;QACRsC,aAAa"}