{"version":3,"sources":["../../src/product/category.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UploadedFiles,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n  ApiOkResponse,\n  ApiCreatedResponse,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiConsumes,\n} from '@nestjs/swagger';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { Request as ExpressRequest } from 'express';\nimport { ParsedQs } from 'qs';\nimport { Role } from '../common/constants/roles.constant';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { CategoryService } from './category.service';\nimport {\n  CategoryResponseDto,\n  CreateCategoryDto,\n  CreateSubCategoryDto,\n  SubCategoryResponseDto,\n  UpdateCategoryDto,\n  UpdateSubCategoryDto,\n  UploadIcon,\n} from './dto/category.dto';\n\n@ApiTags('Categories')\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n  @Get('subcategory')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get all subcategories (Admin/SuperAdmin only)' })\n  @ApiOkResponse({ description: 'Subcategories retrieved successfully' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  async getSubCategories() {\n    return this.categoryService.getSubCategories();\n  }\n\n  @Get('subcategory/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async getSubCategoryById(\n    @Param('id') id: string,\n  ): Promise<SubCategoryResponseDto> {\n    return this.categoryService.getSubCategoryById(Number(id));\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all categories with pagination' })\n  @ApiQuery({ name: 'page', required: false, description: 'Page number' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Items per page' })\n  @ApiQuery({ name: 'search', required: false, description: 'Search term' })\n  @ApiOkResponse({ description: 'Categories retrieved successfully' })\n  async getAllCategories(\n    @Query() query: ParsedQs,\n    @Req() req: ExpressRequest,\n  ): Promise<{\n    status: string;\n    results: number;\n    total: number;\n    currentPage: number;\n    limit: number;\n    totalPages: number;\n    lastPage: number;\n    data: CategoryResponseDto[];\n  }> {\n    return this.categoryService.getAllCategories(query, req);\n  }\n  @Get('active')\n  @ApiOperation({ summary: 'Get all active categories with pagination' })\n  @ApiQuery({ name: 'page', required: false, description: 'Page number' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Items per page' })\n  @ApiQuery({ name: 'search', required: false, description: 'Search term' })\n  @ApiOkResponse({ description: 'Active categories retrieved successfully' })\n  async getAllActiveCategories(\n    @Query() query: ParsedQs,\n    @Req() req: ExpressRequest,\n  ): Promise<{\n    status: string;\n    results: number;\n    total: number;\n    currentPage: number;\n    limit: number;\n    totalPages: number;\n    lastPage: number;\n    data: CategoryResponseDto[];\n  }> {\n    return this.categoryService.getAllActiveCategories(query, req);\n  }\n\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new category (Admin/SuperAdmin only)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Category data with icon upload',\n    schema: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        description: { type: 'string' },\n        iconCat: { type: 'string', format: 'binary' },\n      },\n    },\n  })\n  @ApiCreatedResponse({ description: 'Category created successfully' })\n  @ApiBadRequestResponse({ description: 'Bad request - validation failed' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({\n    description: 'Forbidden - Admin/SuperAdmin role required',\n  })\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconCat', maxCount: 1 }]))\n  async createCategory(\n    @UploadedFiles() files: { iconCat?: Express.Multer.File[] },\n    @Body() dto: CreateCategoryDto,\n  ): Promise<{ message: string; data: CategoryResponseDto }> {\n    try {\n      // Build UploadIcon object from uploaded files\n      const uploadIcon: UploadIcon = {\n        iconCat: files.iconCat?.[0],\n      };\n      const result = await this.categoryService.createCategory(uploadIcon, dto);\n      return { message: 'Category created successfully', data: result };\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get category by ID' })\n  @ApiParam({ name: 'id', description: 'Category ID', type: 'string' })\n  @ApiOkResponse({ description: 'Category retrieved successfully' })\n  @ApiNotFoundResponse({ description: 'Category not found' })\n  async getCategoryById(@Param('id') id: string): Promise<CategoryResponseDto> {\n    try {\n      return await this.categoryService.getCategoryById(Number(id));\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\n    }\n  }\n\n  @Put(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconCat', maxCount: 1 }]))\n  async updateCategory(\n    @Param('id') id: string,\n    @Body() dto: UpdateCategoryDto,\n    @UploadedFiles() files: { iconCat?: Express.Multer.File[] },\n  ): Promise<CategoryResponseDto> {\n    const category = await this.categoryService.getCategoryById(Number(id));\n    try {\n      const uploadIcon: UploadIcon | undefined =\n        files && files.iconCat && files.iconCat[0]\n          ? { iconCat: files.iconCat[0] }\n          : undefined;\n      // If no icon file is provided, don't update the icon (pass undefined)\n      return await this.categoryService.updateCategory(\n        Number(id),\n        dto,\n        uploadIcon,\n      );\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Post('subcategory')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @HttpCode(HttpStatus.CREATED)\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconSubCat', maxCount: 1 }]))\n  async createSubCategory(\n    @UploadedFiles() files: { iconSubCat?: Express.Multer.File[] },\n    @Body() dto: CreateSubCategoryDto,\n  ): Promise<{ message: string; data: SubCategoryResponseDto }> {\n    try {\n      const uploadIcon: UploadIcon = {\n        iconSubCat: files.iconSubCat?.[0],\n      };\n      const result = await this.categoryService.createSubCategory(\n        uploadIcon,\n        dto,\n      );\n      return { message: 'SubCategory created successfully', data: result };\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Put(':categoryId/subCategory/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconSubCat', maxCount: 1 }]))\n  async updateSubCategory(\n    @Param('categoryId') categoryId: string,\n    @Param('id') id: string,\n    @UploadedFiles() files: { iconSubCat?: Express.Multer.File[] },\n    @Body() dto: UpdateSubCategoryDto,\n  ): Promise<SubCategoryResponseDto> {\n    try {\n      const uploadIcon: UploadIcon | undefined =\n        files && files.iconSubCat && files.iconSubCat[0]\n          ? { iconSubCat: files.iconSubCat[0] }\n          : undefined;\n      return await this.categoryService.updateSubCategory(\n        Number(categoryId),\n        Number(id),\n        dto,\n        uploadIcon,\n      );\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Delete()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async deleteAllCategories() {\n    await this.categoryService.deleteAll();\n    return { message: 'All categories deleted successfully' };\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async deleteCategory(@Param('id') id: string): Promise<{ message: string }> {\n    try {\n      await this.categoryService.deleteCategory(Number(id));\n      return { message: 'Category deleted successfully' };\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Delete('subcategory/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async deleteSubCategory(\n    @Param('id') id: string,\n  ): Promise<{ message: string }> {\n    try {\n      await this.categoryService.deleteSubCategory(Number(id));\n      return { message: 'SubCategory deleted successfully' };\n    } catch (error: any) {\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  @Put('update-state/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async UpdateState(@Param('id') id: number): Promise<any> {\n    const UpdateOne = await this.categoryService.updateState(id);\n    return UpdateOne;\n  }\n  @Put('update-state-subcategory/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(Role.Admin, Role.SuperAdmin)\n  async UpdateStateSub(@Param('id') id: number): Promise<any> {\n    const UpdateOne = await this.categoryService.updateStateSub(id);\n    return UpdateOne;\n  }\n}\n"],"names":["CategoryController","getSubCategories","categoryService","getSubCategoryById","id","Number","getAllCategories","query","req","getAllActiveCategories","createCategory","files","dto","uploadIcon","iconCat","result","message","data","error","HttpException","HttpStatus","BAD_REQUEST","getCategoryById","NOT_FOUND","updateCategory","category","undefined","createSubCategory","iconSubCat","updateSubCategory","categoryId","deleteAllCategories","deleteAll","deleteCategory","deleteSubCategory","UpdateState","UpdateOne","updateState","UpdateStateSub","updateStateSub","constructor","Admin","SuperAdmin","summary","description","name","required","CREATED","schema","type","properties","format","maxCount"],"mappings":"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"}