{"version":3,"sources":["../../src/product/category.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\nimport {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  HttpCode,\r\n  HttpException,\r\n  HttpStatus,\r\n  Param,\r\n  Post,\r\n  Put,\r\n  Query,\r\n  Req,\r\n  UploadedFiles,\r\n  UseGuards,\r\n  UseInterceptors,\r\n} from '@nestjs/common';\r\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\r\nimport { Request as ExpressRequest } from 'express';\r\nimport { ParsedQs } from 'qs';\r\nimport { Role } from '../common/constants/roles.constant';\r\nimport { Roles } from '../common/decorators/roles.decorator';\r\nimport { JwtAuthGuard } from '../common/guards/jwt-auth.guard';\r\nimport { RolesGuard } from '../common/guards/roles.guard';\r\nimport { CategoryService } from './category.service';\r\nimport {\r\n  CategoryResponseDto,\r\n  CreateCategoryDto,\r\n  CreateSubCategoryDto,\r\n  SubCategoryResponseDto,\r\n  UpdateCategoryDto,\r\n  UpdateSubCategoryDto,\r\n  UploadIcon,\r\n} from './dto/category.dto';\r\n\r\n@Controller('category')\r\nexport class CategoryController {\r\n  constructor(private readonly categoryService: CategoryService) {}\r\n  @Get('subcategory')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getSubCategories() {\r\n    return this.categoryService.getSubCategories();\r\n  }\r\n\r\n  @Get('subcategory/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async getSubCategoryById(\r\n    @Param('id') id: string,\r\n  ): Promise<SubCategoryResponseDto> {\r\n    return this.categoryService.getSubCategoryById(Number(id));\r\n  }\r\n\r\n  @Get()\r\n  async getAllCategories(\r\n    @Query() query: ParsedQs,\r\n    @Req() req: ExpressRequest,\r\n  ): Promise<{\r\n    status: string;\r\n    results: number;\r\n    total: number;\r\n    currentPage: number;\r\n    limit: number;\r\n    totalPages: number;\r\n    lastPage: number;\r\n    data: CategoryResponseDto[];\r\n  }> {\r\n    return this.categoryService.getAllCategories(query, req);\r\n  }\r\n\r\n  @Post()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @HttpCode(HttpStatus.CREATED)\r\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconCat', maxCount: 1 }]))\r\n  async createCategory(\r\n    @UploadedFiles() files: { iconCat?: Express.Multer.File[] },\r\n    @Body() dto: CreateCategoryDto,\r\n  ): Promise<{ message: string; data: CategoryResponseDto }> {\r\n    try {\r\n      // Build UploadIcon object from uploaded files\r\n      const uploadIcon: UploadIcon = {\r\n        iconCat: files.iconCat?.[0],\r\n      };\r\n      const result = await this.categoryService.createCategory(uploadIcon, dto);\r\n      return { message: 'Category created successfully', data: result };\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Get(':id')\r\n  async getCategoryById(@Param('id') id: string): Promise<CategoryResponseDto> {\r\n    try {\r\n      return await this.categoryService.getCategoryById(Number(id));\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.NOT_FOUND);\r\n    }\r\n  }\r\n\r\n  @Put(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconCat', maxCount: 1 }]))\r\n  async updateCategory(\r\n    @Param('id') id: string,\r\n    @Body() dto: UpdateCategoryDto,\r\n    @UploadedFiles() files: { iconCat?: Express.Multer.File[] },\r\n  ): Promise<CategoryResponseDto> {\r\n    const category = await this.categoryService.getCategoryById(Number(id));\r\n    try {\r\n      const uploadIcon: UploadIcon | undefined =\r\n        files && files.iconCat && files.iconCat[0]\r\n          ? { iconCat: files.iconCat[0] }\r\n          : undefined;\r\n      // If no icon file is provided, don't update the icon (pass undefined)\r\n      return await this.categoryService.updateCategory(\r\n        Number(id),\r\n        dto,\r\n        uploadIcon,\r\n      );\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Post('subcategory')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @HttpCode(HttpStatus.CREATED)\r\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconSubCat', maxCount: 1 }]))\r\n  async createSubCategory(\r\n    @UploadedFiles() files: { iconSubCat?: Express.Multer.File[] },\r\n    @Body() dto: CreateSubCategoryDto,\r\n  ): Promise<{ message: string; data: SubCategoryResponseDto }> {\r\n    try {\r\n      const uploadIcon: UploadIcon = {\r\n        iconSubCat: files.iconSubCat?.[0],\r\n      };\r\n      const result = await this.categoryService.createSubCategory(\r\n        uploadIcon,\r\n        dto,\r\n      );\r\n      return { message: 'SubCategory created successfully', data: result };\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Put(':categoryId/subCategory/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  @UseInterceptors(FileFieldsInterceptor([{ name: 'iconSubCat', maxCount: 1 }]))\r\n  async updateSubCategory(\r\n    @Param('categoryId') categoryId: string,\r\n    @Param('id') id: string,\r\n    @UploadedFiles() files: { iconSubCat?: Express.Multer.File[] },\r\n    @Body() dto: UpdateSubCategoryDto,\r\n  ): Promise<SubCategoryResponseDto> {\r\n    try {\r\n      const uploadIcon: UploadIcon | undefined =\r\n        files && files.iconSubCat && files.iconSubCat[0]\r\n          ? { iconSubCat: files.iconSubCat[0] }\r\n          : undefined;\r\n      return await this.categoryService.updateSubCategory(\r\n        Number(categoryId),\r\n        Number(id),\r\n        dto,\r\n        uploadIcon,\r\n      );\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Delete()\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async deleteAllCategories() {\r\n    await this.categoryService.deleteAll();\r\n    return { message: 'All categories deleted successfully' };\r\n  }\r\n\r\n  @Delete(':id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async deleteCategory(@Param('id') id: string): Promise<{ message: string }> {\r\n    try {\r\n      await this.categoryService.deleteCategory(Number(id));\r\n      return { message: 'Category deleted successfully' };\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Delete('subcategory/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async deleteSubCategory(\r\n    @Param('id') id: string,\r\n  ): Promise<{ message: string }> {\r\n    try {\r\n      await this.categoryService.deleteSubCategory(Number(id));\r\n      return { message: 'SubCategory deleted successfully' };\r\n    } catch (error: any) {\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Put('update-state/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async UpdateState(@Param('id') id: number): Promise<any> {\r\n    const UpdateOne = await this.categoryService.updateState(id);\r\n    return UpdateOne;\r\n  }\r\n  @Put('update-state-subcategory/:id')\r\n  @UseGuards(JwtAuthGuard, RolesGuard)\r\n  @Roles(Role.Admin, Role.SuperAdmin)\r\n  async UpdateStateSub(@Param('id') id: number): Promise<any> {\r\n    const UpdateOne = await this.categoryService.updateStateSub(id);\r\n    return UpdateOne;\r\n  }\r\n}\r\n"],"names":["CategoryController","getSubCategories","categoryService","getSubCategoryById","id","Number","getAllCategories","query","req","createCategory","files","dto","uploadIcon","iconCat","result","message","data","error","HttpException","HttpStatus","BAD_REQUEST","getCategoryById","NOT_FOUND","updateCategory","category","undefined","createSubCategory","iconSubCat","updateSubCategory","categoryId","deleteAllCategories","deleteAll","deleteCategory","deleteSubCategory","UpdateState","UpdateOne","updateState","UpdateStateSub","updateStateSub","constructor","Admin","SuperAdmin","CREATED","name","maxCount"],"mappings":"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"}