{"version":3,"sources":["../../src/product/size-table.controller.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Body,\n  ParseIntPipe,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';\nimport { SizeTableService } from './size-table.service';\nimport {\n  CreateSizeTableDto,\n  UpdateSizeTableDto,\n  AddSizeDimensionDto,\n} from './dto/size-table.dto';\nimport { SizeTable, SizeDimension } from './entities/sizeTable';\n\n@ApiTags('Size Tables')\n@Controller('size-tables')\nexport class SizeTableController {\n  constructor(private readonly sizeTableService: SizeTableService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new size table' })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Size table created successfully',\n    type: SizeTable,\n  })\n  async createSizeTable(\n    @Body() createDto: CreateSizeTableDto,\n  ): Promise<SizeTable | null> {\n    return await this.sizeTableService.createSizeTable(createDto);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all size tables' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Size tables retrieved successfully',\n    type: [SizeTable],\n  })\n  async getAllSizeTables(): Promise<SizeTable[]> {\n    return await this.sizeTableService.getAllSizeTables();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get size table by ID' })\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'number' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Size table retrieved successfully',\n    type: SizeTable,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Size table not found',\n  })\n  async getSizeTableById(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise<SizeTable> {\n    return await this.sizeTableService.getSizeTableById(id);\n  }\n\n  @Put(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update size table' })\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'number' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Size table updated successfully',\n    type: SizeTable,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Size table not found',\n  })\n  async updateSizeTable(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateDto: UpdateSizeTableDto,\n  ): Promise<SizeTable> {\n    return await this.sizeTableService.updateSizeTable(id, updateDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete size table' })\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'number' })\n  @ApiResponse({\n    status: HttpStatus.NO_CONTENT,\n    description: 'Size table deleted successfully',\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Size table not found',\n  })\n  async deleteSizeTable(@Param('id', ParseIntPipe) id: number): Promise<void> {\n    return await this.sizeTableService.deleteSizeTable(id);\n  }\n\n  @Post(':id/size-dimensions')\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Add a size dimension to a size table' })\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'number' })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Size dimension added successfully',\n    type: SizeDimension,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Size table not found',\n  })\n  async addSizeDimension(\n    @Param('id', ParseIntPipe) tableId: number,\n    @Body() addDto: AddSizeDimensionDto,\n  ): Promise<SizeDimension | null> {\n    return await this.sizeTableService.addSizeDimension(tableId, addDto);\n  }\n}\n"],"names":["SizeTableController","createSizeTable","createDto","sizeTableService","getAllSizeTables","getSizeTableById","id","updateSizeTable","updateDto","deleteSizeTable","addSizeDimension","tableId","addDto","constructor","CREATED","summary","status","HttpStatus","description","type","SizeTable","OK","name","NOT_FOUND","NO_CONTENT","SizeDimension"],"mappings":"AAAA,oCAAoC,GACpC,sDAAsD,GACtD,0DAA0D,GAC1D,6DAA6D,GAC7D,oDAAoD;;;;+BAwBvCA;;;eAAAA;;;wBAZN;yBACsD;kCAC5B;8BAK1B;2BACkC;;;;;;;;;;;;;;;AAIlC,IAAA,AAAMA,sBAAN,MAAMA;IAGX,MAQMC,gBACJ,AAAQC,SAA6B,EACV;QAC3B,OAAO,MAAM,IAAI,CAACC,gBAAgB,CAACF,eAAe,CAACC;IACrD;IAEA,MAOME,mBAAyC;QAC7C,OAAO,MAAM,IAAI,CAACD,gBAAgB,CAACC,gBAAgB;IACrD;IAEA,MAYMC,iBACJ,AAA2BC,EAAU,EACjB;QACpB,OAAO,MAAM,IAAI,CAACH,gBAAgB,CAACE,gBAAgB,CAACC;IACtD;IAEA,MAaMC,gBACJ,AAA2BD,EAAU,EACrC,AAAQE,SAA6B,EACjB;QACpB,OAAO,MAAM,IAAI,CAACL,gBAAgB,CAACI,eAAe,CAACD,IAAIE;IACzD;IAEA,MAYMC,gBAAgB,AAA2BH,EAAU,EAAiB;QAC1E,OAAO,MAAM,IAAI,CAACH,gBAAgB,CAACM,eAAe,CAACH;IACrD;IAEA,MAaMI,iBACJ,AAA2BC,OAAe,EAC1C,AAAQC,MAA2B,EACJ;QAC/B,OAAO,MAAM,IAAI,CAACT,gBAAgB,CAACO,gBAAgB,CAACC,SAASC;IAC/D;IAnGAC,YAAY,AAAiBV,gBAAkC,CAAE;aAApCA,mBAAAA;IAAqC;AAoGpE;;;6CAjGuBW;;QACLC,SAAS;;;QAEvBC,QAAQC,kBAAU,CAACH,OAAO;QAC1BI,aAAa;QACbC,MAAMC,oBAAS;;;;;;;;;;;;QASDL,SAAS;;;QAEvBC,QAAQC,kBAAU,CAACI,EAAE;QACrBH,aAAa;QACbC,MAAM;YAACC,oBAAS;SAAC;;;;;;;;;QAOHL,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACI,EAAE;QACrBH,aAAa;QACbC,MAAMC,oBAAS;;;QAGfJ,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa;;;;;;;;;;;6CASMG;;QACLN,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACI,EAAE;QACrBH,aAAa;QACbC,MAAMC,oBAAS;;;QAGfJ,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa;;;;;;;;;;;;;6CAUMM;;QACLT,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACO,UAAU;QAC7BN,aAAa;;;QAGbF,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa;;;;;;;;;;;6CAOMJ;;QACLC,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACH,OAAO;QAC1BI,aAAa;QACbC,MAAMM,wBAAa;;;QAGnBT,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa"}