{"version":3,"sources":["../../src/product/size-table.controller.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\nimport {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Delete,\r\n  Param,\r\n  Body,\r\n  HttpStatus,\r\n  HttpCode,\r\n} from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';\r\nimport { SizeTableService } from './size-table.service';\r\nimport {\r\n  CreateSizeTableDto,\r\n  UpdateSizeTableDto,\r\n  SizeTableResponseDto,\r\n} from './dto/size-table.dto';\r\n\r\n@ApiTags('Size Tables')\r\n@Controller('size-tables')\r\nexport class SizeTableController {\r\n  constructor(private readonly sizeTableService: SizeTableService) {}\r\n\r\n  @Post()\r\n  @HttpCode(HttpStatus.CREATED)\r\n  @ApiOperation({ summary: 'Create a new size table' })\r\n  @ApiResponse({\r\n    status: HttpStatus.CREATED,\r\n    description: 'Size table created successfully',\r\n    type: SizeTableResponseDto,\r\n  })\r\n  async createSizeTable(\r\n    @Body() createDto: CreateSizeTableDto,\r\n  ): Promise<SizeTableResponseDto | null> {\r\n    return await this.sizeTableService.createSizeTable(createDto);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all size tables' })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Size tables retrieved successfully',\r\n    type: [SizeTableResponseDto],\r\n  })\r\n  async getAllSizeTables(): Promise<SizeTableResponseDto[]> {\r\n    return await this.sizeTableService.getAllSizeTables();\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Get size table by ID' })\r\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'string' })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Size table retrieved successfully',\r\n    type: SizeTableResponseDto,\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.NOT_FOUND,\r\n    description: 'Size table not found',\r\n  })\r\n  async getSizeTableById(\r\n    @Param('id') id: string,\r\n  ): Promise<SizeTableResponseDto> {\r\n    return await this.sizeTableService.getSizeTableById(id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Update size table' })\r\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'string' })\r\n  @ApiResponse({\r\n    status: HttpStatus.OK,\r\n    description: 'Size table updated successfully',\r\n    type: SizeTableResponseDto,\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.NOT_FOUND,\r\n    description: 'Size table not found',\r\n  })\r\n  async updateSizeTable(\r\n    @Param('id') id: string,\r\n    @Body() updateDto: UpdateSizeTableDto,\r\n  ): Promise<SizeTableResponseDto> {\r\n    return await this.sizeTableService.updateSizeTable(id, updateDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  @ApiOperation({ summary: 'Delete size table' })\r\n  @ApiParam({ name: 'id', description: 'Size table ID', type: 'string' })\r\n  @ApiResponse({\r\n    status: HttpStatus.NO_CONTENT,\r\n    description: 'Size table deleted successfully',\r\n  })\r\n  @ApiResponse({\r\n    status: HttpStatus.NOT_FOUND,\r\n    description: 'Size table not found',\r\n  })\r\n  async deleteSizeTable(@Param('id') id: string): Promise<void> {\r\n    return await this.sizeTableService.deleteSizeTable(id);\r\n  }\r\n}\r\n"],"names":["SizeTableController","createSizeTable","createDto","sizeTableService","getAllSizeTables","getSizeTableById","id","updateSizeTable","updateDto","deleteSizeTable","constructor","CREATED","summary","status","HttpStatus","description","type","SizeTableResponseDto","OK","name","NOT_FOUND","NO_CONTENT"],"mappings":"AAAA,oCAAoC,GACpC,sDAAsD,GACtD,0DAA0D,GAC1D,6DAA6D,GAC7D,oDAAoD;;;;+BAsBvCA;;;eAAAA;;;wBAXN;yBACsD;kCAC5B;8BAK1B;;;;;;;;;;;;;;;AAIA,IAAA,AAAMA,sBAAN,MAAMA;IAGX,MAQMC,gBACJ,AAAQC,SAA6B,EACC;QACtC,OAAO,MAAM,IAAI,CAACC,gBAAgB,CAACF,eAAe,CAACC;IACrD;IAEA,MAOME,mBAAoD;QACxD,OAAO,MAAM,IAAI,CAACD,gBAAgB,CAACC,gBAAgB;IACrD;IAEA,MAYMC,iBACJ,AAAaC,EAAU,EACQ;QAC/B,OAAO,MAAM,IAAI,CAACH,gBAAgB,CAACE,gBAAgB,CAACC;IACtD;IAEA,MAaMC,gBACJ,AAAaD,EAAU,EACvB,AAAQE,SAA6B,EACN;QAC/B,OAAO,MAAM,IAAI,CAACL,gBAAgB,CAACI,eAAe,CAACD,IAAIE;IACzD;IAEA,MAYMC,gBAAgB,AAAaH,EAAU,EAAiB;QAC5D,OAAO,MAAM,IAAI,CAACH,gBAAgB,CAACM,eAAe,CAACH;IACrD;IA/EAI,YAAY,AAAiBP,gBAAkC,CAAE;aAApCA,mBAAAA;IAAqC;AAgFpE;;;6CA7EuBQ;;QACLC,SAAS;;;QAEvBC,QAAQC,kBAAU,CAACH,OAAO;QAC1BI,aAAa;QACbC,MAAMC,kCAAoB;;;;;;;;;;;;QASZL,SAAS;;;QAEvBC,QAAQC,kBAAU,CAACI,EAAE;QACrBH,aAAa;QACbC,MAAM;YAACC,kCAAoB;SAAC;;;;;;;;;QAOdL,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACI,EAAE;QACrBH,aAAa;QACbC,MAAMC,kCAAoB;;;QAG1BJ,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa;;;;;;;;;;;6CASMG;;QACLN,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACI,EAAE;QACrBH,aAAa;QACbC,MAAMC,kCAAoB;;;QAG1BJ,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa;;;;;;;;;;;;;6CAUMM;;QACLT,SAAS;;;QACbO,MAAM;QAAMJ,aAAa;QAAiBC,MAAM;;;QAE1DH,QAAQC,kBAAU,CAACO,UAAU;QAC7BN,aAAa;;;QAGbF,QAAQC,kBAAU,CAACM,SAAS;QAC5BL,aAAa"}