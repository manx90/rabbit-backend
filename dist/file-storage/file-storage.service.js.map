{"version":3,"sources":["../../src/file-storage/file-storage.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport {\n  existsSync,\n  mkdirSync,\n  writeFileSync,\n  readFileSync,\n  unlinkSync,\n  rmSync,\n} from 'fs';\nimport { join, extname } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class FileStorageService {\n  private readonly uploadDir = 'uploads';\n  private readonly productImagesDir = join(this.uploadDir, 'products');\n\n  constructor() {\n    // Ensure upload directories exist\n    this.ensureDirectoryExists(this.uploadDir);\n    this.ensureDirectoryExists(this.productImagesDir);\n  }\n\n  private ensureDirectoryExists(dir: string): void {\n    if (!existsSync(dir)) {\n      mkdirSync(dir, { recursive: true });\n    }\n  }\n\n  /**\n   * Save a file to storage and return the file path\n   */\n  async saveFile(\n    file: Express.Multer.File,\n    subDirectory = 'products',\n  ): Promise<string> {\n    const dir = join(this.uploadDir, subDirectory);\n    this.ensureDirectoryExists(dir);\n\n    const uniqueFilename = `${uuidv4()}${extname(file.originalname)}`;\n    const filePath = join(dir, uniqueFilename);\n\n    // Use promisified version of writeFile\n    await new Promise<void>((resolve) => {\n      writeFileSync(filePath, file.buffer);\n      resolve();\n    });\n\n    // Return relative path that can be used in URLs\n    return `${subDirectory}/${uniqueFilename}`;\n  }\n\n  /**\n   * Save multiple files to storage and return their paths\n   */\n  async saveFiles(\n    files: Express.Multer.File[],\n    subDirectory = 'products',\n  ): Promise<string[]> {\n    return Promise.all(files.map((file) => this.saveFile(file, subDirectory)));\n  }\n\n  /**\n   * Get a file from storage\n   */\n  getFile(filePath: string): Buffer {\n    const fullPath = join(this.uploadDir, filePath);\n\n    if (!existsSync(fullPath)) {\n      throw new NotFoundException(`File ${filePath} not found`);\n    }\n\n    return readFileSync(fullPath);\n  }\n\n  /**\n   * Delete a file from storage\n   */\n  deleteFile(filePath: string | null | undefined): boolean {\n    if (!filePath) return false;\n\n    const fullPath = join(this.uploadDir, filePath);\n\n    console.log('FileStorageService.deleteFile:', {\n      originalPath: filePath,\n      fullPath,\n      exists: existsSync(fullPath),\n    });\n\n    if (!existsSync(fullPath)) return false;\n\n    try {\n      unlinkSync(fullPath);\n      return true;\n    } catch (error) {\n      console.error(`Error deleting file ${filePath}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Delete multiple files from storage\n   */\n  deleteFiles(filePaths: string[] | null | undefined): boolean[] {\n    if (!filePaths) return [];\n    return filePaths.map((path) => this.deleteFile(path));\n  }\n\n  /**\n   * Get the full URL for a file path\n   */\n  /**\n   * Delete a directory and all its contents\n   */\n  deleteDirectory(dirPath: string): boolean {\n    if (!dirPath) return false;\n\n    const fullPath = join(this.uploadDir, dirPath);\n\n    console.log('FileStorageService.deleteDirectory:', {\n      originalPath: dirPath,\n      fullPath,\n      exists: existsSync(fullPath),\n    });\n\n    if (!existsSync(fullPath)) return false;\n\n    try {\n      // Remove directory and all contents recursively\n      rmSync(fullPath, { recursive: true, force: true });\n      return true;\n    } catch (error) {\n      console.error(`Error deleting directory ${dirPath}:`, error);\n      return false;\n    }\n  }\n\n  getFileUrl(\n    filePath: string,\n    req?: { protocol: string; get: (key: string) => string },\n  ): string {\n    if (!filePath) return '';\n\n    // If the path is already a full URL, return it\n    if (filePath.startsWith('http')) {\n      return filePath;\n    }\n\n    // If request object is provided, construct full URL\n    if (req) {\n      const protocol = req.protocol;\n      const host = req.get('host');\n      return `${protocol}://${host}/${this.uploadDir}/${filePath}`;\n    }\n\n    // Otherwise return relative path\n    return `/${this.uploadDir}/${filePath}`;\n  }\n}\n"],"names":["FileStorageService","ensureDirectoryExists","dir","existsSync","mkdirSync","recursive","saveFile","file","subDirectory","join","uploadDir","uniqueFilename","uuidv4","extname","originalname","filePath","Promise","resolve","writeFileSync","buffer","saveFiles","files","all","map","getFile","fullPath","NotFoundException","readFileSync","deleteFile","console","log","originalPath","exists","unlinkSync","error","deleteFiles","filePaths","path","deleteDirectory","dirPath","rmSync","force","getFileUrl","req","startsWith","protocol","host","get","constructor","productImagesDir"],"mappings":"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"}