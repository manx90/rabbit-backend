{"version":3,"sources":["../../src/file-storage/file-storage.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport {\r\n  existsSync,\r\n  mkdirSync,\r\n  writeFileSync,\r\n  readFileSync,\r\n  unlinkSync,\r\n  rmSync,\r\n} from 'fs';\r\nimport { join, extname } from 'path';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  ImageOptimizationService,\r\n  OptimizationOptions,\r\n} from './image-optimization.service';\r\n\r\n@Injectable()\r\nexport class FileStorageService {\r\n  private readonly uploadDir = 'uploads';\r\n  private readonly productImagesDir = join(this.uploadDir, 'products');\r\n\r\n  constructor(\r\n    private readonly imageOptimizationService: ImageOptimizationService,\r\n  ) {\r\n    // Ensure upload directories exist\r\n    this.ensureDirectoryExists(this.uploadDir);\r\n    this.ensureDirectoryExists(this.productImagesDir);\r\n  }\r\n\r\n  private ensureDirectoryExists(dir: string): void {\r\n    if (!existsSync(dir)) {\r\n      mkdirSync(dir, { recursive: true });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save a file to storage and return the file path\r\n   */\r\n  async saveFile(\r\n    file: Express.Multer.File,\r\n    subDirectory = 'products',\r\n    optimizeOptions?: OptimizationOptions,\r\n  ): Promise<string> {\r\n    const dir = join(this.uploadDir, subDirectory);\r\n    this.ensureDirectoryExists(dir);\r\n\r\n    const uniqueFilename = `${uuidv4()}${extname(file.originalname)}`;\r\n    const filePath = join(dir, uniqueFilename);\r\n\r\n    let bufferToSave = file.buffer;\r\n\r\n    // Optimize image if it's a supported image format\r\n    if (this.imageOptimizationService.isSupportedImage(file.originalname)) {\r\n      try {\r\n        bufferToSave = await this.imageOptimizationService.optimizeBuffer(\r\n          file.buffer,\r\n          optimizeOptions,\r\n        );\r\n      } catch (error) {\r\n        console.log(\r\n          `Failed to optimize image ${file.originalname}, saving original:`,\r\n          error.message,\r\n        );\r\n        // Continue with original buffer if optimization fails\r\n      }\r\n    }\r\n\r\n    // Use promisified version of writeFile\r\n    await new Promise<void>((resolve) => {\r\n      writeFileSync(filePath, bufferToSave);\r\n      resolve();\r\n    });\r\n\r\n    // Return relative path that can be used in URLs\r\n    return `${subDirectory}/${uniqueFilename}`;\r\n  }\r\n\r\n  /**\r\n   * Save multiple files to storage and return their paths\r\n   */\r\n  async saveFiles(\r\n    files: Express.Multer.File[],\r\n    subDirectory = 'products',\r\n    optimizeOptions?: OptimizationOptions,\r\n  ): Promise<string[]> {\r\n    return Promise.all(\r\n      files.map((file) => this.saveFile(file, subDirectory, optimizeOptions)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a file from storage\r\n   */\r\n  getFile(filePath: string): Buffer {\r\n    const fullPath = join(this.uploadDir, filePath);\r\n\r\n    if (!existsSync(fullPath)) {\r\n      throw new NotFoundException(`File ${filePath} not found`);\r\n    }\r\n\r\n    return readFileSync(fullPath);\r\n  }\r\n\r\n  /**\r\n   * Update a file in storage and return the new file path\r\n   */\r\n  async updateFile(\r\n    file: Express.Multer.File,\r\n    oldFilePath: string,\r\n    subDirectory = 'products',\r\n  ): Promise<string> {\r\n    // Delete the old file if it exists\r\n    this.deleteFile(oldFilePath);\r\n\r\n    // Save and return the new file\r\n    return await this.saveFile(file, subDirectory);\r\n  }\r\n\r\n  /**\r\n   * Delete a file from storage\r\n   */\r\n  deleteFile(filePath: string | null | undefined): boolean {\r\n    if (!filePath) return false;\r\n    const fullPath = join(this.uploadDir, filePath);\r\n    if (!existsSync(fullPath)) return false;\r\n    try {\r\n      unlinkSync(fullPath);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting file ${filePath}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Delete multiple files from storage\r\n   */\r\n  deleteFiles(filePaths: string[] | null | undefined): boolean[] {\r\n    if (!filePaths) return [];\r\n    return filePaths.map((path) => this.deleteFile(path));\r\n  }\r\n\r\n  /**\r\n   * Get the full URL for a file path\r\n   */\r\n  /**\r\n   * Delete a directory and all its contents\r\n   */\r\n  deleteDirectory(dirPath: string): boolean {\r\n    if (!dirPath) return false;\r\n\r\n    const fullPath = join(this.uploadDir, dirPath);\r\n\r\n    console.log('FileStorageService.deleteDirectory:', {\r\n      originalPath: dirPath,\r\n      fullPath,\r\n      exists: existsSync(fullPath),\r\n    });\r\n\r\n    if (!existsSync(fullPath)) return false;\r\n\r\n    try {\r\n      // Remove directory and all contents recursively\r\n      rmSync(fullPath, { recursive: true, force: true });\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting directory ${dirPath}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getFileUrl(\r\n    filePath: string,\r\n    req?: { protocol: string; get: (key: string) => string },\r\n  ): string {\r\n    if (!filePath) return '';\r\n\r\n    // If the path is already a full URL, return it\r\n    if (filePath.startsWith('http')) {\r\n      return filePath;\r\n    }\r\n\r\n    // If request object is provided, construct full URL\r\n    if (req) {\r\n      const protocol = req.protocol;\r\n      const host = req.get('host');\r\n      return `${protocol}://${host}/${this.uploadDir}/${filePath}`;\r\n    }\r\n\r\n    // Otherwise return relative path\r\n    return `/${this.uploadDir}/${filePath}`;\r\n  }\r\n}\r\n"],"names":["FileStorageService","ensureDirectoryExists","dir","existsSync","mkdirSync","recursive","saveFile","file","subDirectory","optimizeOptions","join","uploadDir","uniqueFilename","uuidv4","extname","originalname","filePath","bufferToSave","buffer","imageOptimizationService","isSupportedImage","optimizeBuffer","error","console","log","message","Promise","resolve","writeFileSync","saveFiles","files","all","map","getFile","fullPath","NotFoundException","readFileSync","updateFile","oldFilePath","deleteFile","unlinkSync","deleteFiles","filePaths","path","deleteDirectory","dirPath","originalPath","exists","rmSync","force","getFileUrl","req","startsWith","protocol","host","get","constructor","productImagesDir"],"mappings":"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"}