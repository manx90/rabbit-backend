{"version":3,"sources":["../../src/file-storage/image-optimization.service.ts"],"sourcesContent":["/* eslint-disable no-self-assign */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { Injectable, Logger } from '@nestjs/common';\n// DISABLED: Sharp import removed to prevent WebAssembly memory issues\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\n\nexport interface OptimizationOptions {\n  quality?: number; // 1-100, default 70\n  maxWidth?: number; // default 1920\n  maxHeight?: number; // default 1080\n  format?: 'jpeg' | 'png' | 'webp' | 'avif' | 'svg';\n  progressive?: boolean; // default true\n}\n\nexport interface OptimizationResult {\n  originalSize: number;\n  optimizedSize: number;\n  reductionPercentage: number;\n  originalPath: string;\n  optimizedPath: string;\n  backupPath: string;\n  success: boolean;\n  error?: string;\n}\n\n@Injectable()\nexport class ImageOptimizationService {\n  private readonly logger = new Logger(ImageOptimizationService.name);\n  private readonly isProduction = process.env.NODE_ENV === 'production';\n  private readonly isCPanelHosting = process.env.NODE_ENV === 'production' && process.env.MAX_MEMORY_USAGE;\n\n  /**\n   * Optimize a single image file - DISABLED to prevent WebAssembly memory issues\n   */\n  async optimizeImage(\n    inputPath: string,\n    outputPath?: string,\n    options: OptimizationOptions = {},\n  ): Promise<OptimizationResult> {\n    // DISABLED: Image optimization completely disabled to prevent WebAssembly memory issues\n    this.logger.log(\n      `Image optimization disabled - returning original file: ${inputPath}`,\n    );\n    return {\n      originalSize: 0,\n      optimizedSize: 0,\n      reductionPercentage: 0,\n      originalPath: inputPath,\n      optimizedPath: inputPath,\n      backupPath: inputPath,\n      success: true,\n    };\n  }\n\n  /**\n   * Optimize all images in a directory - DISABLED\n   */\n  async optimizeDirectory(\n    dirPath: string,\n    options: OptimizationOptions = {},\n    recursive: boolean = false,\n  ): Promise<OptimizationResult[]> {\n    // DISABLED: Image optimization completely disabled to prevent WebAssembly memory issues\n    this.logger.log(`Image optimization disabled for directory: ${dirPath}`);\n    return [];\n  }\n\n  /**\n   * Optimize all images in the uploads folder - DISABLED\n   */\n  async optimizeAllUploads(\n    options: OptimizationOptions = {},\n  ): Promise<OptimizationResult[]> {\n    // DISABLED: Image optimization completely disabled to prevent WebAssembly memory issues\n    this.logger.log('Image optimization disabled - returning empty results');\n    return [];\n  }\n\n  /**\n   * Optimize image buffer - DISABLED to prevent WebAssembly memory issues\n   */\n  async optimizeBuffer(\n    buffer: Buffer,\n    options: OptimizationOptions = {},\n  ): Promise<Buffer> {\n    // DISABLED: Image optimization completely disabled to prevent WebAssembly memory issues\n    this.logger.log('Image buffer optimization disabled - returning original buffer');\n    return buffer;\n  }\n\n  /**\n   * Get supported image formats\n   */\n  getSupportedFormats(): string[] {\n    return ['jpg', 'jpeg', 'png', 'webp', 'avif', 'JPG', 'JPEG', 'PNG', 'WEBP'];\n  }\n\n  /**\n   * Check if a file is a supported image format\n   */\n  isSupportedImage(filename: string): boolean {\n    const ext = path.extname(filename).toLowerCase().slice(1);\n    return this.getSupportedFormats().includes(ext);\n  }\n}"],"names":["ImageOptimizationService","optimizeImage","inputPath","outputPath","options","logger","log","originalSize","optimizedSize","reductionPercentage","originalPath","optimizedPath","backupPath","success","optimizeDirectory","dirPath","recursive","optimizeAllUploads","optimizeBuffer","buffer","getSupportedFormats","isSupportedImage","filename","ext","path","extname","toLowerCase","slice","includes","Logger","name","isProduction","process","env","NODE_ENV","isCPanelHosting","MAX_MEMORY_USAGE"],"mappings":"AAAA,iCAAiC,GACjC,6DAA6D,GAC7D,0DAA0D;;;;+BA0B7CA;;;eAAAA;;;wBAzBsB;8DAGb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBf,IAAA,AAAMA,2BAAN,MAAMA;IAKX;;GAEC,GACD,MAAMC,cACJC,SAAiB,EACjBC,UAAmB,EACnBC,UAA+B,CAAC,CAAC,EACJ;QAC7B,wFAAwF;QACxF,IAAI,CAACC,MAAM,CAACC,GAAG,CACb,CAAC,uDAAuD,EAAEJ,WAAW;QAEvE,OAAO;YACLK,cAAc;YACdC,eAAe;YACfC,qBAAqB;YACrBC,cAAcR;YACdS,eAAeT;YACfU,YAAYV;YACZW,SAAS;QACX;IACF;IAEA;;GAEC,GACD,MAAMC,kBACJC,OAAe,EACfX,UAA+B,CAAC,CAAC,EACjCY,YAAqB,KAAK,EACK;QAC/B,wFAAwF;QACxF,IAAI,CAACX,MAAM,CAACC,GAAG,CAAC,CAAC,2CAA2C,EAAES,SAAS;QACvE,OAAO,EAAE;IACX;IAEA;;GAEC,GACD,MAAME,mBACJb,UAA+B,CAAC,CAAC,EACF;QAC/B,wFAAwF;QACxF,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC;QAChB,OAAO,EAAE;IACX;IAEA;;GAEC,GACD,MAAMY,eACJC,MAAc,EACdf,UAA+B,CAAC,CAAC,EAChB;QACjB,wFAAwF;QACxF,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC;QAChB,OAAOa;IACT;IAEA;;GAEC,GACDC,sBAAgC;QAC9B,OAAO;YAAC;YAAO;YAAQ;YAAO;YAAQ;YAAQ;YAAO;YAAQ;YAAO;SAAO;IAC7E;IAEA;;GAEC,GACDC,iBAAiBC,QAAgB,EAAW;QAC1C,MAAMC,MAAMC,MAAKC,OAAO,CAACH,UAAUI,WAAW,GAAGC,KAAK,CAAC;QACvD,OAAO,IAAI,CAACP,mBAAmB,GAAGQ,QAAQ,CAACL;IAC7C;;aA5EiBlB,SAAS,IAAIwB,cAAM,CAAC7B,yBAAyB8B,IAAI;aACjDC,eAAeC,QAAQC,GAAG,CAACC,QAAQ,KAAK;aACxCC,kBAAkBH,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBAAgBF,QAAQC,GAAG,CAACG,gBAAgB;;AA2E1G"}