{"version":3,"sources":["../../src/file-storage/file-storage.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Controller, Get, Param, Res, Post, Body } from '@nestjs/common';\nimport { Response } from 'express';\nimport { join } from 'path';\nimport { FileStorageService } from './file-storage.service';\nimport {\n  ImageOptimizationService,\n  OptimizationOptions,\n} from './image-optimization.service';\n\n@Controller('uploads')\nexport class FileStorageController {\n  constructor(\n    private readonly fileStorageService: FileStorageService,\n    private readonly imageOptimizationService: ImageOptimizationService,\n  ) {}\n\n  @Get(':subdir/:filename')\n  getFile(\n    @Param('subdir') subdir: string,\n    @Param('filename') filename: string,\n    @Res() res: Response,\n  ) {\n    try {\n      const filePath = join(subdir, filename);\n      const file = this.fileStorageService.getFile(filePath);\n\n      // Determine content type based on file extension\n      const ext = filename.split('.').pop();\n      const contentTypes: Record<string, string> = {\n        png: 'image/png',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        gif: 'image/gif',\n        webp: 'image/webp',\n        pdf: 'application/pdf',\n        // Add more types as needed\n      };\n\n      const contentType =\n        (ext && contentTypes[ext.toLowerCase()]) || 'application/octet-stream';\n      res.type(contentType).send(file);\n    } catch (_error) {\n      res.status(404).send('File not found');\n    }\n  }\n\n  @Post('optimize')\n  async optimizeAllImages(@Body() options?: OptimizationOptions) {\n    const results =\n      await this.imageOptimizationService.optimizeAllUploads(options);\n\n    const successful = results.filter((r) => r.success);\n    const failed = results.filter((r) => !r.success);\n\n    const totalOriginalSize = successful.reduce(\n      (sum, r) => sum + r.originalSize,\n      0,\n    );\n    const totalOptimizedSize = successful.reduce(\n      (sum, r) => sum + r.optimizedSize,\n      0,\n    );\n    const totalSaved = totalOriginalSize - totalOptimizedSize;\n    const averageReduction =\n      successful.length > 0\n        ? successful.reduce((sum, r) => sum + r.reductionPercentage, 0) /\n          successful.length\n        : 0;\n\n    return {\n      message: 'Image optimization completed',\n      summary: {\n        totalProcessed: results.length,\n        successful: successful.length,\n        failed: failed.length,\n        totalOriginalSizeMB: (totalOriginalSize / 1024 / 1024).toFixed(2),\n        totalOptimizedSizeMB: (totalOptimizedSize / 1024 / 1024).toFixed(2),\n        totalSavedMB: (totalSaved / 1024 / 1024).toFixed(2),\n        averageReduction: averageReduction.toFixed(1) + '%',\n      },\n      results: results.slice(0, 10), // Return first 10 results for preview\n    };\n  }\n}\n"],"names":["FileStorageController","getFile","subdir","filename","res","filePath","join","file","fileStorageService","ext","split","pop","contentTypes","png","jpg","jpeg","gif","webp","pdf","contentType","toLowerCase","type","send","_error","status","optimizeAllImages","options","results","imageOptimizationService","optimizeAllUploads","successful","filter","r","success","failed","totalOriginalSize","reduce","sum","originalSize","totalOptimizedSize","optimizedSize","totalSaved","averageReduction","length","reductionPercentage","message","summary","totalProcessed","totalOriginalSizeMB","toFixed","totalOptimizedSizeMB","totalSavedMB","slice","constructor"],"mappings":"AAAA,oDAAoD;;;;+BAWvCA;;;eAAAA;;;wBAV2C;yBAC/B;sBACJ;oCACc;0CAI5B;;;;;;;;;;;;;;;AAGA,IAAA,AAAMA,wBAAN,MAAMA;IAOXC,QACE,AAAiBC,MAAc,EAC/B,AAAmBC,QAAgB,EACnC,AAAOC,GAAa,EACpB;QACA,IAAI;YACF,MAAMC,WAAWC,IAAAA,UAAI,EAACJ,QAAQC;YAC9B,MAAMI,OAAO,IAAI,CAACC,kBAAkB,CAACP,OAAO,CAACI;YAE7C,iDAAiD;YACjD,MAAMI,MAAMN,SAASO,KAAK,CAAC,KAAKC,GAAG;YACnC,MAAMC,eAAuC;gBAC3CC,KAAK;gBACLC,KAAK;gBACLC,MAAM;gBACNC,KAAK;gBACLC,MAAM;gBACNC,KAAK;YAEP;YAEA,MAAMC,cACJ,AAACV,OAAOG,YAAY,CAACH,IAAIW,WAAW,GAAG,IAAK;YAC9ChB,IAAIiB,IAAI,CAACF,aAAaG,IAAI,CAACf;QAC7B,EAAE,OAAOgB,QAAQ;YACfnB,IAAIoB,MAAM,CAAC,KAAKF,IAAI,CAAC;QACvB;IACF;IAEA,MACMG,kBAAkB,AAAQC,OAA6B,EAAE;QAC7D,MAAMC,UACJ,MAAM,IAAI,CAACC,wBAAwB,CAACC,kBAAkB,CAACH;QAEzD,MAAMI,aAAaH,QAAQI,MAAM,CAAC,CAACC,IAAMA,EAAEC,OAAO;QAClD,MAAMC,SAASP,QAAQI,MAAM,CAAC,CAACC,IAAM,CAACA,EAAEC,OAAO;QAE/C,MAAME,oBAAoBL,WAAWM,MAAM,CACzC,CAACC,KAAKL,IAAMK,MAAML,EAAEM,YAAY,EAChC;QAEF,MAAMC,qBAAqBT,WAAWM,MAAM,CAC1C,CAACC,KAAKL,IAAMK,MAAML,EAAEQ,aAAa,EACjC;QAEF,MAAMC,aAAaN,oBAAoBI;QACvC,MAAMG,mBACJZ,WAAWa,MAAM,GAAG,IAChBb,WAAWM,MAAM,CAAC,CAACC,KAAKL,IAAMK,MAAML,EAAEY,mBAAmB,EAAE,KAC3Dd,WAAWa,MAAM,GACjB;QAEN,OAAO;YACLE,SAAS;YACTC,SAAS;gBACPC,gBAAgBpB,QAAQgB,MAAM;gBAC9Bb,YAAYA,WAAWa,MAAM;gBAC7BT,QAAQA,OAAOS,MAAM;gBACrBK,qBAAqB,AAACb,CAAAA,oBAAoB,OAAO,IAAG,EAAGc,OAAO,CAAC;gBAC/DC,sBAAsB,AAACX,CAAAA,qBAAqB,OAAO,IAAG,EAAGU,OAAO,CAAC;gBACjEE,cAAc,AAACV,CAAAA,aAAa,OAAO,IAAG,EAAGQ,OAAO,CAAC;gBACjDP,kBAAkBA,iBAAiBO,OAAO,CAAC,KAAK;YAClD;YACAtB,SAASA,QAAQyB,KAAK,CAAC,GAAG;QAC5B;IACF;IAvEAC,YACE,AAAiB7C,kBAAsC,EACvD,AAAiBoB,wBAAkD,CACnE;aAFiBpB,qBAAAA;aACAoB,2BAAAA;IAChB;AAqEL"}