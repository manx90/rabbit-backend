{"version":3,"sources":["../../src/file-storage/file-storage.controller.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Controller, Get, Param, Res, Post, Body } from '@nestjs/common';\nimport { Response } from 'express';\nimport { join } from 'path';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiBody,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBadRequestResponse,\n} from '@nestjs/swagger';\nimport { FileStorageService } from './file-storage.service';\nimport {\n  ImageOptimizationService,\n  OptimizationOptions,\n} from './image-optimization.service';\n\n@ApiTags('File Storage')\n@Controller('uploads')\nexport class FileStorageController {\n  constructor(\n    private readonly fileStorageService: FileStorageService,\n    private readonly imageOptimizationService: ImageOptimizationService,\n  ) {}\n\n  @Get(':subdir/:filename')\n  @ApiOperation({ summary: 'Get file by subdirectory and filename' })\n  @ApiParam({ name: 'subdir', description: 'Subdirectory path' })\n  @ApiParam({ name: 'filename', description: 'File name' })\n  @ApiOkResponse({ description: 'File retrieved successfully' })\n  @ApiNotFoundResponse({ description: 'File not found' })\n  getFile(\n    @Param('subdir') subdir: string,\n    @Param('filename') filename: string,\n    @Res() res: Response,\n  ) {\n    try {\n      const filePath = join(subdir, filename);\n      const file = this.fileStorageService.getFile(filePath);\n\n      // Determine content type based on file extension\n      const ext = filename.split('.').pop();\n      const contentTypes: Record<string, string> = {\n        png: 'image/png',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        gif: 'image/gif',\n        webp: 'image/webp',\n        pdf: 'application/pdf',\n        // Add more types as needed\n      };\n\n      const contentType =\n        (ext && contentTypes[ext.toLowerCase()]) || 'application/octet-stream';\n      res.type(contentType).send(file);\n    } catch (_error) {\n      res.status(404).send('File not found');\n    }\n  }\n\n  @Post('optimize')\n  @ApiOperation({ summary: 'Optimize all uploaded images' })\n  @ApiBody({\n    description: 'Optimization options',\n    required: false,\n    schema: {\n      type: 'object',\n      properties: {\n        quality: { type: 'number', minimum: 1, maximum: 100 },\n        format: { type: 'string', enum: ['jpeg', 'png', 'webp'] },\n        resize: {\n          type: 'object',\n          properties: {\n            width: { type: 'number' },\n            height: { type: 'number' },\n          },\n        },\n      },\n    },\n  })\n  @ApiOkResponse({\n    description: 'Image optimization completed',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n        summary: {\n          type: 'object',\n          properties: {\n            totalProcessed: { type: 'number' },\n            successful: { type: 'number' },\n            failed: { type: 'number' },\n            totalOriginalSizeMB: { type: 'string' },\n            totalOptimizedSizeMB: { type: 'string' },\n            totalSavedMB: { type: 'string' },\n            averageReduction: { type: 'string' },\n          },\n        },\n        results: { type: 'array' },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'Bad request - invalid optimization options',\n  })\n  async optimizeAllImages(@Body() options?: OptimizationOptions) {\n    const results =\n      await this.imageOptimizationService.optimizeAllUploads(options);\n\n    const successful = results.filter((r) => r.success);\n    const failed = results.filter((r) => !r.success);\n\n    const totalOriginalSize = successful.reduce(\n      (sum, r) => sum + r.originalSize,\n      0,\n    );\n    const totalOptimizedSize = successful.reduce(\n      (sum, r) => sum + r.optimizedSize,\n      0,\n    );\n    const totalSaved = totalOriginalSize - totalOptimizedSize;\n    const averageReduction =\n      successful.length > 0\n        ? successful.reduce((sum, r) => sum + r.reductionPercentage, 0) /\n          successful.length\n        : 0;\n\n    return {\n      message: 'Image optimization completed',\n      summary: {\n        totalProcessed: results.length,\n        successful: successful.length,\n        failed: failed.length,\n        totalOriginalSizeMB: (totalOriginalSize / 1024 / 1024).toFixed(2),\n        totalOptimizedSizeMB: (totalOptimizedSize / 1024 / 1024).toFixed(2),\n        totalSavedMB: (totalSaved / 1024 / 1024).toFixed(2),\n        averageReduction: averageReduction.toFixed(1) + '%',\n      },\n      results: results.slice(0, 10), // Return first 10 results for preview\n    };\n  }\n}\n"],"names":["FileStorageController","getFile","subdir","filename","res","filePath","join","file","fileStorageService","ext","split","pop","contentTypes","png","jpg","jpeg","gif","webp","pdf","contentType","toLowerCase","type","send","_error","status","optimizeAllImages","options","results","imageOptimizationService","optimizeAllUploads","successful","filter","r","success","failed","totalOriginalSize","reduce","sum","originalSize","totalOptimizedSize","optimizedSize","totalSaved","averageReduction","length","reductionPercentage","message","summary","totalProcessed","totalOriginalSizeMB","toFixed","totalOptimizedSizeMB","totalSavedMB","slice","constructor","name","description","required","schema","properties","quality","minimum","maximum","format","enum","resize","width","height"],"mappings":"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"}